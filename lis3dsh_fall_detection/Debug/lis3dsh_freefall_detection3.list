
lis3dsh_freefall_detection3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bbc  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d64  08000d6c  00010d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d64  08000d64  00010d6c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d64  08000d64  00010d6c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d64  08000d6c  00010d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d64  08000d64  00010d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d68  08000d68  00010d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010d6c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010d6c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015f0  00000000  00000000  00010d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000033f  00000000  00000000  00012386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  000126c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000b8  00000000  00000000  00012798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018fa0  00000000  00000000  00012850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000aa2  00000000  00000000  0002b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cc7e  00000000  00000000  0002c292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b8f10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000398  00000000  00000000  000b8f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d4c 	.word	0x08000d4c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000d4c 	.word	0x08000d4c

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2iz>:
 80007b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d215      	bcs.n	80007ea <__aeabi_d2iz+0x36>
 80007be:	d511      	bpl.n	80007e4 <__aeabi_d2iz+0x30>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d912      	bls.n	80007f0 <__aeabi_d2iz+0x3c>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007da:	fa23 f002 	lsr.w	r0, r3, r2
 80007de:	bf18      	it	ne
 80007e0:	4240      	negne	r0, r0
 80007e2:	4770      	bx	lr
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	4770      	bx	lr
 80007ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ee:	d105      	bne.n	80007fc <__aeabi_d2iz+0x48>
 80007f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007f4:	bf08      	it	eq
 80007f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007fa:	4770      	bx	lr
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop

08000804 <SPI_Config>:
1. Enable SPI clock
2. Configure the Control Register 1
3. Configure the CR2
************************************************/
void SPI_Config (void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1<<12); //enable SPI1 clock
 8000808:	4b24      	ldr	r3, [pc, #144]	; (800089c <SPI_Config+0x98>)
 800080a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080c:	4a23      	ldr	r2, [pc, #140]	; (800089c <SPI_Config+0x98>)
 800080e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000812:	6453      	str	r3, [r2, #68]	; 0x44

	SPI1->CR1 |= (1<<0);	// cpha = 1, sample data at second edge (rising edge because cpol=1)
 8000814:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <SPI_Config+0x9c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a21      	ldr	r2, [pc, #132]	; (80008a0 <SPI_Config+0x9c>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	6013      	str	r3, [r2, #0]

	SPI1->CR1 |= (1<<1); 	// cpol = 1, idle_clock is high
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <SPI_Config+0x9c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a1e      	ldr	r2, [pc, #120]	; (80008a0 <SPI_Config+0x9c>)
 8000826:	f043 0302 	orr.w	r3, r3, #2
 800082a:	6013      	str	r3, [r2, #0]

	SPI1->CR1 |= (1<<2); 	// Master ModeLIS3DSH_write(TIM1_1L,0x07); //Freefall duration (= 25 ms)
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <SPI_Config+0x9c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <SPI_Config+0x9c>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	6013      	str	r3, [r2, #0]

	SPI1->CR1 &= ~(7<<3); 	// BR[2:0] = 000; default_clock/2 = 8MHz
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <SPI_Config+0x9c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <SPI_Config+0x9c>)
 800083e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000842:	6013      	str	r3, [r2, #0]

	SPI1->CR1 &= ~(1<<7); 	// LSBFIRST = 0, set for MSB first
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <SPI_Config+0x9c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <SPI_Config+0x9c>)
 800084a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800084e:	6013      	str	r3, [r2, #0]

	SPI1->CR1 |= (1<<8); 	// SSI: Internal slave select
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <SPI_Config+0x9c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <SPI_Config+0x9c>)
 8000856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085a:	6013      	str	r3, [r2, #0]

	SPI1->CR1 |= (1<<9);	//SSM: Software slave management
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <SPI_Config+0x9c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <SPI_Config+0x9c>)
 8000862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000866:	6013      	str	r3, [r2, #0]

	SPI1->CR1 &= ~(1<<10);  // RXONLY = 0, full-duplex
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <SPI_Config+0x9c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <SPI_Config+0x9c>)
 800086e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000872:	6013      	str	r3, [r2, #0]

	SPI1->CR1 &= ~(1<<11);  // DFF=0, 8 bit data
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <SPI_Config+0x9c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <SPI_Config+0x9c>)
 800087a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800087e:	6013      	str	r3, [r2, #0]

	SPI1->CR2 = 0;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <SPI_Config+0x9c>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]

	SPI1->CR1 |= (1<<6); //Enable SPI module
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <SPI_Config+0x9c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <SPI_Config+0x9c>)
 800088c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000890:	6013      	str	r3, [r2, #0]

}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40013000 	.word	0x40013000

080008a4 <SPI_transmit>:
2. Write the data to the Data Register
3. After the data has been transmitted, wait for the BSY bit to reset in Status Register
4. Clear the Overrun flag by reading DR and SR
************************************************/
void SPI_transmit (uint8_t data)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]

	while(!((SPI1->SR) & SPI1_TXE)); //wait for TXE bit to set
 80008ae:	bf00      	nop
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <SPI_transmit+0x58>)
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	f003 0302 	and.w	r3, r3, #2
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0f9      	beq.n	80008b0 <SPI_transmit+0xc>

	SPI1->DR = data;
 80008bc:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <SPI_transmit+0x58>)
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	60d3      	str	r3, [r2, #12]

	while(!((SPI1->SR) & SPI1_TXE)); // wait for TXE bit to set (until buffer empty)
 80008c2:	bf00      	nop
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <SPI_transmit+0x58>)
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	f003 0302 	and.w	r3, r3, #2
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d0f9      	beq.n	80008c4 <SPI_transmit+0x20>

	while (((SPI1->SR) & SPI1_BSY)); // wait for BSY bit to Reset (until SPI not busy)
 80008d0:	bf00      	nop
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <SPI_transmit+0x58>)
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f9      	bne.n	80008d2 <SPI_transmit+0x2e>

	//clear the overrun flag by reading DR and SR
	uint16_t temp;
	temp = SPI1->DR;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <SPI_transmit+0x58>)
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	81fb      	strh	r3, [r7, #14]
	temp = SPI1->SR;
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <SPI_transmit+0x58>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	81fb      	strh	r3, [r7, #14]
	temp++; //just to avoid unused temp variable warning
 80008ea:	89fb      	ldrh	r3, [r7, #14]
 80008ec:	3301      	adds	r3, #1
 80008ee:	81fb      	strh	r3, [r7, #14]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40013000 	.word	0x40013000

08000900 <SPI_receive>:
	3. Wait for the RXNE bit to Set in the status Register
	4. Read data from Data Register
	************************************************/

void SPI_receive (int8_t *data)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

		while (((SPI1->SR) & SPI1_BSY)); // wait for BSY bit to Reset (until SPI not busy)
 8000908:	bf00      	nop
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <SPI_receive+0x40>)
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1f9      	bne.n	800090a <SPI_receive+0xa>

		SPI1->DR = 0; //send dummy data
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <SPI_receive+0x40>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]

		while (!((SPI1->SR)& SPI1_RXNE));	// Wait for RXNE to set
 800091c:	bf00      	nop
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <SPI_receive+0x40>)
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0f9      	beq.n	800091e <SPI_receive+0x1e>

		*data = (SPI1->DR);
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <SPI_receive+0x40>)
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	b25a      	sxtb	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	701a      	strb	r2, [r3, #0]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40013000 	.word	0x40013000

08000944 <GPIO_Config>:

void GPIO_Config (void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<0) | (1<<3) | (1<<4); //enable GPIO port A, D & port E
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <GPIO_Config+0xa0>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4a25      	ldr	r2, [pc, #148]	; (80009e4 <GPIO_Config+0xa0>)
 800094e:	f043 0319 	orr.w	r3, r3, #25
 8000952:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= (2<<10) | (2<<12) | (2<<14); //PA5, PA6, & PA7 set for alternate function (SPI pins)
 8000954:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <GPIO_Config+0xa4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <GPIO_Config+0xa4>)
 800095a:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 800095e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1<<24) | (1<<26) | (1<<28) | (1<<30);	// PD12/13/14/15 set for output (LED pin)
 8000960:	4b22      	ldr	r3, [pc, #136]	; (80009ec <GPIO_Config+0xa8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a21      	ldr	r2, [pc, #132]	; (80009ec <GPIO_Config+0xa8>)
 8000966:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800096a:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1<<6);		// PE3 set for output (slave select pin)
 800096c:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <GPIO_Config+0xac>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a1f      	ldr	r2, [pc, #124]	; (80009f0 <GPIO_Config+0xac>)
 8000972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000976:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(1<<0);	// PE0 & PE1 set for interrupt input
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <GPIO_Config+0xac>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <GPIO_Config+0xac>)
 800097e:	f023 0301 	bic.w	r3, r3, #1
 8000982:	6013      	str	r3, [r2, #0]

	//port A
	GPIOA->OSPEEDR |= (3<<10)|(3<<12)|(3<<14);  // HIGH Speed for PA5, PA6, PA7
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <GPIO_Config+0xa4>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <GPIO_Config+0xa4>)
 800098a:	f443 437c 	orr.w	r3, r3, #64512	; 0xfc00
 800098e:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[0] |= (5<<20)|(5<<24)|(5<<28);   // AF5(SPI1) for PA5, PA6, PA7
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <GPIO_Config+0xa4>)
 8000992:	6a1b      	ldr	r3, [r3, #32]
 8000994:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <GPIO_Config+0xa4>)
 8000996:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800099a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800099e:	6213      	str	r3, [r2, #32]

	//port D
	GPIOD->OTYPER &= ~((1<<13) | (1<<13) | (1<<14) | (1<<13));  // bit = 13 --> Output push pull
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <GPIO_Config+0xa8>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	4a11      	ldr	r2, [pc, #68]	; (80009ec <GPIO_Config+0xa8>)
 80009a6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80009aa:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR |= (2<<24) | (2<<26) | (2<<28) | (2<<30);  // Pin PD13 (bits 27:26) as Fast Speed (1:0)
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <GPIO_Config+0xa8>)
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <GPIO_Config+0xa8>)
 80009b2:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
 80009b6:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~((3<<24) | (3<<26) | (3<<28) | (3<<30));  // Pin PD13 (bits 11:10) are 1:0 --> no pull up or pulldown
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <GPIO_Config+0xa4>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <GPIO_Config+0xa4>)
 80009be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80009c2:	60d3      	str	r3, [r2, #12]

	//port E
	GPIOE->PUPDR |=  (2<<0) | (2<<2);  // Bits (1:0) = 1:0  --> PE0 is in Pull Down mode
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <GPIO_Config+0xac>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <GPIO_Config+0xac>)
 80009ca:	f043 030a 	orr.w	r3, r3, #10
 80009ce:	60d3      	str	r3, [r2, #12]
	GPIOE->ODR |= (1<<3); // PE3 pin set, put slave idle
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <GPIO_Config+0xac>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <GPIO_Config+0xac>)
 80009d6:	f043 0308 	orr.w	r3, r3, #8
 80009da:	6153      	str	r3, [r2, #20]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020c00 	.word	0x40020c00
 80009f0:	40021000 	.word	0x40021000

080009f4 <EXTI0_IRQHandler>:

	__enable_irq(); /* Enable global interrupts */
}

void EXTI0_IRQHandler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1<<0))    // If the PE0 triggered the interrupt
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <EXTI0_IRQHandler+0x30>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00b      	beq.n	8000a1c <EXTI0_IRQHandler+0x28>
	{
		GPIOD->ODR |=  (1<<12) | (1<<13) | (1<<14) | (1<<15) ; //turn all led ON
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <EXTI0_IRQHandler+0x34>)
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <EXTI0_IRQHandler+0x34>)
 8000a0a:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000a0e:	6153      	str	r3, [r2, #20]

		EXTI->PR |= (1<<0);  // Clear the interrupt flag by writing a 1
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <EXTI0_IRQHandler+0x30>)
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <EXTI0_IRQHandler+0x30>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6153      	str	r3, [r2, #20]
	}

}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	40013c00 	.word	0x40013c00
 8000a28:	40020c00 	.word	0x40020c00

08000a2c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1<<1))    // If the PE1 triggered the interrupt
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <EXTI1_IRQHandler+0x30>)
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00b      	beq.n	8000a54 <EXTI1_IRQHandler+0x28>
	{
		GPIOD->ODR |= (1<<14); // Set the Pin PD14 : red led
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <EXTI1_IRQHandler+0x34>)
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <EXTI1_IRQHandler+0x34>)
 8000a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a46:	6153      	str	r3, [r2, #20]

		EXTI->PR |= (1<<1);  // Clear the interrupt flag by writing a 1
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <EXTI1_IRQHandler+0x30>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	4a03      	ldr	r2, [pc, #12]	; (8000a5c <EXTI1_IRQHandler+0x30>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	6153      	str	r3, [r2, #20]
	}

}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	40013c00 	.word	0x40013c00
 8000a60:	40020c00 	.word	0x40020c00

08000a64 <CS_Enable>:
 * also work as mode select pin
 * to select between I2C and SPI mode
 * CS=0 for SPI, CS=1 for I2C
 */
void CS_Enable (void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
	GPIOE->ODR &= ~(1<<3); // PE3 pin reset, slave selected
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <CS_Enable+0x18>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	4a03      	ldr	r2, [pc, #12]	; (8000a7c <CS_Enable+0x18>)
 8000a6e:	f023 0308 	bic.w	r3, r3, #8
 8000a72:	6153      	str	r3, [r2, #20]

}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	40021000 	.word	0x40021000

08000a80 <CS_Disable>:

void CS_Disable (void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
	GPIOE->ODR |= (1<<3); // PE3 pin set, put slave idle
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <CS_Disable+0x18>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	4a03      	ldr	r2, [pc, #12]	; (8000a98 <CS_Disable+0x18>)
 8000a8a:	f043 0308 	orr.w	r3, r3, #8
 8000a8e:	6153      	str	r3, [r2, #20]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	40021000 	.word	0x40021000

08000a9c <LIS3DSH_write>:

void LIS3DSH_write (uint8_t address, uint8_t value)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	460a      	mov	r2, r1
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71bb      	strb	r3, [r7, #6]
	CS_Enable();//pull cs pin low
 8000aac:	f7ff ffda 	bl	8000a64 <CS_Enable>

	SPI_transmit(address); // select register
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fef6 	bl	80008a4 <SPI_transmit>
	SPI_transmit(value); // write data on register
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fef2 	bl	80008a4 <SPI_transmit>

	CS_Disable();	//pull the pin high
 8000ac0:	f7ff ffde 	bl	8000a80 <CS_Disable>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <LIS3DSH_read>:

void LIS3DSH_read (uint8_t address, int8_t* Data )
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
	address |= READ_OP ; //read operation bit set and multiple byte IO bit set
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ade:	71fb      	strb	r3, [r7, #7]

	CS_Enable();	// pull pin low, set slave in SPI mode
 8000ae0:	f7ff ffc0 	bl	8000a64 <CS_Enable>

	SPI_transmit (address); //send address
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fedc 	bl	80008a4 <SPI_transmit>
	SPI_receive (Data); // receive raw data respective to size in bytes
 8000aec:	6838      	ldr	r0, [r7, #0]
 8000aee:	f7ff ff07 	bl	8000900 <SPI_receive>

	CS_Disable(); //pull the pin high
 8000af2:	f7ff ffc5 	bl	8000a80 <CS_Disable>

}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <LIS3DSH_init>:
	for(uint32_t i = 1; i == 0; i++); //some delay untill sensor starts

}

void LIS3DSH_init(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
	/* Set configuration of LIS3DSH MEMS Accelerometer */
	LIS3DSH_write(CTRL_REG4,0x67); // ODR = 100 Hz; x = y = z = enable;
 8000b02:	2167      	movs	r1, #103	; 0x67
 8000b04:	2020      	movs	r0, #32
 8000b06:	f7ff ffc9 	bl	8000a9c <LIS3DSH_write>
	LIS3DSH_write(CTRL_REG5,0x00); // SPI = 4 wire; self_test = noramal; full_scale = +-2g; Anti-Aliasing_Filter_Bandwidth = 800;
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2024      	movs	r0, #36	; 0x24
 8000b0e:	f7ff ffc5 	bl	8000a9c <LIS3DSH_write>

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <main>:



int main()
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
	int ax, ay, az;
	int8_t RxData[6] = {0};
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	2300      	movs	r3, #0
 8000b24:	80bb      	strh	r3, [r7, #4]

	GPIO_Config();
 8000b26:	f7ff ff0d 	bl	8000944 <GPIO_Config>
	SPI_Config();
 8000b2a:	f7ff fe6b 	bl	8000804 <SPI_Config>
	//exti_init();

	LIS3DSH_init();
 8000b2e:	f7ff ffe6 	bl	8000afe <LIS3DSH_init>
	//LIS3DSH_freefall_init();
	//LIS3DSH_wakeup_init();
	//LIS3DSH_doubleTap_init();


	LIS3DSH_read(WHO_AM_I, RxData); //read who_am_I register to confirm selected slave
 8000b32:	463b      	mov	r3, r7
 8000b34:	4619      	mov	r1, r3
 8000b36:	200f      	movs	r0, #15
 8000b38:	f7ff ffc8 	bl	8000acc <LIS3DSH_read>

	/* check if full-scale set sensitivity accordingly */
	LIS3DSH_read(CTRL_REG5, RxData);
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4619      	mov	r1, r3
 8000b40:	2024      	movs	r0, #36	; 0x24
 8000b42:	f7ff ffc3 	bl	8000acc <LIS3DSH_read>


	while(1)
	{

		LIS3DSH_read(XOUT_L_REG, &RxData[0]);
 8000b46:	463b      	mov	r3, r7
 8000b48:	4619      	mov	r1, r3
 8000b4a:	2028      	movs	r0, #40	; 0x28
 8000b4c:	f7ff ffbe 	bl	8000acc <LIS3DSH_read>
		LIS3DSH_read(XOUT_H_REG, &RxData[1]);
 8000b50:	463b      	mov	r3, r7
 8000b52:	3301      	adds	r3, #1
 8000b54:	4619      	mov	r1, r3
 8000b56:	2029      	movs	r0, #41	; 0x29
 8000b58:	f7ff ffb8 	bl	8000acc <LIS3DSH_read>
		LIS3DSH_read(YOUT_L_REG, &RxData[2]);
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	3302      	adds	r3, #2
 8000b60:	4619      	mov	r1, r3
 8000b62:	202a      	movs	r0, #42	; 0x2a
 8000b64:	f7ff ffb2 	bl	8000acc <LIS3DSH_read>
		LIS3DSH_read(YOUT_H_REG, &RxData[3]);
 8000b68:	463b      	mov	r3, r7
 8000b6a:	3303      	adds	r3, #3
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	202b      	movs	r0, #43	; 0x2b
 8000b70:	f7ff ffac 	bl	8000acc <LIS3DSH_read>
		LIS3DSH_read(ZOUT_L_REG, &RxData[4]);
 8000b74:	463b      	mov	r3, r7
 8000b76:	3304      	adds	r3, #4
 8000b78:	4619      	mov	r1, r3
 8000b7a:	202c      	movs	r0, #44	; 0x2c
 8000b7c:	f7ff ffa6 	bl	8000acc <LIS3DSH_read>
		LIS3DSH_read(ZOUT_H_REG, &RxData[5]);
 8000b80:	463b      	mov	r3, r7
 8000b82:	3305      	adds	r3, #5
 8000b84:	4619      	mov	r1, r3
 8000b86:	202d      	movs	r0, #45	; 0x2d
 8000b88:	f7ff ffa0 	bl	8000acc <LIS3DSH_read>

		// process data
		ax = (SENSITYVITY_FS2 * ( (RxData[1]<<8) + (RxData[0]) ));
 8000b8c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000b90:	021b      	lsls	r3, r3, #8
 8000b92:	f997 2000 	ldrsb.w	r2, [r7]
 8000b96:	4413      	add	r3, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fda1 	bl	80006e0 <__aeabi_i2d>
 8000b9e:	a340      	add	r3, pc, #256	; (adr r3, 8000ca0 <main+0x188>)
 8000ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba4:	f7ff fb20 	bl	80001e8 <__aeabi_dmul>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4610      	mov	r0, r2
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f7ff fe00 	bl	80007b4 <__aeabi_d2iz>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	613b      	str	r3, [r7, #16]
		ay = (SENSITYVITY_FS2 * ( (RxData[3]<<8) + (RxData[2]) ));
 8000bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fd8b 	bl	80006e0 <__aeabi_i2d>
 8000bca:	a335      	add	r3, pc, #212	; (adr r3, 8000ca0 <main+0x188>)
 8000bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd0:	f7ff fb0a 	bl	80001e8 <__aeabi_dmul>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	4610      	mov	r0, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f7ff fdea 	bl	80007b4 <__aeabi_d2iz>
 8000be0:	4603      	mov	r3, r0
 8000be2:	60fb      	str	r3, [r7, #12]
		az = (SENSITYVITY_FS2 * ( (RxData[5]<<8) + (RxData[4]) ));
 8000be4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fd75 	bl	80006e0 <__aeabi_i2d>
 8000bf6:	a32a      	add	r3, pc, #168	; (adr r3, 8000ca0 <main+0x188>)
 8000bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfc:	f7ff faf4 	bl	80001e8 <__aeabi_dmul>
 8000c00:	4602      	mov	r2, r0
 8000c02:	460b      	mov	r3, r1
 8000c04:	4610      	mov	r0, r2
 8000c06:	4619      	mov	r1, r3
 8000c08:	f7ff fdd4 	bl	80007b4 <__aeabi_d2iz>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60bb      	str	r3, [r7, #8]
		 * 1. check if x, y, z is near_zero/in_threshold_range
		 * 2. wait for some delay (100 ms recommended)
		 * 3. check condition same as step 1
		 * 4. if true toggel led
		 */
		if( ((ax > ThresholdLow) && (ax < ThresholdHigh)) && ((ay > ThresholdLow) && (ay < ThresholdHigh)) && ((az > ThresholdLow) && (az < ThresholdHigh)) )
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	f513 7faf 	cmn.w	r3, #350	; 0x15e
 8000c16:	dd96      	ble.n	8000b46 <main+0x2e>
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000c1e:	da92      	bge.n	8000b46 <main+0x2e>
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f513 7faf 	cmn.w	r3, #350	; 0x15e
 8000c26:	dd8e      	ble.n	8000b46 <main+0x2e>
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000c2e:	da8a      	bge.n	8000b46 <main+0x2e>
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	f513 7faf 	cmn.w	r3, #350	; 0x15e
 8000c36:	dd86      	ble.n	8000b46 <main+0x2e>
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000c3e:	da82      	bge.n	8000b46 <main+0x2e>
		{
			for(uint32_t i= 0; i < (0xFFFFE); i++);
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e002      	b.n	8000c4c <main+0x134>
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	4a16      	ldr	r2, [pc, #88]	; (8000ca8 <main+0x190>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d9f8      	bls.n	8000c46 <main+0x12e>
			if( ((ax > ThresholdLow) && (ax < ThresholdHigh)) && ((ay > ThresholdLow) && (ay < ThresholdHigh)) && ((az > ThresholdLow) && (az < ThresholdHigh)) )
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	f513 7faf 	cmn.w	r3, #350	; 0x15e
 8000c5a:	f77f af74 	ble.w	8000b46 <main+0x2e>
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000c64:	f6bf af6f 	bge.w	8000b46 <main+0x2e>
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f513 7faf 	cmn.w	r3, #350	; 0x15e
 8000c6e:	f77f af6a 	ble.w	8000b46 <main+0x2e>
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000c78:	f6bf af65 	bge.w	8000b46 <main+0x2e>
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	f513 7faf 	cmn.w	r3, #350	; 0x15e
 8000c82:	f77f af60 	ble.w	8000b46 <main+0x2e>
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000c8c:	f6bf af5b 	bge.w	8000b46 <main+0x2e>
			{
				GPIOD->ODR ^=  ((1<<12) | (1<<13) | (1<<14) | (1<<15)) ; //turn all led ON
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <main+0x194>)
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <main+0x194>)
 8000c96:	f483 4370 	eor.w	r3, r3, #61440	; 0xf000
 8000c9a:	6153      	str	r3, [r2, #20]
		LIS3DSH_read(XOUT_L_REG, &RxData[0]);
 8000c9c:	e753      	b.n	8000b46 <main+0x2e>
 8000c9e:	bf00      	nop
 8000ca0:	eb851eb8 	.word	0xeb851eb8
 8000ca4:	3faeb851 	.word	0x3faeb851
 8000ca8:	000ffffd 	.word	0x000ffffd
 8000cac:	40020c00 	.word	0x40020c00

08000cb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cb2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cb4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <LoopForever+0x6>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	; (8000cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <LoopForever+0xe>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	; (8000cfc <LoopForever+0x16>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cde:	f000 f811 	bl	8000d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce2:	f7ff ff19 	bl	8000b18 <main>

08000ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce6:	e7fe      	b.n	8000ce6 <LoopForever>
  ldr   r0, =_estack
 8000ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000cf4:	08000d6c 	.word	0x08000d6c
  ldr r2, =_sbss
 8000cf8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cfc:	2000001c 	.word	0x2000001c

08000d00 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <__libc_init_array>:
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	4d0d      	ldr	r5, [pc, #52]	; (8000d3c <__libc_init_array+0x38>)
 8000d08:	4c0d      	ldr	r4, [pc, #52]	; (8000d40 <__libc_init_array+0x3c>)
 8000d0a:	1b64      	subs	r4, r4, r5
 8000d0c:	10a4      	asrs	r4, r4, #2
 8000d0e:	2600      	movs	r6, #0
 8000d10:	42a6      	cmp	r6, r4
 8000d12:	d109      	bne.n	8000d28 <__libc_init_array+0x24>
 8000d14:	4d0b      	ldr	r5, [pc, #44]	; (8000d44 <__libc_init_array+0x40>)
 8000d16:	4c0c      	ldr	r4, [pc, #48]	; (8000d48 <__libc_init_array+0x44>)
 8000d18:	f000 f818 	bl	8000d4c <_init>
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	10a4      	asrs	r4, r4, #2
 8000d20:	2600      	movs	r6, #0
 8000d22:	42a6      	cmp	r6, r4
 8000d24:	d105      	bne.n	8000d32 <__libc_init_array+0x2e>
 8000d26:	bd70      	pop	{r4, r5, r6, pc}
 8000d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d2c:	4798      	blx	r3
 8000d2e:	3601      	adds	r6, #1
 8000d30:	e7ee      	b.n	8000d10 <__libc_init_array+0xc>
 8000d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d36:	4798      	blx	r3
 8000d38:	3601      	adds	r6, #1
 8000d3a:	e7f2      	b.n	8000d22 <__libc_init_array+0x1e>
 8000d3c:	08000d64 	.word	0x08000d64
 8000d40:	08000d64 	.word	0x08000d64
 8000d44:	08000d64 	.word	0x08000d64
 8000d48:	08000d68 	.word	0x08000d68

08000d4c <_init>:
 8000d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4e:	bf00      	nop
 8000d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d52:	bc08      	pop	{r3}
 8000d54:	469e      	mov	lr, r3
 8000d56:	4770      	bx	lr

08000d58 <_fini>:
 8000d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5a:	bf00      	nop
 8000d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d5e:	bc08      	pop	{r3}
 8000d60:	469e      	mov	lr, r3
 8000d62:	4770      	bx	lr
