
STM32F4-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006864  08006864  00016864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800694c  0800694c  0001694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006958  08006958  00016958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005bc  20000000  0800695c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000205bc  2**0
                  CONTENTS
  8 .bss          0000e464  200005bc  200005bc  000205bc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000ea20  2000ea20  000205bc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018191  00000000  00000000  000205ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003b9e  00000000  00000000  0003877d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0000a818  00000000  00000000  0003c31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00046b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  00047750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022960  00000000  00000000  000489a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001848e  00000000  00000000  0006b308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca77e  00000000  00000000  00083796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  0014df14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002608  00000000  00000000  0014dfe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200005bc 	.word	0x200005bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800684c 	.word	0x0800684c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200005c0 	.word	0x200005c0
 80001c4:	0800684c 	.word	0x0800684c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <cs43l22_SetFrequency>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  return 0;
}
 80004c0:	2000      	movs	r0, #0
 80004c2:	4770      	bx	lr

080004c4 <cs43l22_Reset>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
  return 0;
}
 80004c4:	2000      	movs	r0, #0
 80004c6:	4770      	bx	lr

080004c8 <cs43l22_SetVolume>:
{
 80004c8:	b507      	push	{r0, r1, r2, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80004ca:	2964      	cmp	r1, #100	; 0x64
 80004cc:	bf9b      	ittet	ls
 80004ce:	2264      	movls	r2, #100	; 0x64
 80004d0:	ebc1 2101 	rsbls	r1, r1, r1, lsl #8
 80004d4:	22ff      	movhi	r2, #255	; 0xff
 80004d6:	fbb1 f2f2 	udivls	r2, r1, r2
 80004da:	bf98      	it	ls
 80004dc:	b2d2      	uxtbls	r2, r2
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80004de:	3219      	adds	r2, #25
 80004e0:	b2c0      	uxtb	r0, r0
 80004e2:	b2d2      	uxtb	r2, r2
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80004e4:	2120      	movs	r1, #32
 80004e6:	9201      	str	r2, [sp, #4]
 80004e8:	9000      	str	r0, [sp, #0]
 80004ea:	f000 fcb5 	bl	8000e58 <AUDIO_IO_Write>
 80004ee:	9800      	ldr	r0, [sp, #0]
 80004f0:	9a01      	ldr	r2, [sp, #4]
 80004f2:	2121      	movs	r1, #33	; 0x21
 80004f4:	f000 fcb0 	bl	8000e58 <AUDIO_IO_Write>
}
 80004f8:	2000      	movs	r0, #0
 80004fa:	b003      	add	sp, #12
 80004fc:	f85d fb04 	ldr.w	pc, [sp], #4

08000500 <cs43l22_Init>:
{
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000504:	b2f4      	uxtb	r4, r6
{
 8000506:	460d      	mov	r5, r1
 8000508:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 800050a:	f000 fc71 	bl	8000df0 <AUDIO_IO_Init>
  AUDIO_IO_Write(Addr, Reg, Value);
 800050e:	2201      	movs	r2, #1
 8000510:	2102      	movs	r1, #2
 8000512:	4620      	mov	r0, r4
 8000514:	f000 fca0 	bl	8000e58 <AUDIO_IO_Write>
  switch (OutputDevice)
 8000518:	1e6a      	subs	r2, r5, #1
 800051a:	4b2a      	ldr	r3, [pc, #168]	; (80005c4 <cs43l22_Init+0xc4>)
 800051c:	2a03      	cmp	r2, #3
 800051e:	d84e      	bhi.n	80005be <cs43l22_Init+0xbe>
 8000520:	e8df f002 	tbb	[pc, r2]
 8000524:	4d4b4902 	.word	0x4d4b4902
    OutputDev = 0xFA;
 8000528:	22fa      	movs	r2, #250	; 0xfa
    OutputDev = 0x05;
 800052a:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800052c:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 800052e:	2104      	movs	r1, #4
 8000530:	4620      	mov	r0, r4
 8000532:	f000 fc91 	bl	8000e58 <AUDIO_IO_Write>
 8000536:	2281      	movs	r2, #129	; 0x81
 8000538:	2105      	movs	r1, #5
 800053a:	4620      	mov	r0, r4
 800053c:	f000 fc8c 	bl	8000e58 <AUDIO_IO_Write>
 8000540:	2204      	movs	r2, #4
 8000542:	2106      	movs	r1, #6
 8000544:	4620      	mov	r0, r4
 8000546:	f000 fc87 	bl	8000e58 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 800054a:	4630      	mov	r0, r6
 800054c:	4639      	mov	r1, r7
 800054e:	f7ff ffbb 	bl	80004c8 <cs43l22_SetVolume>
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000552:	2d02      	cmp	r5, #2
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000554:	4606      	mov	r6, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000556:	d00e      	beq.n	8000576 <cs43l22_Init+0x76>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000558:	2206      	movs	r2, #6
 800055a:	210f      	movs	r1, #15
 800055c:	4620      	mov	r0, r4
 800055e:	f000 fc7b 	bl	8000e58 <AUDIO_IO_Write>
 8000562:	2200      	movs	r2, #0
 8000564:	2124      	movs	r1, #36	; 0x24
 8000566:	4620      	mov	r0, r4
 8000568:	f000 fc76 	bl	8000e58 <AUDIO_IO_Write>
 800056c:	2200      	movs	r2, #0
 800056e:	2125      	movs	r1, #37	; 0x25
 8000570:	4620      	mov	r0, r4
 8000572:	f000 fc71 	bl	8000e58 <AUDIO_IO_Write>
 8000576:	4620      	mov	r0, r4
 8000578:	2200      	movs	r2, #0
 800057a:	210a      	movs	r1, #10
 800057c:	f000 fc6c 	bl	8000e58 <AUDIO_IO_Write>
 8000580:	4620      	mov	r0, r4
 8000582:	2204      	movs	r2, #4
 8000584:	210e      	movs	r1, #14
 8000586:	f000 fc67 	bl	8000e58 <AUDIO_IO_Write>
 800058a:	4620      	mov	r0, r4
 800058c:	2200      	movs	r2, #0
 800058e:	2127      	movs	r1, #39	; 0x27
 8000590:	f000 fc62 	bl	8000e58 <AUDIO_IO_Write>
 8000594:	4620      	mov	r0, r4
 8000596:	220f      	movs	r2, #15
 8000598:	211f      	movs	r1, #31
 800059a:	f000 fc5d 	bl	8000e58 <AUDIO_IO_Write>
 800059e:	4620      	mov	r0, r4
 80005a0:	220a      	movs	r2, #10
 80005a2:	211a      	movs	r1, #26
 80005a4:	f000 fc58 	bl	8000e58 <AUDIO_IO_Write>
 80005a8:	4620      	mov	r0, r4
 80005aa:	220a      	movs	r2, #10
 80005ac:	211b      	movs	r1, #27
 80005ae:	f000 fc53 	bl	8000e58 <AUDIO_IO_Write>
}
 80005b2:	4630      	mov	r0, r6
 80005b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OutputDev = 0xAF;
 80005b6:	22af      	movs	r2, #175	; 0xaf
 80005b8:	e7b7      	b.n	800052a <cs43l22_Init+0x2a>
    OutputDev = 0xAA;
 80005ba:	22aa      	movs	r2, #170	; 0xaa
 80005bc:	e7b5      	b.n	800052a <cs43l22_Init+0x2a>
    OutputDev = 0x05;
 80005be:	2205      	movs	r2, #5
 80005c0:	e7b3      	b.n	800052a <cs43l22_Init+0x2a>
 80005c2:	bf00      	nop
 80005c4:	200005d8 	.word	0x200005d8

080005c8 <cs43l22_DeInit>:
  AUDIO_IO_DeInit();
 80005c8:	f000 bc44 	b.w	8000e54 <AUDIO_IO_DeInit>

080005cc <cs43l22_ReadID>:
{
 80005cc:	b510      	push	{r4, lr}
 80005ce:	4604      	mov	r4, r0
  AUDIO_IO_Init(); 
 80005d0:	f000 fc0e 	bl	8000df0 <AUDIO_IO_Init>
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80005d4:	2101      	movs	r1, #1
 80005d6:	b2e0      	uxtb	r0, r4
 80005d8:	f000 fc5c 	bl	8000e94 <AUDIO_IO_Read>
}
 80005dc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80005e0:	bd10      	pop	{r4, pc}

080005e2 <cs43l22_SetMute.part.0>:
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
 80005e2:	b507      	push	{r0, r1, r2, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80005e4:	b2c0      	uxtb	r0, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80005e6:	22ff      	movs	r2, #255	; 0xff
 80005e8:	2104      	movs	r1, #4
 80005ea:	9001      	str	r0, [sp, #4]
 80005ec:	f000 fc34 	bl	8000e58 <AUDIO_IO_Write>
 80005f0:	9801      	ldr	r0, [sp, #4]
 80005f2:	2201      	movs	r2, #1
 80005f4:	2122      	movs	r1, #34	; 0x22
 80005f6:	f000 fc2f 	bl	8000e58 <AUDIO_IO_Write>
 80005fa:	9801      	ldr	r0, [sp, #4]
 80005fc:	2201      	movs	r2, #1
 80005fe:	2123      	movs	r1, #35	; 0x23
}
 8000600:	b003      	add	sp, #12
 8000602:	f85d eb04 	ldr.w	lr, [sp], #4
  AUDIO_IO_Write(Addr, Reg, Value);
 8000606:	f000 bc27 	b.w	8000e58 <AUDIO_IO_Write>
	...

0800060c <cs43l22_SetMute>:
  if(Cmd == AUDIO_MUTE_ON)
 800060c:	2901      	cmp	r1, #1
{
 800060e:	b507      	push	{r0, r1, r2, lr}
  if(Cmd == AUDIO_MUTE_ON)
 8000610:	d105      	bne.n	800061e <cs43l22_SetMute+0x12>
 8000612:	f7ff ffe6 	bl	80005e2 <cs43l22_SetMute.part.0>
}
 8000616:	2000      	movs	r0, #0
 8000618:	b003      	add	sp, #12
 800061a:	f85d fb04 	ldr.w	pc, [sp], #4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800061e:	b2c0      	uxtb	r0, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000620:	2200      	movs	r2, #0
 8000622:	2122      	movs	r1, #34	; 0x22
 8000624:	9001      	str	r0, [sp, #4]
 8000626:	f000 fc17 	bl	8000e58 <AUDIO_IO_Write>
 800062a:	9801      	ldr	r0, [sp, #4]
 800062c:	2200      	movs	r2, #0
 800062e:	2123      	movs	r1, #35	; 0x23
 8000630:	f000 fc12 	bl	8000e58 <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <cs43l22_SetMute+0x38>)
  AUDIO_IO_Write(Addr, Reg, Value);
 8000636:	9801      	ldr	r0, [sp, #4]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000638:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 800063a:	2104      	movs	r1, #4
 800063c:	f000 fc0c 	bl	8000e58 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8000640:	e7e9      	b.n	8000616 <cs43l22_SetMute+0xa>
 8000642:	bf00      	nop
 8000644:	200005d8 	.word	0x200005d8

08000648 <cs43l22_Resume>:
{
 8000648:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  volatile uint32_t index = 0x00;
 800064a:	2600      	movs	r6, #0
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800064c:	4631      	mov	r1, r6
{
 800064e:	4604      	mov	r4, r0
  volatile uint32_t index = 0x00;
 8000650:	9603      	str	r6, [sp, #12]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000652:	f7ff ffdb 	bl	800060c <cs43l22_SetMute>
  for(index = 0x00; index < 0xFF; index++);
 8000656:	9603      	str	r6, [sp, #12]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000658:	4605      	mov	r5, r0
  for(index = 0x00; index < 0xFF; index++);
 800065a:	9b03      	ldr	r3, [sp, #12]
 800065c:	2bfe      	cmp	r3, #254	; 0xfe
 800065e:	d90e      	bls.n	800067e <cs43l22_Resume+0x36>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <cs43l22_Resume+0x40>)
 8000662:	b2e0      	uxtb	r0, r4
 8000664:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000666:	9001      	str	r0, [sp, #4]
 8000668:	2104      	movs	r1, #4
 800066a:	f000 fbf5 	bl	8000e58 <AUDIO_IO_Write>
 800066e:	9801      	ldr	r0, [sp, #4]
 8000670:	229e      	movs	r2, #158	; 0x9e
 8000672:	2102      	movs	r1, #2
 8000674:	f000 fbf0 	bl	8000e58 <AUDIO_IO_Write>
}
 8000678:	4628      	mov	r0, r5
 800067a:	b004      	add	sp, #16
 800067c:	bd70      	pop	{r4, r5, r6, pc}
  for(index = 0x00; index < 0xFF; index++);
 800067e:	9b03      	ldr	r3, [sp, #12]
 8000680:	3301      	adds	r3, #1
 8000682:	9303      	str	r3, [sp, #12]
 8000684:	e7e9      	b.n	800065a <cs43l22_Resume+0x12>
 8000686:	bf00      	nop
 8000688:	200005d8 	.word	0x200005d8

0800068c <cs43l22_Pause>:
{  
 800068c:	b510      	push	{r4, lr}
 800068e:	4604      	mov	r4, r0
  if(Cmd == AUDIO_MUTE_ON)
 8000690:	f7ff ffa7 	bl	80005e2 <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000694:	b2e0      	uxtb	r0, r4
 8000696:	2201      	movs	r2, #1
 8000698:	2102      	movs	r1, #2
 800069a:	f000 fbdd 	bl	8000e58 <AUDIO_IO_Write>
}
 800069e:	2000      	movs	r0, #0
 80006a0:	bd10      	pop	{r4, pc}
	...

080006a4 <cs43l22_Stop>:
{
 80006a4:	b513      	push	{r0, r1, r4, lr}
 80006a6:	4604      	mov	r4, r0
  if(Cmd == AUDIO_MUTE_ON)
 80006a8:	f7ff ff9b 	bl	80005e2 <cs43l22_SetMute.part.0>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80006ac:	b2e0      	uxtb	r0, r4
  AUDIO_IO_Write(Addr, Reg, Value);
 80006ae:	2204      	movs	r2, #4
 80006b0:	210e      	movs	r1, #14
 80006b2:	9001      	str	r0, [sp, #4]
 80006b4:	f000 fbd0 	bl	8000e58 <AUDIO_IO_Write>
 80006b8:	9801      	ldr	r0, [sp, #4]
 80006ba:	229f      	movs	r2, #159	; 0x9f
 80006bc:	2102      	movs	r1, #2
 80006be:	f000 fbcb 	bl	8000e58 <AUDIO_IO_Write>
  Is_cs43l22_Stop = 1;
 80006c2:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <cs43l22_Stop+0x2c>)
 80006c4:	2201      	movs	r2, #1
}
 80006c6:	2000      	movs	r0, #0
  Is_cs43l22_Stop = 1;
 80006c8:	701a      	strb	r2, [r3, #0]
}
 80006ca:	b002      	add	sp, #8
 80006cc:	bd10      	pop	{r4, pc}
 80006ce:	bf00      	nop
 80006d0:	20000000 	.word	0x20000000

080006d4 <cs43l22_Play>:
{
 80006d4:	b570      	push	{r4, r5, r6, lr}
  if(Is_cs43l22_Stop == 1)
 80006d6:	4d0d      	ldr	r5, [pc, #52]	; (800070c <cs43l22_Play+0x38>)
 80006d8:	782b      	ldrb	r3, [r5, #0]
 80006da:	2b01      	cmp	r3, #1
{
 80006dc:	4604      	mov	r4, r0
  if(Is_cs43l22_Stop == 1)
 80006de:	d113      	bne.n	8000708 <cs43l22_Play+0x34>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80006e0:	b2c6      	uxtb	r6, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80006e2:	2206      	movs	r2, #6
 80006e4:	210e      	movs	r1, #14
 80006e6:	4630      	mov	r0, r6
 80006e8:	f000 fbb6 	bl	8000e58 <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80006ec:	2100      	movs	r1, #0
 80006ee:	4620      	mov	r0, r4
 80006f0:	f7ff ff8c 	bl	800060c <cs43l22_SetMute>
  AUDIO_IO_Write(Addr, Reg, Value);
 80006f4:	229e      	movs	r2, #158	; 0x9e
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80006f6:	4604      	mov	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80006f8:	2102      	movs	r1, #2
 80006fa:	4630      	mov	r0, r6
 80006fc:	f000 fbac 	bl	8000e58 <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	702b      	strb	r3, [r5, #0]
}
 8000704:	4620      	mov	r0, r4
 8000706:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t counter = 0;
 8000708:	2400      	movs	r4, #0
  return counter;  
 800070a:	e7fb      	b.n	8000704 <cs43l22_Play+0x30>
 800070c:	20000000 	.word	0x20000000

08000710 <cs43l22_SetOutputMode>:
  switch (Output) 
 8000710:	3901      	subs	r1, #1
{
 8000712:	b510      	push	{r4, lr}
 8000714:	b2c0      	uxtb	r0, r0
 8000716:	4c10      	ldr	r4, [pc, #64]	; (8000758 <cs43l22_SetOutputMode+0x48>)
 8000718:	2903      	cmp	r1, #3
 800071a:	d817      	bhi.n	800074c <cs43l22_SetOutputMode+0x3c>
 800071c:	e8df f001 	tbb	[pc, r1]
 8000720:	16100a02 	.word	0x16100a02
  AUDIO_IO_Write(Addr, Reg, Value);
 8000724:	22fa      	movs	r2, #250	; 0xfa
 8000726:	2104      	movs	r1, #4
 8000728:	f000 fb96 	bl	8000e58 <AUDIO_IO_Write>
      OutputDev = 0xFA;
 800072c:	23fa      	movs	r3, #250	; 0xfa
      OutputDev = 0x05;
 800072e:	7023      	strb	r3, [r4, #0]
}
 8000730:	2000      	movs	r0, #0
 8000732:	bd10      	pop	{r4, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 8000734:	22af      	movs	r2, #175	; 0xaf
 8000736:	2104      	movs	r1, #4
 8000738:	f000 fb8e 	bl	8000e58 <AUDIO_IO_Write>
      OutputDev = 0xAF;
 800073c:	23af      	movs	r3, #175	; 0xaf
 800073e:	e7f6      	b.n	800072e <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000740:	22aa      	movs	r2, #170	; 0xaa
 8000742:	2104      	movs	r1, #4
 8000744:	f000 fb88 	bl	8000e58 <AUDIO_IO_Write>
      OutputDev = 0xAA;
 8000748:	23aa      	movs	r3, #170	; 0xaa
 800074a:	e7f0      	b.n	800072e <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 800074c:	2205      	movs	r2, #5
 800074e:	2104      	movs	r1, #4
 8000750:	f000 fb82 	bl	8000e58 <AUDIO_IO_Write>
      OutputDev = 0x05;
 8000754:	2305      	movs	r3, #5
 8000756:	e7ea      	b.n	800072e <cs43l22_SetOutputMode+0x1e>
 8000758:	200005d8 	.word	0x200005d8

0800075c <LIS3DSH_DeInit>:
  * @retval None.
  */
void LIS3DSH_DeInit(void)
{
  
}
 800075c:	4770      	bx	lr

0800075e <LIS3DSH_Init>:
{
 800075e:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 8000760:	2300      	movs	r3, #0
{
 8000762:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 8000764:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Init();
 8000768:	f000 faae 	bl	8000cc8 <ACCELERO_IO_Init>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 800076c:	f10d 0007 	add.w	r0, sp, #7
 8000770:	2201      	movs	r2, #1
 8000772:	2120      	movs	r1, #32
  ctrl = (uint8_t) (InitStruct);
 8000774:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8000778:	f000 faf4 	bl	8000d64 <ACCELERO_IO_Write>
  ctrl = (uint8_t) (InitStruct >> 8);
 800077c:	0a24      	lsrs	r4, r4, #8
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 800077e:	2201      	movs	r2, #1
 8000780:	2124      	movs	r1, #36	; 0x24
 8000782:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) (InitStruct >> 8);
 8000786:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 800078a:	f000 faeb 	bl	8000d64 <ACCELERO_IO_Write>
}
 800078e:	b002      	add	sp, #8
 8000790:	bd10      	pop	{r4, pc}

08000792 <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 8000792:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 800079a:	f000 fa95 	bl	8000cc8 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 800079e:	f10d 0007 	add.w	r0, sp, #7
 80007a2:	2201      	movs	r2, #1
 80007a4:	210f      	movs	r1, #15
 80007a6:	f000 faff 	bl	8000da8 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
}
 80007aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80007ae:	b003      	add	sp, #12
 80007b0:	f85d fb04 	ldr.w	pc, [sp], #4

080007b4 <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 80007b4:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f10d 0007 	add.w	r0, sp, #7
 80007bc:	2125      	movs	r1, #37	; 0x25
 80007be:	f000 faf3 	bl	8000da8 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 80007c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 80007c6:	2201      	movs	r2, #1
  tmpreg |= LIS3DSH_BOOT_FORCED;
 80007c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 80007cc:	2125      	movs	r1, #37	; 0x25
 80007ce:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= LIS3DSH_BOOT_FORCED;
 80007d2:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 80007d6:	f000 fac5 	bl	8000d64 <ACCELERO_IO_Write>
}
 80007da:	b003      	add	sp, #12
 80007dc:	f85d fb04 	ldr.w	pc, [sp], #4

080007e0 <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 80007e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80007e2:	4604      	mov	r4, r0
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
  float valueinfloat = 0;
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 80007e4:	2201      	movs	r2, #1
 80007e6:	2124      	movs	r1, #36	; 0x24
 80007e8:	f10d 0007 	add.w	r0, sp, #7
 80007ec:	f000 fadc 	bl	8000da8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2128      	movs	r1, #40	; 0x28
 80007f4:	a802      	add	r0, sp, #8
 80007f6:	f000 fad7 	bl	8000da8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2129      	movs	r1, #41	; 0x29
 80007fe:	f10d 0009 	add.w	r0, sp, #9
 8000802:	f000 fad1 	bl	8000da8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8000806:	2201      	movs	r2, #1
 8000808:	212a      	movs	r1, #42	; 0x2a
 800080a:	f10d 000a 	add.w	r0, sp, #10
 800080e:	f000 facb 	bl	8000da8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8000812:	2201      	movs	r2, #1
 8000814:	212b      	movs	r1, #43	; 0x2b
 8000816:	f10d 000b 	add.w	r0, sp, #11
 800081a:	f000 fac5 	bl	8000da8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 800081e:	2201      	movs	r2, #1
 8000820:	212c      	movs	r1, #44	; 0x2c
 8000822:	a803      	add	r0, sp, #12
 8000824:	f000 fac0 	bl	8000da8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8000828:	2201      	movs	r2, #1
 800082a:	212d      	movs	r1, #45	; 0x2d
 800082c:	f10d 000d 	add.w	r0, sp, #13
 8000830:	f000 faba 	bl	8000da8 <ACCELERO_IO_Read>
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8000834:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800086c <LIS3DSH_ReadACC+0x8c>
 8000838:	1ea1      	subs	r1, r4, #2
 800083a:	aa02      	add	r2, sp, #8
 800083c:	3404      	adds	r4, #4
 800083e:	f992 0001 	ldrsb.w	r0, [r2, #1]
 8000842:	f912 3b02 	ldrsb.w	r3, [r2], #2
 8000846:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000852:	ee67 7a87 	vmul.f32	s15, s15, s14
    pData[i] = (int16_t)valueinfloat;
 8000856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800085a:	ee17 3a90 	vmov	r3, s15
 800085e:	f821 3f02 	strh.w	r3, [r1, #2]!
  for(i=0; i<3; i++)
 8000862:	428c      	cmp	r4, r1
 8000864:	d1eb      	bne.n	800083e <LIS3DSH_ReadACC+0x5e>
  }
}
 8000866:	b004      	add	sp, #16
 8000868:	bd10      	pop	{r4, pc}
 800086a:	bf00      	nop
 800086c:	3d75c28f 	.word	0x3d75c28f

08000870 <LIS3DSH_InterruptConfig>:
{
 8000870:	b513      	push	{r0, r1, r4, lr}
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8000872:	7802      	ldrb	r2, [r0, #0]
 8000874:	7843      	ldrb	r3, [r0, #1]
 8000876:	4313      	orrs	r3, r2
 8000878:	7882      	ldrb	r2, [r0, #2]
{
 800087a:	4604      	mov	r4, r0
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 800087c:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 800087e:	f10d 0007 	add.w	r0, sp, #7
 8000882:	2201      	movs	r2, #1
 8000884:	2123      	movs	r1, #35	; 0x23
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8000886:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 800088a:	f000 fa6b 	bl	8000d64 <ACCELERO_IO_Write>
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 800088e:	7922      	ldrb	r2, [r4, #4]
 8000890:	78e3      	ldrb	r3, [r4, #3]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8000892:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8000896:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8000898:	2121      	movs	r1, #33	; 0x21
 800089a:	2201      	movs	r2, #1
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 800089c:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 80008a0:	f000 fa60 	bl	8000d64 <ACCELERO_IO_Write>
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 80008a4:	79a2      	ldrb	r2, [r4, #6]
 80008a6:	7963      	ldrb	r3, [r4, #5]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 80008a8:	2122      	movs	r1, #34	; 0x22
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 80008aa:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 80008ac:	f10d 0007 	add.w	r0, sp, #7
 80008b0:	2201      	movs	r2, #1
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 80008b2:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 80008b6:	f000 fa55 	bl	8000d64 <ACCELERO_IO_Write>
}
 80008ba:	b002      	add	sp, #8
 80008bc:	bd10      	pop	{r4, pc}

080008be <LIS3DSH_Click_IntConfig>:
{
 80008be:	b530      	push	{r4, r5, lr}
 80008c0:	b085      	sub	sp, #20
  uint8_t ctrl = 0x00;
 80008c2:	2500      	movs	r5, #0
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 80008c4:	2401      	movs	r4, #1
  uint8_t ctrl = 0x00;
 80008c6:	f88d 5007 	strb.w	r5, [sp, #7]
  ACCELERO_IO_ITConfig();
 80008ca:	f000 fa23 	bl	8000d14 <ACCELERO_IO_ITConfig>
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 80008ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 80008d2:	a802      	add	r0, sp, #8
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 80008d4:	9302      	str	r3, [sp, #8]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 80008d6:	f88d 400d 	strb.w	r4, [sp, #13]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 80008da:	f88d 500e 	strb.w	r5, [sp, #14]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 80008de:	f7ff ffc7 	bl	8000870 <LIS3DSH_InterruptConfig>
  ctrl=0x03; 
 80008e2:	2303      	movs	r3, #3
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 80008e4:	4622      	mov	r2, r4
 80008e6:	f10d 0007 	add.w	r0, sp, #7
 80008ea:	2152      	movs	r1, #82	; 0x52
  ctrl=0x03; 
 80008ec:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 80008f0:	f000 fa38 	bl	8000d64 <ACCELERO_IO_Write>
  ctrl=0xC8; 
 80008f4:	23c8      	movs	r3, #200	; 0xc8
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 80008f6:	4622      	mov	r2, r4
 80008f8:	f10d 0007 	add.w	r0, sp, #7
 80008fc:	2154      	movs	r1, #84	; 0x54
  ctrl=0xC8; 
 80008fe:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 8000902:	f000 fa2f 	bl	8000d64 <ACCELERO_IO_Write>
  ctrl=0x45; 
 8000906:	2345      	movs	r3, #69	; 0x45
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 8000908:	4622      	mov	r2, r4
 800090a:	f10d 0007 	add.w	r0, sp, #7
 800090e:	2156      	movs	r1, #86	; 0x56
  ctrl=0x45; 
 8000910:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 8000914:	f000 fa26 	bl	8000d64 <ACCELERO_IO_Write>
  ctrl=0xFC; 
 8000918:	23fc      	movs	r3, #252	; 0xfc
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 800091a:	4622      	mov	r2, r4
 800091c:	f10d 0007 	add.w	r0, sp, #7
 8000920:	215a      	movs	r1, #90	; 0x5a
  ctrl=0xFC; 
 8000922:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 8000926:	f000 fa1d 	bl	8000d64 <ACCELERO_IO_Write>
  ctrl=0xA1; 
 800092a:	23a1      	movs	r3, #161	; 0xa1
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 800092c:	4622      	mov	r2, r4
 800092e:	f10d 0007 	add.w	r0, sp, #7
 8000932:	215b      	movs	r1, #91	; 0x5b
  ctrl=0xA1; 
 8000934:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 8000938:	f000 fa14 	bl	8000d64 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 800093c:	4622      	mov	r2, r4
 800093e:	f10d 0007 	add.w	r0, sp, #7
 8000942:	215c      	movs	r1, #92	; 0x5c
  ctrl=0x01; 
 8000944:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 8000948:	f000 fa0c 	bl	8000d64 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 800094c:	4622      	mov	r2, r4
 800094e:	f10d 0007 	add.w	r0, sp, #7
 8000952:	217b      	movs	r1, #123	; 0x7b
 8000954:	f000 fa06 	bl	8000d64 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 8000958:	4622      	mov	r2, r4
 800095a:	f10d 0007 	add.w	r0, sp, #7
 800095e:	2160      	movs	r1, #96	; 0x60
 8000960:	f000 fa00 	bl	8000d64 <ACCELERO_IO_Write>
  ctrl=0x06; 
 8000964:	2306      	movs	r3, #6
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 8000966:	4622      	mov	r2, r4
 8000968:	f10d 0007 	add.w	r0, sp, #7
 800096c:	2161      	movs	r1, #97	; 0x61
  ctrl=0x06; 
 800096e:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 8000972:	f000 f9f7 	bl	8000d64 <ACCELERO_IO_Write>
  ctrl=0x28; 
 8000976:	2328      	movs	r3, #40	; 0x28
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 8000978:	4622      	mov	r2, r4
 800097a:	f10d 0007 	add.w	r0, sp, #7
 800097e:	2162      	movs	r1, #98	; 0x62
  ctrl=0x28; 
 8000980:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 8000984:	f000 f9ee 	bl	8000d64 <ACCELERO_IO_Write>
  ctrl=0x11; 
 8000988:	2311      	movs	r3, #17
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 800098a:	4622      	mov	r2, r4
 800098c:	2163      	movs	r1, #99	; 0x63
 800098e:	f10d 0007 	add.w	r0, sp, #7
  ctrl=0x11; 
 8000992:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 8000996:	f000 f9e5 	bl	8000d64 <ACCELERO_IO_Write>
}
 800099a:	b005      	add	sp, #20
 800099c:	bd30      	pop	{r4, r5, pc}
	...

080009a0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80009a0:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80009a2:	4c20      	ldr	r4, [pc, #128]	; (8000a24 <SPIx_Init+0x84>)
{
 80009a4:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80009a6:	4620      	mov	r0, r4
 80009a8:	f003 f871 	bl	8003a8e <HAL_SPI_GetState>
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d137      	bne.n	8000a20 <SPIx_Init+0x80>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <SPIx_Init+0x88>)
 80009b2:	6023      	str	r3, [r4, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009b4:	2318      	movs	r3, #24
 80009b6:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 80009b8:	2307      	movs	r3, #7
 80009ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80009bc:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c0:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80009c4:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80009c6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80009ca:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(void)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <SPIx_Init+0x8c>)
 80009ce:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80009d0:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80009d2:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d4:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d6:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 80009d8:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 80009da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80009e0:	645a      	str	r2, [r3, #68]	; 0x44
 80009e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80009e8:	9201      	str	r2, [sp, #4]
 80009ea:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80009ec:	9002      	str	r0, [sp, #8]
 80009ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009f0:	f042 0201 	orr.w	r2, r2, #1
 80009f4:	631a      	str	r2, [r3, #48]	; 0x30
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	9302      	str	r3, [sp, #8]
 80009fe:	9b02      	ldr	r3, [sp, #8]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000a00:	21e0      	movs	r1, #224	; 0xe0
 8000a02:	2302      	movs	r3, #2
 8000a04:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 8000a08:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8000a12:	a903      	add	r1, sp, #12
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <SPIx_Init+0x90>)
 8000a16:	f001 f875 	bl	8001b04 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f002 fe7b 	bl	8003716 <HAL_SPI_Init>
}
 8000a20:	b008      	add	sp, #32
 8000a22:	bd10      	pop	{r4, pc}
 8000a24:	200005dc 	.word	0x200005dc
 8000a28:	40013000 	.word	0x40013000
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000

08000a34 <SPIx_WriteRead>:
{
 8000a34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f88d 3017 	strb.w	r3, [sp, #23]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <SPIx_WriteRead+0x38>)
{
 8000a3e:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	480a      	ldr	r0, [pc, #40]	; (8000a70 <SPIx_WriteRead+0x3c>)
 8000a48:	2301      	movs	r3, #1
 8000a4a:	f10d 0217 	add.w	r2, sp, #23
 8000a4e:	f10d 010f 	add.w	r1, sp, #15
 8000a52:	f002 fed8 	bl	8003806 <HAL_SPI_TransmitReceive>
 8000a56:	b120      	cbz	r0, 8000a62 <SPIx_WriteRead+0x2e>
  HAL_SPI_DeInit(&SpiHandle);
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <SPIx_WriteRead+0x3c>)
 8000a5a:	f002 febe 	bl	80037da <HAL_SPI_DeInit>
  SPIx_Init();
 8000a5e:	f7ff ff9f 	bl	80009a0 <SPIx_Init>
}
 8000a62:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000a66:	b007      	add	sp, #28
 8000a68:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a6c:	20000068 	.word	0x20000068
 8000a70:	200005dc 	.word	0x200005dc

08000a74 <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 8000a74:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000a76:	4e2a      	ldr	r6, [pc, #168]	; (8000b20 <I2Cx_Init+0xac>)
{
 8000a78:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000a7a:	f106 0058 	add.w	r0, r6, #88	; 0x58
 8000a7e:	f001 fd73 	bl	8002568 <HAL_I2C_GetState>
 8000a82:	4604      	mov	r4, r0
 8000a84:	2800      	cmp	r0, #0
 8000a86:	d148      	bne.n	8000b1a <I2Cx_Init+0xa6>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8000a88:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <I2Cx_Init+0xb0>)
static void I2Cx_MspInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000a8a:	4d27      	ldr	r5, [pc, #156]	; (8000b28 <I2Cx_Init+0xb4>)
 8000a8c:	9001      	str	r0, [sp, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a8e:	e9c6 3017 	strd	r3, r0, [r6, #92]	; 0x5c
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a92:	2233      	movs	r2, #51	; 0x33
 8000a94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a98:	e9c6 2319 	strd	r2, r3, [r6, #100]	; 0x64
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <I2Cx_Init+0xb8>)
 8000a9e:	65b3      	str	r3, [r6, #88]	; 0x58
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000aa0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000aa2:	f043 0302 	orr.w	r3, r3, #2
 8000aa6:	632b      	str	r3, [r5, #48]	; 0x30
 8000aa8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	9b01      	ldr	r3, [sp, #4]

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000ab6:	2312      	movs	r3, #18
 8000ab8:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000abc:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000abe:	e9cd 0305 	strd	r0, r3, [sp, #20]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8000ac2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000ac4:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8000ac6:	481a      	ldr	r0, [pc, #104]	; (8000b30 <I2Cx_Init+0xbc>)
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000ac8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8000aca:	f001 f81b 	bl	8001b04 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000ace:	9402      	str	r4, [sp, #8]
 8000ad0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000ad2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ad6:	642b      	str	r3, [r5, #64]	; 0x40
 8000ad8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ade:	9302      	str	r3, [sp, #8]
 8000ae0:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000ae2:	6a2b      	ldr	r3, [r5, #32]
 8000ae4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae8:	622b      	str	r3, [r5, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000aea:	6a2b      	ldr	r3, [r5, #32]
 8000aec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000af0:	622b      	str	r3, [r5, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8000af2:	4622      	mov	r2, r4
 8000af4:	4621      	mov	r1, r4
 8000af6:	201f      	movs	r0, #31
 8000af8:	f000 fdb2 	bl	8001660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000afc:	201f      	movs	r0, #31
 8000afe:	f000 fde1 	bl	80016c4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 8000b02:	4622      	mov	r2, r4
 8000b04:	4621      	mov	r1, r4
 8000b06:	2020      	movs	r0, #32
 8000b08:	f000 fdaa 	bl	8001660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8000b0c:	2020      	movs	r0, #32
 8000b0e:	f000 fdd9 	bl	80016c4 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 8000b12:	f106 0058 	add.w	r0, r6, #88	; 0x58
 8000b16:	f001 facd 	bl	80020b4 <HAL_I2C_Init>
}
 8000b1a:	b008      	add	sp, #32
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}
 8000b1e:	bf00      	nop
 8000b20:	200005dc 	.word	0x200005dc
 8000b24:	000186a0 	.word	0x000186a0
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	40020400 	.word	0x40020400

08000b34 <BSP_LED_Init>:
{
 8000b34:	b530      	push	{r4, r5, lr}
 8000b36:	b08b      	sub	sp, #44	; 0x2c
  LEDx_GPIO_CLK_ENABLE(Led);
 8000b38:	bb08      	cbnz	r0, 8000b7e <BSP_LED_Init+0x4a>
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <BSP_LED_Init+0xa4>)
 8000b3c:	9001      	str	r0, [sp, #4]
 8000b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b40:	f042 0208 	orr.w	r2, r2, #8
 8000b44:	631a      	str	r2, [r3, #48]	; 0x30
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f003 0308 	and.w	r3, r3, #8
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000b50:	4c22      	ldr	r4, [pc, #136]	; (8000bdc <BSP_LED_Init+0xa8>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <BSP_LED_Init+0xac>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000b54:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000b58:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000b5c:	6860      	ldr	r0, [r4, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000b5e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b62:	e9cd 3306 	strd	r3, r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000b66:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000b6c:	f000 ffca 	bl	8001b04 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000b70:	6860      	ldr	r0, [r4, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	4629      	mov	r1, r5
 8000b76:	f001 f8a5 	bl	8001cc4 <HAL_GPIO_WritePin>
}
 8000b7a:	b00b      	add	sp, #44	; 0x2c
 8000b7c:	bd30      	pop	{r4, r5, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000b7e:	2801      	cmp	r0, #1
 8000b80:	d10c      	bne.n	8000b9c <BSP_LED_Init+0x68>
 8000b82:	2300      	movs	r3, #0
 8000b84:	9302      	str	r3, [sp, #8]
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <BSP_LED_Init+0xa4>)
 8000b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b8a:	f042 0208 	orr.w	r2, r2, #8
 8000b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	9302      	str	r3, [sp, #8]
 8000b98:	9b02      	ldr	r3, [sp, #8]
 8000b9a:	e7d9      	b.n	8000b50 <BSP_LED_Init+0x1c>
 8000b9c:	2802      	cmp	r0, #2
 8000b9e:	d10c      	bne.n	8000bba <BSP_LED_Init+0x86>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	9303      	str	r3, [sp, #12]
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <BSP_LED_Init+0xa4>)
 8000ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ba8:	f042 0208 	orr.w	r2, r2, #8
 8000bac:	631a      	str	r2, [r3, #48]	; 0x30
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	9303      	str	r3, [sp, #12]
 8000bb6:	9b03      	ldr	r3, [sp, #12]
 8000bb8:	e7ca      	b.n	8000b50 <BSP_LED_Init+0x1c>
 8000bba:	2803      	cmp	r0, #3
 8000bbc:	d1c8      	bne.n	8000b50 <BSP_LED_Init+0x1c>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	9304      	str	r3, [sp, #16]
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <BSP_LED_Init+0xa4>)
 8000bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bc6:	f042 0208 	orr.w	r2, r2, #8
 8000bca:	631a      	str	r2, [r3, #48]	; 0x30
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	9304      	str	r3, [sp, #16]
 8000bd4:	9b04      	ldr	r3, [sp, #16]
 8000bd6:	e7bb      	b.n	8000b50 <BSP_LED_Init+0x1c>
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	20000068 	.word	0x20000068
 8000be0:	08006864 	.word	0x08006864

08000be4 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <BSP_LED_On+0x14>)
 8000be6:	4905      	ldr	r1, [pc, #20]	; (8000bfc <BSP_LED_On+0x18>)
 8000be8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000bec:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8000bf0:	6858      	ldr	r0, [r3, #4]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f001 b866 	b.w	8001cc4 <HAL_GPIO_WritePin>
 8000bf8:	20000068 	.word	0x20000068
 8000bfc:	08006864 	.word	0x08006864

08000c00 <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <BSP_LED_Off+0x14>)
 8000c02:	4905      	ldr	r1, [pc, #20]	; (8000c18 <BSP_LED_Off+0x18>)
 8000c04:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000c08:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8000c0c:	6858      	ldr	r0, [r3, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f001 b858 	b.w	8001cc4 <HAL_GPIO_WritePin>
 8000c14:	20000068 	.word	0x20000068
 8000c18:	08006864 	.word	0x08006864

08000c1c <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <BSP_LED_Toggle+0x14>)
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <BSP_LED_Toggle+0x18>)
 8000c20:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000c24:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8000c28:	6858      	ldr	r0, [r3, #4]
 8000c2a:	f001 b850 	b.w	8001cce <HAL_GPIO_TogglePin>
 8000c2e:	bf00      	nop
 8000c30:	20000068 	.word	0x20000068
 8000c34:	08006864 	.word	0x08006864

08000c38 <BSP_PB_Init>:
{
 8000c38:	b510      	push	{r4, lr}
 8000c3a:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000c3c:	b950      	cbnz	r0, 8000c54 <BSP_PB_Init+0x1c>
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <BSP_PB_Init+0x70>)
 8000c40:	9000      	str	r0, [sp, #0]
 8000c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c44:	f042 0201 	orr.w	r2, r2, #1
 8000c48:	631a      	str	r2, [r3, #48]	; 0x30
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	9b00      	ldr	r3, [sp, #0]
  if (Mode == BUTTON_MODE_GPIO)
 8000c54:	b971      	cbnz	r1, 8000c74 <BSP_PB_Init+0x3c>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000c56:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c58:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <BSP_PB_Init+0x74>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000c64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000c68:	a901      	add	r1, sp, #4
 8000c6a:	6940      	ldr	r0, [r0, #20]
 8000c6c:	f000 ff4a 	bl	8001b04 <HAL_GPIO_Init>
}
 8000c70:	b006      	add	sp, #24
 8000c72:	bd10      	pop	{r4, pc}
  if (Mode == BUTTON_MODE_EXTI)
 8000c74:	2901      	cmp	r1, #1
 8000c76:	d1fb      	bne.n	8000c70 <BSP_PB_Init+0x38>
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c78:	2400      	movs	r4, #0
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8000c80:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c84:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <BSP_PB_Init+0x74>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000c88:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000c8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000c8e:	a901      	add	r1, sp, #4
 8000c90:	6940      	ldr	r0, [r0, #20]
 8000c92:	f000 ff37 	bl	8001b04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 8000c96:	4622      	mov	r2, r4
 8000c98:	210f      	movs	r1, #15
 8000c9a:	2006      	movs	r0, #6
 8000c9c:	f000 fce0 	bl	8001660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	f000 fd0f 	bl	80016c4 <HAL_NVIC_EnableIRQ>
}
 8000ca6:	e7e3      	b.n	8000c70 <BSP_PB_Init+0x38>
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	20000068 	.word	0x20000068

08000cb0 <BSP_PB_GetState>:
{
 8000cb0:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <BSP_PB_GetState+0x14>)
 8000cb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000cb8:	2101      	movs	r1, #1
 8000cba:	6940      	ldr	r0, [r0, #20]
 8000cbc:	f000 fffc 	bl	8001cb8 <HAL_GPIO_ReadPin>
}
 8000cc0:	bd08      	pop	{r3, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000068 	.word	0x20000068

08000cc8 <ACCELERO_IO_Init>:

/**
  * @brief  Configures the Accelerometer SPI interface.
  */
void ACCELERO_IO_Init(void)
{
 8000cc8:	b530      	push	{r4, r5, lr}
 8000cca:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <ACCELERO_IO_Init+0x44>)
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000cce:	4810      	ldr	r0, [pc, #64]	; (8000d10 <ACCELERO_IO_Init+0x48>)
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	9100      	str	r1, [sp, #0]
 8000cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cd6:	f042 0210 	orr.w	r2, r2, #16
 8000cda:	631a      	str	r2, [r3, #48]	; 0x30
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2401      	movs	r4, #1
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8000ce0:	f003 0310 	and.w	r3, r3, #16
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8000ce4:	e9cd 1403 	strd	r1, r4, [sp, #12]
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8000ce8:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2508      	movs	r5, #8
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000cec:	a901      	add	r1, sp, #4
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8000cee:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	e9cd 5401 	strd	r5, r4, [sp, #4]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000cf4:	f000 ff06 	bl	8001b04 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <ACCELERO_IO_Init+0x48>)
 8000cfa:	4622      	mov	r2, r4
 8000cfc:	4629      	mov	r1, r5
 8000cfe:	f000 ffe1 	bl	8001cc4 <HAL_GPIO_WritePin>
  
  SPIx_Init();
 8000d02:	f7ff fe4d 	bl	80009a0 <SPIx_Init>
}
 8000d06:	b007      	add	sp, #28
 8000d08:	bd30      	pop	{r4, r5, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40021000 	.word	0x40021000

08000d14 <ACCELERO_IO_ITConfig>:
/**
  * @brief  Configures the Accelerometer INT2.
  *         EXTI0 is already used by user button so INT1 is not configured here.
  */
void ACCELERO_IO_ITConfig(void)
{
 8000d14:	b510      	push	{r4, lr}
 8000d16:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8000d18:	2400      	movs	r4, #0
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <ACCELERO_IO_ITConfig+0x48>)
 8000d1c:	9400      	str	r4, [sp, #0]
 8000d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8000d20:	480f      	ldr	r0, [pc, #60]	; (8000d60 <ACCELERO_IO_ITConfig+0x4c>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8000d22:	f042 0210 	orr.w	r2, r2, #16
 8000d26:	631a      	str	r2, [r3, #48]	; 0x30
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8000d32:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8000d36:	2302      	movs	r3, #2
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8000d38:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8000d3a:	e9cd 3201 	strd	r3, r2, [sp, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000d3e:	e9cd 4303 	strd	r4, r3, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8000d42:	f000 fedf 	bl	8001b04 <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 8000d46:	4622      	mov	r2, r4
 8000d48:	210f      	movs	r1, #15
 8000d4a:	2007      	movs	r0, #7
 8000d4c:	f000 fc88 	bl	8001660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 8000d50:	2007      	movs	r0, #7
 8000d52:	f000 fcb7 	bl	80016c4 <HAL_NVIC_EnableIRQ>
}
 8000d56:	b006      	add	sp, #24
 8000d58:	bd10      	pop	{r4, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40021000 	.word	0x40021000

08000d64 <ACCELERO_IO_Write>:
{
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8000d64:	2a01      	cmp	r2, #1
{
 8000d66:	b570      	push	{r4, r5, r6, lr}
 8000d68:	460e      	mov	r6, r1
 8000d6a:	4605      	mov	r5, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8000d6c:	bf88      	it	hi
 8000d6e:	f041 0640 	orrhi.w	r6, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8000d72:	480c      	ldr	r0, [pc, #48]	; (8000da4 <ACCELERO_IO_Write+0x40>)
{
 8000d74:	4614      	mov	r4, r2
  ACCELERO_CS_LOW();
 8000d76:	2108      	movs	r1, #8
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f000 ffa3 	bl	8001cc4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8000d7e:	4630      	mov	r0, r6
 8000d80:	f7ff fe58 	bl	8000a34 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8000d84:	442c      	add	r4, r5
 8000d86:	42a5      	cmp	r5, r4
 8000d88:	d106      	bne.n	8000d98 <ACCELERO_IO_Write+0x34>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
}
 8000d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ACCELERO_CS_HIGH();
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <ACCELERO_IO_Write+0x40>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	2108      	movs	r1, #8
 8000d94:	f000 bf96 	b.w	8001cc4 <HAL_GPIO_WritePin>
    SPIx_WriteRead(*pBuffer);
 8000d98:	f815 0b01 	ldrb.w	r0, [r5], #1
 8000d9c:	f7ff fe4a 	bl	8000a34 <SPIx_WriteRead>
    pBuffer++;
 8000da0:	e7f1      	b.n	8000d86 <ACCELERO_IO_Write+0x22>
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000

08000da8 <ACCELERO_IO_Read>:
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 8000da8:	2a01      	cmp	r2, #1
{  
 8000daa:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8000dac:	bf8c      	ite	hi
 8000dae:	f041 04c0 	orrhi.w	r4, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8000db2:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
{  
 8000db6:	4606      	mov	r6, r0
 8000db8:	4615      	mov	r5, r2
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8000dba:	480c      	ldr	r0, [pc, #48]	; (8000dec <ACCELERO_IO_Read+0x44>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	f000 ff80 	bl	8001cc4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f7ff fe35 	bl	8000a34 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8000dca:	4435      	add	r5, r6
 8000dcc:	42ae      	cmp	r6, r5
 8000dce:	d106      	bne.n	8000dde <ACCELERO_IO_Read+0x36>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
}
 8000dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ACCELERO_CS_HIGH();
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <ACCELERO_IO_Read+0x44>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2108      	movs	r1, #8
 8000dda:	f000 bf73 	b.w	8001cc4 <HAL_GPIO_WritePin>
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff fe28 	bl	8000a34 <SPIx_WriteRead>
 8000de4:	f806 0b01 	strb.w	r0, [r6], #1
    pBuffer++;
 8000de8:	e7f0      	b.n	8000dcc <ACCELERO_IO_Read+0x24>
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000

08000df0 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df2:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000df4:	2600      	movs	r6, #0
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <AUDIO_IO_Init+0x5c>)
 8000df8:	9600      	str	r6, [sp, #0]
 8000dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8000dfc:	4c14      	ldr	r4, [pc, #80]	; (8000e50 <AUDIO_IO_Init+0x60>)
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000dfe:	f042 0208 	orr.w	r2, r2, #8
 8000e02:	631a      	str	r2, [r3, #48]	; 0x30
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2510      	movs	r5, #16
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8000e0e:	a901      	add	r1, sp, #4
 8000e10:	4620      	mov	r0, r4
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000e12:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000e16:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000e18:	e9cd 6303 	strd	r6, r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	e9cd 5701 	strd	r5, r7, [sp, #4]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8000e20:	f000 fe70 	bl	8001b04 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000e24:	f7ff fe26 	bl	8000a74 <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8000e28:	4632      	mov	r2, r6
 8000e2a:	4629      	mov	r1, r5
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f000 ff49 	bl	8001cc4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000e32:	2005      	movs	r0, #5
 8000e34:	f000 fbe8 	bl	8001608 <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8000e38:	463a      	mov	r2, r7
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f000 ff41 	bl	8001cc4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000e42:	2005      	movs	r0, #5
 8000e44:	f000 fbe0 	bl	8001608 <HAL_Delay>
}
 8000e48:	b007      	add	sp, #28
 8000e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020c00 	.word	0x40020c00

08000e54 <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
  
}
 8000e54:	4770      	bx	lr
	...

08000e58 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000e58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <AUDIO_IO_Write+0x34>)
 8000e5c:	f88d 2017 	strb.w	r2, [sp, #23]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	9302      	str	r3, [sp, #8]
 8000e64:	f10d 0217 	add.w	r2, sp, #23
 8000e68:	2301      	movs	r3, #1
 8000e6a:	9200      	str	r2, [sp, #0]
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	460a      	mov	r2, r1
 8000e70:	4601      	mov	r1, r0
 8000e72:	4807      	ldr	r0, [pc, #28]	; (8000e90 <AUDIO_IO_Write+0x38>)
 8000e74:	f001 f9e0 	bl	8002238 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8000e78:	b120      	cbz	r0, 8000e84 <AUDIO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <AUDIO_IO_Write+0x38>)
 8000e7c:	f001 f9c3 	bl	8002206 <HAL_I2C_DeInit>
  I2Cx_Init();
 8000e80:	f7ff fdf8 	bl	8000a74 <I2Cx_Init>
  I2Cx_WriteData(Addr, Reg, Value);
}
 8000e84:	b007      	add	sp, #28
 8000e86:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e8a:	bf00      	nop
 8000e8c:	20000068 	.word	0x20000068
 8000e90:	20000634 	.word	0x20000634

08000e94 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000e94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <AUDIO_IO_Read+0x38>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	9302      	str	r3, [sp, #8]
{
 8000ea2:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	f10d 0117 	add.w	r1, sp, #23
 8000eaa:	9100      	str	r1, [sp, #0]
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	4601      	mov	r1, r0
 8000eb0:	4807      	ldr	r0, [pc, #28]	; (8000ed0 <AUDIO_IO_Read+0x3c>)
 8000eb2:	f001 fa51 	bl	8002358 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8000eb6:	b120      	cbz	r0, 8000ec2 <AUDIO_IO_Read+0x2e>
  HAL_I2C_DeInit(&I2cHandle);
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <AUDIO_IO_Read+0x3c>)
 8000eba:	f001 f9a4 	bl	8002206 <HAL_I2C_DeInit>
  I2Cx_Init();
 8000ebe:	f7ff fdd9 	bl	8000a74 <I2Cx_Init>
  return I2Cx_ReadData(Addr, Reg);
}
 8000ec2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000ec6:	b007      	add	sp, #28
 8000ec8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ecc:	20000068 	.word	0x20000068
 8000ed0:	20000634 	.word	0x20000634

08000ed4 <BSP_ACCELERO_Init>:
/**
  * @brief  Setx Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 8000ed4:	b510      	push	{r4, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 8000ed6:	4c07      	ldr	r4, [pc, #28]	; (8000ef4 <BSP_ACCELERO_Init+0x20>)
 8000ed8:	68a3      	ldr	r3, [r4, #8]
 8000eda:	4798      	blx	r3
 8000edc:	283f      	cmp	r0, #63	; 0x3f
 8000ede:	d106      	bne.n	8000eee <BSP_ACCELERO_Init+0x1a>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis3dshDrv;
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <BSP_ACCELERO_Init+0x24>)
                         l1s3dsh_InitStruct.Self_Test   | \
                         l1s3dsh_InitStruct.Full_Scale  | \
                         l1s3dsh_InitStruct.Filter_BW) << 8);

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8000ee2:	2067      	movs	r0, #103	; 0x67
    AcceleroDrv = &Lis3dshDrv;
 8000ee4:	601c      	str	r4, [r3, #0]
    AcceleroDrv->Init(ctrl);
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	4798      	blx	r3
    
    ret = ACCELERO_OK;
 8000eea:	2000      	movs	r0, #0
  else
  {
    ret = ACCELERO_ERROR;
  }
  return ret;
}
 8000eec:	bd10      	pop	{r4, pc}
    ret = ACCELERO_ERROR;
 8000eee:	2001      	movs	r0, #1
 8000ef0:	e7fc      	b.n	8000eec <BSP_ACCELERO_Init+0x18>
 8000ef2:	bf00      	nop
 8000ef4:	20000034 	.word	0x20000034
 8000ef8:	20000688 	.word	0x20000688

08000efc <BSP_ACCELERO_ReadID>:
  */
uint8_t BSP_ACCELERO_ReadID(void)
{
  uint8_t id = 0x00;

  if(AcceleroDrv->ReadID != NULL)
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <BSP_ACCELERO_ReadID+0xc>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6898      	ldr	r0, [r3, #8]
 8000f02:	b100      	cbz	r0, 8000f06 <BSP_ACCELERO_ReadID+0xa>
  {
    id = AcceleroDrv->ReadID();
 8000f04:	4700      	bx	r0
  }  
  return id;
}
 8000f06:	4770      	bx	lr
 8000f08:	20000688 	.word	0x20000688

08000f0c <BSP_ACCELERO_Click_ITConfig>:
/**
  * @brief  Configure Accelerometer click IT. 
  */
void BSP_ACCELERO_Click_ITConfig(void)
{
  if(AcceleroDrv->ConfigIT != NULL)
 8000f0c:	4b02      	ldr	r3, [pc, #8]	; (8000f18 <BSP_ACCELERO_Click_ITConfig+0xc>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	b103      	cbz	r3, 8000f16 <BSP_ACCELERO_Click_ITConfig+0xa>
  {
    AcceleroDrv->ConfigIT();
 8000f14:	4718      	bx	r3
  }
}
 8000f16:	4770      	bx	lr
 8000f18:	20000688 	.word	0x20000688

08000f1c <BSP_ACCELERO_Click_ITClear>:
/**
  * @brief  Clear Accelerometer click IT.
  */
void BSP_ACCELERO_Click_ITClear(void)
{
  if(AcceleroDrv->ClearIT != NULL)
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <BSP_ACCELERO_Click_ITClear+0xc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	b103      	cbz	r3, 8000f26 <BSP_ACCELERO_Click_ITClear+0xa>
  {
    AcceleroDrv->ClearIT();
 8000f24:	4718      	bx	r3
  }
}
 8000f26:	4770      	bx	lr
 8000f28:	20000688 	.word	0x20000688

08000f2c <BSP_ACCELERO_GetXYZ>:
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  int16_t SwitchXY = 0;
  
  if(AcceleroDrv->GetXYZ != NULL)
 8000f2c:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <BSP_ACCELERO_GetXYZ+0xc>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	b103      	cbz	r3, 8000f36 <BSP_ACCELERO_GetXYZ+0xa>
  {   
    AcceleroDrv->GetXYZ(pDataXYZ);
 8000f34:	4718      	bx	r3

  }
}
 8000f36:	4770      	bx	lr
 8000f38:	20000688 	.word	0x20000688

08000f3c <I2S3_Init>:
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <I2S3_Init+0x34>)

 /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8000f3e:	69d1      	ldr	r1, [r2, #28]
{
 8000f40:	b508      	push	{r3, lr}
  hAudioOutI2s.Instance         = I2S3;
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <I2S3_Init+0x38>)
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8000f44:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  hAudioOutI2s.Instance         = I2S3;
 8000f48:	601a      	str	r2, [r3, #0]
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8000f4a:	61d1      	str	r1, [r2, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000f4c:	2200      	movs	r2, #0
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000f4e:	f44f 7100 	mov.w	r1, #512	; 0x200
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8000f52:	6158      	str	r0, [r3, #20]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000f54:	4618      	mov	r0, r3
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8000f56:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000f5a:	e9c3 1201 	strd	r1, r2, [r3, #4]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000f5e:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000f60:	6119      	str	r1, [r3, #16]
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000f62:	f001 fb2b 	bl	80025bc <HAL_I2S_Init>
  }
  else
  {
    return AUDIO_OK;
  }
}
 8000f66:	3800      	subs	r0, #0
 8000f68:	bf18      	it	ne
 8000f6a:	2001      	movne	r0, #1
 8000f6c:	bd08      	pop	{r3, pc}
 8000f6e:	bf00      	nop
 8000f70:	40003c00 	.word	0x40003c00
 8000f74:	20000954 	.word	0x20000954

08000f78 <BSP_AUDIO_OUT_Play>:
{
 8000f78:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <BSP_AUDIO_OUT_Play+0x34>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
{
 8000f7e:	4605      	mov	r5, r0
 8000f80:	460c      	mov	r4, r1
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8000f82:	b28a      	uxth	r2, r1
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	4601      	mov	r1, r0
 8000f88:	2094      	movs	r0, #148	; 0x94
 8000f8a:	4798      	blx	r3
 8000f8c:	b960      	cbnz	r0, 8000fa8 <BSP_AUDIO_OUT_Play+0x30>
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000f8e:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 8000f92:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <BSP_AUDIO_OUT_Play+0x38>)
 8000f94:	bf34      	ite	cc
 8000f96:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 8000f9a:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 8000f9e:	4629      	mov	r1, r5
 8000fa0:	f001 fba6 	bl	80026f0 <HAL_I2S_Transmit_DMA>
    return AUDIO_OK;
 8000fa4:	2000      	movs	r0, #0
}
 8000fa6:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8000fa8:	2001      	movs	r0, #1
 8000faa:	e7fc      	b.n	8000fa6 <BSP_AUDIO_OUT_Play+0x2e>
 8000fac:	2000068c 	.word	0x2000068c
 8000fb0:	20000954 	.word	0x20000954

08000fb4 <BSP_AUDIO_OUT_ChangeBuffer>:
{
 8000fb4:	460a      	mov	r2, r1
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	4801      	ldr	r0, [pc, #4]	; (8000fc0 <BSP_AUDIO_OUT_ChangeBuffer+0xc>)
 8000fba:	f001 bb99 	b.w	80026f0 <HAL_I2S_Transmit_DMA>
 8000fbe:	bf00      	nop
 8000fc0:	20000954 	.word	0x20000954

08000fc4 <BSP_AUDIO_OUT_Pause>:
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <BSP_AUDIO_OUT_Pause+0x20>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
{    
 8000fc8:	b510      	push	{r4, lr}
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	2094      	movs	r0, #148	; 0x94
 8000fce:	4798      	blx	r3
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	b920      	cbnz	r0, 8000fde <BSP_AUDIO_OUT_Pause+0x1a>
    HAL_I2S_DMAPause(&hAudioOutI2s);
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <BSP_AUDIO_OUT_Pause+0x24>)
 8000fd6:	f001 fc5f 	bl	8002898 <HAL_I2S_DMAPause>
    return AUDIO_OK;
 8000fda:	4620      	mov	r0, r4
}
 8000fdc:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 8000fde:	2001      	movs	r0, #1
 8000fe0:	e7fc      	b.n	8000fdc <BSP_AUDIO_OUT_Pause+0x18>
 8000fe2:	bf00      	nop
 8000fe4:	2000068c 	.word	0x2000068c
 8000fe8:	20000954 	.word	0x20000954

08000fec <BSP_AUDIO_OUT_Resume>:
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <BSP_AUDIO_OUT_Resume+0x20>)
 8000fee:	681b      	ldr	r3, [r3, #0]
{    
 8000ff0:	b510      	push	{r4, lr}
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	2094      	movs	r0, #148	; 0x94
 8000ff6:	4798      	blx	r3
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	b920      	cbnz	r0, 8001006 <BSP_AUDIO_OUT_Resume+0x1a>
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <BSP_AUDIO_OUT_Resume+0x24>)
 8000ffe:	f001 fc83 	bl	8002908 <HAL_I2S_DMAResume>
    return AUDIO_OK;
 8001002:	4620      	mov	r0, r4
}
 8001004:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 8001006:	2001      	movs	r0, #1
 8001008:	e7fc      	b.n	8001004 <BSP_AUDIO_OUT_Resume+0x18>
 800100a:	bf00      	nop
 800100c:	2000068c 	.word	0x2000068c
 8001010:	20000954 	.word	0x20000954

08001014 <BSP_AUDIO_OUT_Stop>:
{
 8001014:	b538      	push	{r3, r4, r5, lr}
 8001016:	4605      	mov	r5, r0
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <BSP_AUDIO_OUT_Stop+0x38>)
 800101a:	f001 fcb9 	bl	8002990 <HAL_I2S_DMAStop>
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <BSP_AUDIO_OUT_Stop+0x3c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4629      	mov	r1, r5
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	2094      	movs	r0, #148	; 0x94
 8001028:	4798      	blx	r3
 800102a:	4604      	mov	r4, r0
 800102c:	b958      	cbnz	r0, 8001046 <BSP_AUDIO_OUT_Stop+0x32>
    if(Option == CODEC_PDWN_HW)
 800102e:	2d01      	cmp	r5, #1
 8001030:	d107      	bne.n	8001042 <BSP_AUDIO_OUT_Stop+0x2e>
      HAL_Delay(1);
 8001032:	4628      	mov	r0, r5
 8001034:	f000 fae8 	bl	8001608 <HAL_Delay>
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <BSP_AUDIO_OUT_Stop+0x40>)
 800103a:	4622      	mov	r2, r4
 800103c:	2110      	movs	r1, #16
 800103e:	f000 fe41 	bl	8001cc4 <HAL_GPIO_WritePin>
    return AUDIO_OK;
 8001042:	4620      	mov	r0, r4
 8001044:	e000      	b.n	8001048 <BSP_AUDIO_OUT_Stop+0x34>
    return AUDIO_ERROR;
 8001046:	2001      	movs	r0, #1
}
 8001048:	bd38      	pop	{r3, r4, r5, pc}
 800104a:	bf00      	nop
 800104c:	20000954 	.word	0x20000954
 8001050:	2000068c 	.word	0x2000068c
 8001054:	40020c00 	.word	0x40020c00

08001058 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8001058:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <BSP_AUDIO_OUT_ClockConfig+0x4c>)
 800105c:	2300      	movs	r3, #0
  uint8_t index = 0, freqindex = 0xFF;
 800105e:	25ff      	movs	r5, #255	; 0xff
 8001060:	4614      	mov	r4, r2
    if(I2SFreq[index] == AudioFreq)
 8001062:	f852 6b04 	ldr.w	r6, [r2], #4
 8001066:	b2d8      	uxtb	r0, r3
 8001068:	3301      	adds	r3, #1
 800106a:	428e      	cmp	r6, r1
 800106c:	bf08      	it	eq
 800106e:	4605      	moveq	r5, r0
  for(index = 0; index < 8; index++)
 8001070:	2b08      	cmp	r3, #8
 8001072:	d1f6      	bne.n	8001062 <BSP_AUDIO_OUT_ClockConfig+0xa>
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8001074:	4668      	mov	r0, sp
 8001076:	f002 fa85 	bl	8003584 <HAL_RCCEx_GetPeriphCLKConfig>
  if ((freqindex & 0x7) == 0)
 800107a:	2301      	movs	r3, #1
 800107c:	f015 0f07 	tst.w	r5, #7
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001080:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8001082:	bf0b      	itete	eq
 8001084:	eb04 0385 	addeq.w	r3, r4, r5, lsl #2
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8001088:	f44f 7381 	movne.w	r3, #258	; 0x102
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 800108c:	6a1a      	ldreq	r2, [r3, #32]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 800108e:	9301      	strne	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8001090:	bf06      	itte	eq
 8001092:	6c1b      	ldreq	r3, [r3, #64]	; 0x40
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8001094:	9201      	streq	r2, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8001096:	2303      	movne	r3, #3
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001098:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800109a:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800109c:	f002 f9da 	bl	8003454 <HAL_RCCEx_PeriphCLKConfig>
}
 80010a0:	b004      	add	sp, #16
 80010a2:	bd70      	pop	{r4, r5, r6, pc}
 80010a4:	08006870 	.word	0x08006870

080010a8 <BSP_AUDIO_OUT_MspInit>:
{
 80010a8:	b570      	push	{r4, r5, r6, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
  I2S3_CLK_ENABLE();
 80010ac:	4c3f      	ldr	r4, [pc, #252]	; (80011ac <BSP_AUDIO_OUT_MspInit+0x104>)
 80010ae:	2500      	movs	r5, #0
 80010b0:	9500      	str	r5, [sp, #0]
 80010b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b8:	6423      	str	r3, [r4, #64]	; 0x40
 80010ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	9b00      	ldr	r3, [sp, #0]
  I2S3_SCK_SD_CLK_ENABLE();
 80010c4:	9501      	str	r5, [sp, #4]
 80010c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6323      	str	r3, [r4, #48]	; 0x30
 80010ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	9b01      	ldr	r3, [sp, #4]
  I2S3_WS_CLK_ENABLE();
 80010d8:	9502      	str	r5, [sp, #8]
 80010da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6323      	str	r3, [r4, #48]	; 0x30
 80010e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80010ea:	f44f 5ca0 	mov.w	ip, #5120	; 0x1400
  I2S3_WS_CLK_ENABLE();
 80010ee:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	e9cd c305 	strd	ip, r3, [sp, #20]
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80010f6:	e9cd 5307 	strd	r5, r3, [sp, #28]
{
 80010fa:	4606      	mov	r6, r0
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80010fc:	2306      	movs	r3, #6
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80010fe:	482c      	ldr	r0, [pc, #176]	; (80011b0 <BSP_AUDIO_OUT_MspInit+0x108>)
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8001100:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8001102:	a905      	add	r1, sp, #20
 8001104:	f000 fcfe 	bl	8001b04 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8001108:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 800110a:	482a      	ldr	r0, [pc, #168]	; (80011b4 <BSP_AUDIO_OUT_MspInit+0x10c>)
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 800110c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 800110e:	a905      	add	r1, sp, #20
 8001110:	f000 fcf8 	bl	8001b04 <HAL_GPIO_Init>
  I2S3_MCK_CLK_ENABLE();
 8001114:	9503      	str	r5, [sp, #12]
 8001116:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8001118:	4825      	ldr	r0, [pc, #148]	; (80011b0 <BSP_AUDIO_OUT_MspInit+0x108>)
  I2S3_MCK_CLK_ENABLE();
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	6323      	str	r3, [r4, #48]	; 0x30
 8001120:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	9303      	str	r3, [sp, #12]
 8001128:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 800112a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8001130:	f000 fce8 	bl	8001b04 <HAL_GPIO_Init>
  I2S3_DMAx_CLK_ENABLE(); 
 8001134:	9504      	str	r5, [sp, #16]
 8001136:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hi2s->Instance == I2S3)
 8001138:	6832      	ldr	r2, [r6, #0]
  I2S3_DMAx_CLK_ENABLE(); 
 800113a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800113e:	6323      	str	r3, [r4, #48]	; 0x30
 8001140:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001146:	9304      	str	r3, [sp, #16]
 8001148:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S3)
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <BSP_AUDIO_OUT_MspInit+0x110>)
 800114c:	429a      	cmp	r2, r3
 800114e:	d123      	bne.n	8001198 <BSP_AUDIO_OUT_MspInit+0xf0>
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <BSP_AUDIO_OUT_MspInit+0x114>)
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001152:	2240      	movs	r2, #64	; 0x40
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001154:	e9c3 2503 	strd	r2, r5, [r3, #12]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8001158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001160:	e9c3 1205 	strd	r1, r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8001164:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8001168:	e9c3 2507 	strd	r2, r5, [r3, #28]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800116c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001170:	2204      	movs	r2, #4
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8001172:	461c      	mov	r4, r3
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001174:	e9c3 0209 	strd	r0, r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001178:	2203      	movs	r2, #3
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800117a:	e9c3 250b 	strd	r2, r5, [r3, #44]	; 0x2c
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <BSP_AUDIO_OUT_MspInit+0x118>)
 8001180:	f844 2f04 	str.w	r2, [r4, #4]!
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8001184:	63b4      	str	r4, [r6, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_i2sTx);
 8001186:	4620      	mov	r0, r4
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8001188:	609d      	str	r5, [r3, #8]
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800118a:	635d      	str	r5, [r3, #52]	; 0x34
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 800118c:	63de      	str	r6, [r3, #60]	; 0x3c
    HAL_DMA_DeInit(&hdma_i2sTx);
 800118e:	f000 fb53 	bl	8001838 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_i2sTx);
 8001192:	4620      	mov	r0, r4
 8001194:	f000 fad0 	bl	8001738 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	210e      	movs	r1, #14
 800119c:	202f      	movs	r0, #47	; 0x2f
 800119e:	f000 fa5f 	bl	8001660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ); 
 80011a2:	202f      	movs	r0, #47	; 0x2f
 80011a4:	f000 fa8e 	bl	80016c4 <HAL_NVIC_EnableIRQ>
}
 80011a8:	b00a      	add	sp, #40	; 0x28
 80011aa:	bd70      	pop	{r4, r5, r6, pc}
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020800 	.word	0x40020800
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40003c00 	.word	0x40003c00
 80011bc:	2000068c 	.word	0x2000068c
 80011c0:	400260b8 	.word	0x400260b8

080011c4 <BSP_AUDIO_OUT_Init>:
{    
 80011c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80011c8:	4c18      	ldr	r4, [pc, #96]	; (800122c <BSP_AUDIO_OUT_Init+0x68>)
{    
 80011ca:	4615      	mov	r5, r2
 80011cc:	4606      	mov	r6, r0
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80011ce:	2200      	movs	r2, #0
 80011d0:	4620      	mov	r0, r4
{    
 80011d2:	460f      	mov	r7, r1
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80011d4:	4629      	mov	r1, r5
 80011d6:	f7ff ff3f 	bl	8001058 <BSP_AUDIO_OUT_ClockConfig>
  hAudioOutI2s.Instance = I2S3;
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <BSP_AUDIO_OUT_Init+0x6c>)
 80011dc:	6023      	str	r3, [r4, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80011de:	4620      	mov	r0, r4
 80011e0:	f001 fd89 	bl	8002cf6 <HAL_I2S_GetState>
 80011e4:	4601      	mov	r1, r0
 80011e6:	b910      	cbnz	r0, 80011ee <BSP_AUDIO_OUT_Init+0x2a>
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80011e8:	4620      	mov	r0, r4
 80011ea:	f7ff ff5d 	bl	80010a8 <BSP_AUDIO_OUT_MspInit>
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80011ee:	4628      	mov	r0, r5
 80011f0:	f7ff fea4 	bl	8000f3c <I2S3_Init>
 80011f4:	4604      	mov	r4, r0
 80011f6:	b118      	cbz	r0, 8001200 <BSP_AUDIO_OUT_Init+0x3c>
    ret = AUDIO_ERROR;
 80011f8:	2401      	movs	r4, #1
}
 80011fa:	4620      	mov	r0, r4
 80011fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8001200:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8001238 <BSP_AUDIO_OUT_Init+0x74>
 8001204:	2094      	movs	r0, #148	; 0x94
 8001206:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800120a:	4798      	blx	r3
 800120c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8001210:	28e0      	cmp	r0, #224	; 0xe0
 8001212:	d1f1      	bne.n	80011f8 <BSP_AUDIO_OUT_Init+0x34>
      pAudioDrv = &cs43l22_drv; 
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <BSP_AUDIO_OUT_Init+0x70>)
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8001216:	463a      	mov	r2, r7
      pAudioDrv = &cs43l22_drv; 
 8001218:	f8c3 8000 	str.w	r8, [r3]
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800121c:	4631      	mov	r1, r6
 800121e:	f8d8 8000 	ldr.w	r8, [r8]
 8001222:	462b      	mov	r3, r5
 8001224:	2094      	movs	r0, #148	; 0x94
 8001226:	47c0      	blx	r8
 8001228:	e7e7      	b.n	80011fa <BSP_AUDIO_OUT_Init+0x36>
 800122a:	bf00      	nop
 800122c:	20000954 	.word	0x20000954
 8001230:	40003c00 	.word	0x40003c00
 8001234:	2000068c 	.word	0x2000068c
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_I2S_TxCpltCallback>:
{
 800123c:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 800123e:	6802      	ldr	r2, [r0, #0]
 8001240:	4b02      	ldr	r3, [pc, #8]	; (800124c <HAL_I2S_TxCpltCallback+0x10>)
 8001242:	429a      	cmp	r2, r3
 8001244:	d101      	bne.n	800124a <HAL_I2S_TxCpltCallback+0xe>
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8001246:	f002 fcbf 	bl	8003bc8 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800124a:	bd08      	pop	{r3, pc}
 800124c:	40003c00 	.word	0x40003c00

08001250 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
 8001250:	4770      	bx	lr
	...

08001254 <HAL_I2S_TxHalfCpltCallback>:
{
 8001254:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 8001256:	6802      	ldr	r2, [r0, #0]
 8001258:	4b02      	ldr	r3, [pc, #8]	; (8001264 <HAL_I2S_TxHalfCpltCallback+0x10>)
 800125a:	429a      	cmp	r2, r3
 800125c:	d101      	bne.n	8001262 <HAL_I2S_TxHalfCpltCallback+0xe>
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 800125e:	f7ff fff7 	bl	8001250 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8001262:	bd08      	pop	{r3, pc}
 8001264:	40003c00 	.word	0x40003c00

08001268 <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing  
  * @param  size: Current size of the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8001268:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Start the process receive DMA */
  HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 800126a:	b28a      	uxth	r2, r1
 800126c:	4601      	mov	r1, r0
 800126e:	4802      	ldr	r0, [pc, #8]	; (8001278 <BSP_AUDIO_IN_Record+0x10>)
 8001270:	f001 faa2 	bl	80027b8 <HAL_I2S_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 8001274:	2000      	movs	r0, #0
 8001276:	bd08      	pop	{r3, pc}
 8001278:	2000099c 	.word	0x2000099c

0800127c <BSP_AUDIO_IN_Stop>:
/**
  * @brief  Stops audio recording.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(void)
{
 800127c:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Call the Media layer pause function */
  HAL_I2S_DMAStop(&hAudioInI2s);  
 800127e:	4802      	ldr	r0, [pc, #8]	; (8001288 <BSP_AUDIO_IN_Stop+0xc>)
 8001280:	f001 fb86 	bl	8002990 <HAL_I2S_DMAStop>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 8001284:	2000      	movs	r0, #0
 8001286:	bd08      	pop	{r3, pc}
 8001288:	2000099c 	.word	0x2000099c

0800128c <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf: Pointer to data PDM buffer
  * @param  PCMBuf: Pointer to data PCM buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 800128c:	b570      	push	{r4, r5, r6, lr}
 800128e:	b0a0      	sub	sp, #128	; 0x80
 8001290:	460c      	mov	r4, r1
 8001292:	4669      	mov	r1, sp
 8001294:	1e82      	subs	r2, r0, #2
 8001296:	f100 037e 	add.w	r3, r0, #126	; 0x7e
 800129a:	4608      	mov	r0, r1
  uint32_t index = 0; 
  
  /* PDM Demux */
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
  {
    AppPDM[index] = HTONS(PDMBuf[index]);
 800129c:	f832 6f02 	ldrh.w	r6, [r2, #2]!
 80012a0:	0235      	lsls	r5, r6, #8
 80012a2:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 80012a6:	4293      	cmp	r3, r2
    AppPDM[index] = HTONS(PDMBuf[index]);
 80012a8:	f821 5b02 	strh.w	r5, [r1], #2
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 80012ac:	d1f6      	bne.n	800129c <BSP_AUDIO_IN_PDMToPCM+0x10>
  }
  
  for(index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++)
  {
    /* PDM to PCM filter */
	PDM_Filter((uint8_t*)&AppPDM[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <BSP_AUDIO_IN_PDMToPCM+0x44>)
 80012b0:	4621      	mov	r1, r4
 80012b2:	f004 fdd5 	bl	8005e60 <PDM_Filter>
  }
  /* Duplicate samples since a single microphone in mounted on STM32F4-Discovery */
  for(index = 0; index < PCM_OUT_SIZE; index++)
 80012b6:	2300      	movs	r3, #0
  {
    PCMBuf[(index<<1)+1] = PCMBuf[index<<1];
 80012b8:	1ca2      	adds	r2, r4, #2
 80012ba:	f834 1023 	ldrh.w	r1, [r4, r3, lsl #2]
 80012be:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  for(index = 0; index < PCM_OUT_SIZE; index++)
 80012c2:	3301      	adds	r3, #1
 80012c4:	2b10      	cmp	r3, #16
 80012c6:	d1f8      	bne.n	80012ba <BSP_AUDIO_IN_PDMToPCM+0x2e>
  }
  
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK; 
}
 80012c8:	2000      	movs	r0, #0
 80012ca:	b020      	add	sp, #128	; 0x80
 80012cc:	bd70      	pop	{r4, r5, r6, pc}
 80012ce:	bf00      	nop
 80012d0:	200008bc 	.word	0x200008bc

080012d4 <BSP_AUDIO_IN_ClockConfig>:
  * @param  Params : pointer on additional configuration parameters, can be NULL.   
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{
 80012d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80012d6:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef rccclkinit;

  /*Enable PLLI2S clock*/
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80012d8:	4668      	mov	r0, sp
 80012da:	f002 f953 	bl	8003584 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((AudioFreq & 0x7) == 0)
 80012de:	2301      	movs	r3, #1
 80012e0:	f014 0f07 	tst.w	r4, #7
  {
    /* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012e4:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = 192;
 80012e6:	bf0b      	itete	eq
 80012e8:	23c0      	moveq	r3, #192	; 0xc0
  {
    /* Other Frequency (11.025/22.500/44.100) */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 290 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 290/2 = 145 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 290;
 80012ea:	f44f 7391 	movne.w	r3, #290	; 0x122
    rccclkinit.PLLI2S.PLLI2SN = 192;
 80012ee:	9301      	streq	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SN = 290;
 80012f0:	9301      	strne	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = 6;
 80012f2:	bf0c      	ite	eq
 80012f4:	2306      	moveq	r3, #6
    rccclkinit.PLLI2S.PLLI2SR = 2;
 80012f6:	2302      	movne	r3, #2
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80012f8:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 2;
 80012fa:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80012fc:	f002 f8aa 	bl	8003454 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8001300:	b004      	add	sp, #16
 8001302:	bd10      	pop	{r4, pc}

08001304 <BSP_AUDIO_IN_MspInit>:
  * @brief  BSP AUDIO IN MSP Init.
  * @param  hi2s: I2S handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8001304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001308:	b08a      	sub	sp, #40	; 0x28
  static DMA_HandleTypeDef hdma_i2sRx;
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the I2S2 peripheral clock */
  I2S2_CLK_ENABLE();
 800130a:	4c3b      	ldr	r4, [pc, #236]	; (80013f8 <BSP_AUDIO_IN_MspInit+0xf4>)
 800130c:	2500      	movs	r5, #0
 800130e:	9501      	str	r5, [sp, #4]
 8001310:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001316:	6423      	str	r3, [r4, #64]	; 0x40
 8001318:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	9b01      	ldr	r3, [sp, #4]

  /* Enable I2S GPIO clocks */
  I2S2_SCK_GPIO_CLK_ENABLE();
 8001322:	9502      	str	r5, [sp, #8]
 8001324:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001326:	f043 0302 	orr.w	r3, r3, #2
 800132a:	6323      	str	r3, [r4, #48]	; 0x30
 800132c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	9b02      	ldr	r3, [sp, #8]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 8001336:	9503      	str	r5, [sp, #12]
 8001338:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6323      	str	r3, [r4, #48]	; 0x30
 8001340:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	9303      	str	r3, [sp, #12]
 8001348:	9b03      	ldr	r3, [sp, #12]
{
 800134a:	4606      	mov	r6, r0
  
  /* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;

  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 800134e:	482b      	ldr	r0, [pc, #172]	; (80013fc <BSP_AUDIO_IN_MspInit+0xf8>)
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001350:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 8001352:	f04f 0805 	mov.w	r8, #5
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001356:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
 8001358:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800135c:	e9cd 3506 	strd	r3, r5, [sp, #24]
  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
 8001360:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 8001362:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001366:	f000 fbcd 	bl	8001b04 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin       = I2S2_MOSI_PIN ;
 800136a:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 800136c:	4824      	ldr	r0, [pc, #144]	; (8001400 <BSP_AUDIO_IN_MspInit+0xfc>)
  GPIO_InitStruct.Pin       = I2S2_MOSI_PIN ;
 800136e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 8001370:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
 8001372:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 8001376:	f000 fbc5 	bl	8001b04 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  I2S2_DMAx_CLK_ENABLE();
 800137a:	9504      	str	r5, [sp, #16]
 800137c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    
  if(hi2s->Instance == I2S2)
 800137e:	6832      	ldr	r2, [r6, #0]
  I2S2_DMAx_CLK_ENABLE();
 8001380:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001384:	6323      	str	r3, [r4, #48]	; 0x30
 8001386:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138c:	9304      	str	r3, [sp, #16]
 800138e:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S2)
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <BSP_AUDIO_IN_MspInit+0x100>)
 8001392:	429a      	cmp	r2, r3
 8001394:	d124      	bne.n	80013e0 <BSP_AUDIO_IN_MspInit+0xdc>
  {
    /* Configure the hdma_i2sRx handle parameters */   
    hdma_i2sRx.Init.Channel             = I2S2_DMAx_CHANNEL;
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <BSP_AUDIO_IN_MspInit+0x104>)
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
    hdma_i2sRx.Init.MemDataAlignment    = I2S2_DMAx_MEM_DATA_SIZE;
 8001398:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800139c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013a0:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 80013a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
    
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 80013ac:	461c      	mov	r4, r3
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 80013ae:	e9c3 0220 	strd	r0, r2, [r3, #128]	; 0x80
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80013b2:	2203      	movs	r2, #3
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80013b4:	e9c3 2523 	strd	r2, r5, [r3, #140]	; 0x8c
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 80013b8:	4a14      	ldr	r2, [pc, #80]	; (800140c <BSP_AUDIO_IN_MspInit+0x108>)
 80013ba:	f844 2f64 	str.w	r2, [r4, #100]!
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 80013be:	63f4      	str	r4, [r6, #60]	; 0x3c
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sRx);
 80013c0:	4620      	mov	r0, r4
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80013c2:	e9c3 551a 	strd	r5, r5, [r3, #104]	; 0x68
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 80013c6:	e9c3 571c 	strd	r5, r7, [r3, #112]	; 0x70
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80013ca:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
 80013ce:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 80013d2:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
    HAL_DMA_DeInit(&hdma_i2sRx);
 80013d6:	f000 fa2f 	bl	8001838 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sRx);      
 80013da:	4620      	mov	r0, r4
 80013dc:	f000 f9ac 	bl	8001738 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	210f      	movs	r1, #15
 80013e4:	200e      	movs	r0, #14
 80013e6:	f000 f93b 	bl	8001660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ); 
 80013ea:	200e      	movs	r0, #14
 80013ec:	f000 f96a 	bl	80016c4 <HAL_NVIC_EnableIRQ>
}
 80013f0:	b00a      	add	sp, #40	; 0x28
 80013f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020400 	.word	0x40020400
 8001400:	40020800 	.word	0x40020800
 8001404:	40003800 	.word	0x40003800
 8001408:	2000068c 	.word	0x2000068c
 800140c:	40026058 	.word	0x40026058

08001410 <BSP_AUDIO_IN_Init>:
{
 8001410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001414:	4605      	mov	r5, r0
 8001416:	4691      	mov	r9, r2
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8001418:	4601      	mov	r1, r0
 800141a:	2200      	movs	r2, #0
 800141c:	482d      	ldr	r0, [pc, #180]	; (80014d4 <BSP_AUDIO_IN_Init+0xc4>)
 800141e:	4c2e      	ldr	r4, [pc, #184]	; (80014d8 <BSP_AUDIO_IN_Init+0xc8>)
 8001420:	4e2e      	ldr	r6, [pc, #184]	; (80014dc <BSP_AUDIO_IN_Init+0xcc>)
 8001422:	f7ff ff57 	bl	80012d4 <BSP_AUDIO_IN_ClockConfig>
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
  uint32_t index = 0;

  /* Enable CRC peripheral to unlock the PDM library */
  __HAL_RCC_CRC_CLK_ENABLE();
 8001426:	2700      	movs	r7, #0
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <BSP_AUDIO_IN_Init+0xd0>)
 800142a:	9701      	str	r7, [sp, #4]
 800142c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800142e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001432:	631a      	str	r2, [r3, #48]	; 0x30
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	9b01      	ldr	r3, [sp, #4]
  for(index = 0; index < ChnlNbrIn; index++)
  {
    /* Init PDM filters */
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 800143e:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <BSP_AUDIO_IN_Init+0xd4>)
 8001440:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));

    /* PDM lib config phase */
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8001444:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8001448:	fb0a 4a09 	mla	sl, sl, r9, r4
 800144c:	fbb5 f8f8 	udiv	r8, r5, r8
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8001450:	f04f 0b02 	mov.w	fp, #2
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8001454:	fa1f f888 	uxth.w	r8, r8
  for(index = 0; index < ChnlNbrIn; index++)
 8001458:	4554      	cmp	r4, sl
 800145a:	d123      	bne.n	80014a4 <BSP_AUDIO_IN_Init+0x94>
  hAudioInI2s.Instance = I2S2;
 800145c:	4c1d      	ldr	r4, [pc, #116]	; (80014d4 <BSP_AUDIO_IN_Init+0xc4>)
 800145e:	4e22      	ldr	r6, [pc, #136]	; (80014e8 <BSP_AUDIO_IN_Init+0xd8>)
 8001460:	6026      	str	r6, [r4, #0]
  if(HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET)
 8001462:	4620      	mov	r0, r4
 8001464:	f001 fc47 	bl	8002cf6 <HAL_I2S_GetState>
 8001468:	4601      	mov	r1, r0
 800146a:	b910      	cbnz	r0, 8001472 <BSP_AUDIO_IN_Init+0x62>
    BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff ff49 	bl	8001304 <BSP_AUDIO_IN_MspInit>
{
  /* Initialize the hAudioInI2s Instance parameter */
  hAudioInI2s.Instance          = I2S2;
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioInI2s);
 8001472:	69f3      	ldr	r3, [r6, #28]
  hAudioInI2s.Instance          = I2S2;
 8001474:	6026      	str	r6, [r4, #0]
  __HAL_I2S_DISABLE(&hAudioInI2s);
 8001476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  
  /* I2S2 peripheral configuration */
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 800147a:	006d      	lsls	r5, r5, #1
  __HAL_I2S_DISABLE(&hAudioInI2s);
 800147c:	61f3      	str	r3, [r6, #28]
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 800147e:	6165      	str	r5, [r4, #20]
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
  hAudioInI2s.Init.CPOL         = I2S_CPOL_HIGH;
 8001480:	2308      	movs	r3, #8
 8001482:	2500      	movs	r5, #0
 8001484:	e9c4 3506 	strd	r3, r5, [r4, #24]
  hAudioInI2s.Init.DataFormat   = I2S_DATAFORMAT_16B;
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 8001488:	f44f 7240 	mov.w	r2, #768	; 0x300
 800148c:	2320      	movs	r3, #32

  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 800148e:	4811      	ldr	r0, [pc, #68]	; (80014d4 <BSP_AUDIO_IN_Init+0xc4>)
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 8001490:	e9c4 5503 	strd	r5, r5, [r4, #12]
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 8001494:	e9c4 2301 	strd	r2, r3, [r4, #4]
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8001498:	f001 f890 	bl	80025bc <HAL_I2S_Init>
}
 800149c:	4628      	mov	r0, r5
 800149e:	b003      	add	sp, #12
 80014a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 80014a4:	6063      	str	r3, [r4, #4]
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 80014a6:	8027      	strh	r7, [r4, #0]
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 80014a8:	8067      	strh	r7, [r4, #2]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 80014aa:	f8a4 b00a 	strh.w	fp, [r4, #10]
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 80014ae:	f8a4 9008 	strh.w	r9, [r4, #8]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 80014b2:	4620      	mov	r0, r4
 80014b4:	f004 fb58 	bl	8005b68 <PDM_Filter_Init>
    PDM_FilterConfig[index].mic_gain = 24;
 80014b8:	2218      	movs	r2, #24
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 80014ba:	f8a6 8002 	strh.w	r8, [r6, #2]
    PDM_FilterConfig[index].mic_gain = 24;
 80014be:	80b2      	strh	r2, [r6, #4]
    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80014c0:	f8a6 b000 	strh.w	fp, [r6]
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 80014c4:	4631      	mov	r1, r6
 80014c6:	4620      	mov	r0, r4
 80014c8:	f004 fbd8 	bl	8005c7c <PDM_Filter_setConfig>
  for(index = 0; index < ChnlNbrIn; index++)
 80014cc:	344c      	adds	r4, #76	; 0x4c
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <BSP_AUDIO_IN_Init+0xd4>)
 80014d0:	3606      	adds	r6, #6
 80014d2:	e7c1      	b.n	8001458 <BSP_AUDIO_IN_Init+0x48>
 80014d4:	2000099c 	.word	0x2000099c
 80014d8:	200008bc 	.word	0x200008bc
 80014dc:	200008b0 	.word	0x200008b0
 80014e0:	40023800 	.word	0x40023800
 80014e4:	7e809d48 	.word	0x7e809d48
 80014e8:	40003800 	.word	0x40003800

080014ec <HAL_I2S_RxCpltCallback>:
{
 80014ec:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80014ee:	f002 fc9d 	bl	8003e2c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80014f2:	bd08      	pop	{r3, pc}

080014f4 <HAL_I2S_RxHalfCpltCallback>:
{
 80014f4:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80014f6:	f002 fc9f 	bl	8003e38 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80014fa:	bd08      	pop	{r3, pc}

080014fc <HAL_I2S_ErrorCallback>:
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 80014fc:	6802      	ldr	r2, [r0, #0]
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_I2S_ErrorCallback+0x20>)
 8001500:	429a      	cmp	r2, r3
{
 8001502:	b510      	push	{r4, lr}
 8001504:	4604      	mov	r4, r0
  if(hi2s->Instance == I2S3)
 8001506:	d101      	bne.n	800150c <HAL_I2S_ErrorCallback+0x10>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001508:	f002 fbb6 	bl	8003c78 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 800150c:	6822      	ldr	r2, [r4, #0]
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <HAL_I2S_ErrorCallback+0x24>)
 8001510:	429a      	cmp	r2, r3
 8001512:	d101      	bne.n	8001518 <HAL_I2S_ErrorCallback+0x1c>
  {
    BSP_AUDIO_IN_Error_Callback();
 8001514:	f002 fc96 	bl	8003e44 <BSP_AUDIO_IN_Error_Callback>
  }
}
 8001518:	bd10      	pop	{r4, pc}
 800151a:	bf00      	nop
 800151c:	40003c00 	.word	0x40003c00
 8001520:	40003800 	.word	0x40003800

08001524 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	490f      	ldr	r1, [pc, #60]	; (8001564 <SystemInit+0x40>)
 8001526:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800152a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <SystemInit+0x44>)
 8001534:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001536:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001538:	f042 0201 	orr.w	r2, r2, #1
 800153c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800153e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001546:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800154a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <SystemInit+0x48>)
 800154e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001556:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001558:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800155a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800155e:	608b      	str	r3, [r1, #8]
#endif
}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00
 8001568:	40023800 	.word	0x40023800
 800156c:	24003010 	.word	0x24003010

08001570 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001570:	4770      	bx	lr
	...

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <HAL_InitTick+0x3c>)
 8001578:	4e0e      	ldr	r6, [pc, #56]	; (80015b4 <HAL_InitTick+0x40>)
{
 800157a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001580:	7830      	ldrb	r0, [r6, #0]
 8001582:	fbb3 f3f0 	udiv	r3, r3, r0
 8001586:	6810      	ldr	r0, [r2, #0]
 8001588:	fbb0 f0f3 	udiv	r0, r0, r3
 800158c:	f000 f8a8 	bl	80016e0 <HAL_SYSTICK_Config>
 8001590:	4604      	mov	r4, r0
 8001592:	b950      	cbnz	r0, 80015aa <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001594:	2d0f      	cmp	r5, #15
 8001596:	d808      	bhi.n	80015aa <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001598:	4602      	mov	r2, r0
 800159a:	4629      	mov	r1, r5
 800159c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015a0:	f000 f85e 	bl	8001660 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a4:	6075      	str	r5, [r6, #4]
 80015a6:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80015a8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80015aa:	2001      	movs	r0, #1
 80015ac:	e7fc      	b.n	80015a8 <HAL_InitTick+0x34>
 80015ae:	bf00      	nop
 80015b0:	20000084 	.word	0x20000084
 80015b4:	20000088 	.word	0x20000088

080015b8 <HAL_Init>:
{
 80015b8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_Init+0x28>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015c2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015ca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f835 	bl	800163c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	200f      	movs	r0, #15
 80015d4:	f7ff ffce 	bl	8001574 <HAL_InitTick>
  HAL_MspInit();
 80015d8:	f7ff ffca 	bl	8001570 <HAL_MspInit>
}
 80015dc:	2000      	movs	r0, #0
 80015de:	bd08      	pop	{r3, pc}
 80015e0:	40023c00 	.word	0x40023c00

080015e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015e4:	4a03      	ldr	r2, [pc, #12]	; (80015f4 <HAL_IncTick+0x10>)
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <HAL_IncTick+0x14>)
 80015e8:	6811      	ldr	r1, [r2, #0]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	440b      	add	r3, r1
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	200009e4 	.word	0x200009e4
 80015f8:	20000088 	.word	0x20000088

080015fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015fc:	4b01      	ldr	r3, [pc, #4]	; (8001604 <HAL_GetTick+0x8>)
 80015fe:	6818      	ldr	r0, [r3, #0]
}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	200009e4 	.word	0x200009e4

08001608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001608:	b538      	push	{r3, r4, r5, lr}
 800160a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800160c:	f7ff fff6 	bl	80015fc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001610:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001612:	bf1c      	itt	ne
 8001614:	4b05      	ldrne	r3, [pc, #20]	; (800162c <HAL_Delay+0x24>)
 8001616:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001618:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800161a:	bf18      	it	ne
 800161c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800161e:	f7ff ffed 	bl	80015fc <HAL_GetTick>
 8001622:	1b43      	subs	r3, r0, r5
 8001624:	42a3      	cmp	r3, r4
 8001626:	d3fa      	bcc.n	800161e <HAL_Delay+0x16>
  {
  }
}
 8001628:	bd38      	pop	{r3, r4, r5, pc}
 800162a:	bf00      	nop
 800162c:	20000088 	.word	0x20000088

08001630 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8001630:	4b01      	ldr	r3, [pc, #4]	; (8001638 <HAL_GetREVID+0x8>)
 8001632:	6818      	ldr	r0, [r3, #0]
}
 8001634:	0c00      	lsrs	r0, r0, #16
 8001636:	4770      	bx	lr
 8001638:	e0042000 	.word	0xe0042000

0800163c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800163c:	4907      	ldr	r1, [pc, #28]	; (800165c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800163e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001640:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001644:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001648:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800164e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001658:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001662:	b530      	push	{r4, r5, lr}
 8001664:	68dc      	ldr	r4, [r3, #12]
 8001666:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	2d04      	cmp	r5, #4
 8001672:	bf28      	it	cs
 8001674:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167c:	bf8c      	ite	hi
 800167e:	3c03      	subhi	r4, #3
 8001680:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001682:	fa03 f505 	lsl.w	r5, r3, r5
 8001686:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800168a:	40a3      	lsls	r3, r4
 800168c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001692:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	bfac      	ite	ge
 800169a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169e:	4a08      	ldrlt	r2, [pc, #32]	; (80016c0 <HAL_NVIC_SetPriority+0x60>)
 80016a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80016a4:	bfb8      	it	lt
 80016a6:	f000 000f 	andlt.w	r0, r0, #15
 80016aa:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	bfaa      	itet	ge
 80016ae:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80016b8:	bd30      	pop	{r4, r5, pc}
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00
 80016c0:	e000ed14 	.word	0xe000ed14

080016c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80016c4:	2800      	cmp	r0, #0
 80016c6:	db08      	blt.n	80016da <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c8:	0942      	lsrs	r2, r0, #5
 80016ca:	2301      	movs	r3, #1
 80016cc:	f000 001f 	and.w	r0, r0, #31
 80016d0:	fa03 f000 	lsl.w	r0, r3, r0
 80016d4:	4b01      	ldr	r3, [pc, #4]	; (80016dc <HAL_NVIC_EnableIRQ+0x18>)
 80016d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100

080016e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	3801      	subs	r0, #1
 80016e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80016e6:	d20a      	bcs.n	80016fe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ec:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	21f0      	movs	r1, #240	; 0xf0
 80016f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e010 	.word	0xe000e010
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800170c:	6803      	ldr	r3, [r0, #0]
{
 800170e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001710:	4c08      	ldr	r4, [pc, #32]	; (8001734 <DMA_CalcBaseAndBitshift+0x28>)
{
 8001712:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001714:	b2d9      	uxtb	r1, r3
 8001716:	3910      	subs	r1, #16
 8001718:	2018      	movs	r0, #24
 800171a:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800171e:	5c20      	ldrb	r0, [r4, r0]
 8001720:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001722:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001726:	f020 0003 	bic.w	r0, r0, #3
 800172a:	295f      	cmp	r1, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800172c:	bf88      	it	hi
 800172e:	3004      	addhi	r0, #4
 8001730:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001732:	bd10      	pop	{r4, pc}
 8001734:	080068e8 	.word	0x080068e8

08001738 <HAL_DMA_Init>:
{
 8001738:	b570      	push	{r4, r5, r6, lr}
 800173a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff ff5e 	bl	80015fc <HAL_GetTick>
 8001740:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001742:	2c00      	cmp	r4, #0
 8001744:	d073      	beq.n	800182e <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001746:	2302      	movs	r3, #2
 8001748:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800174c:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 800174e:	2300      	movs	r3, #0
 8001750:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001754:	6813      	ldr	r3, [r2, #0]
 8001756:	f023 0301 	bic.w	r3, r3, #1
 800175a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800175c:	6821      	ldr	r1, [r4, #0]
 800175e:	680b      	ldr	r3, [r1, #0]
 8001760:	07d8      	lsls	r0, r3, #31
 8001762:	d42f      	bmi.n	80017c4 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8001764:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001766:	4d33      	ldr	r5, [pc, #204]	; (8001834 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001768:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800176a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800176c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001770:	4313      	orrs	r3, r2
 8001772:	68e2      	ldr	r2, [r4, #12]
 8001774:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001776:	6922      	ldr	r2, [r4, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	6962      	ldr	r2, [r4, #20]
 800177c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800177e:	69e2      	ldr	r2, [r4, #28]
 8001780:	4303      	orrs	r3, r0
 8001782:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001784:	6a22      	ldr	r2, [r4, #32]
 8001786:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001788:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800178a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800178c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001790:	bf02      	ittt	eq
 8001792:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8001796:	4335      	orreq	r5, r6
 8001798:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800179a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800179c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800179e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017a0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80017a4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017a8:	d133      	bne.n	8001812 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 80017aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017ac:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80017ae:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017b0:	b37d      	cbz	r5, 8001812 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017b2:	b990      	cbnz	r0, 80017da <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d021      	beq.n	80017fc <HAL_DMA_Init+0xc4>
 80017b8:	f032 0202 	bics.w	r2, r2, #2
 80017bc:	d129      	bne.n	8001812 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017be:	01ea      	lsls	r2, r5, #7
 80017c0:	d527      	bpl.n	8001812 <HAL_DMA_Init+0xda>
 80017c2:	e01e      	b.n	8001802 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017c4:	f7ff ff1a 	bl	80015fc <HAL_GetTick>
 80017c8:	1b40      	subs	r0, r0, r5
 80017ca:	2805      	cmp	r0, #5
 80017cc:	d9c6      	bls.n	800175c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017ce:	2320      	movs	r3, #32
 80017d0:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017d2:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80017d4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80017d8:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017da:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80017de:	d114      	bne.n	800180a <HAL_DMA_Init+0xd2>
    switch (tmp)
 80017e0:	2a03      	cmp	r2, #3
 80017e2:	d816      	bhi.n	8001812 <HAL_DMA_Init+0xda>
 80017e4:	a001      	add	r0, pc, #4	; (adr r0, 80017ec <HAL_DMA_Init+0xb4>)
 80017e6:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	08001803 	.word	0x08001803
 80017f0:	080017bf 	.word	0x080017bf
 80017f4:	08001803 	.word	0x08001803
 80017f8:	080017fd 	.word	0x080017fd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017fc:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001800:	d107      	bne.n	8001812 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001802:	2340      	movs	r3, #64	; 0x40
 8001804:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001806:	2001      	movs	r0, #1
 8001808:	e7e4      	b.n	80017d4 <HAL_DMA_Init+0x9c>
    switch (tmp)
 800180a:	2a02      	cmp	r2, #2
 800180c:	d9f9      	bls.n	8001802 <HAL_DMA_Init+0xca>
 800180e:	2a03      	cmp	r2, #3
 8001810:	d0d5      	beq.n	80017be <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8001812:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001814:	4620      	mov	r0, r4
 8001816:	f7ff ff79 	bl	800170c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800181a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800181c:	233f      	movs	r3, #63	; 0x3f
 800181e:	4093      	lsls	r3, r2
 8001820:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001822:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001824:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001826:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001828:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800182c:	e7d4      	b.n	80017d8 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800182e:	2001      	movs	r0, #1
 8001830:	e7d2      	b.n	80017d8 <HAL_DMA_Init+0xa0>
 8001832:	bf00      	nop
 8001834:	f010803f 	.word	0xf010803f

08001838 <HAL_DMA_DeInit>:
{
 8001838:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800183a:	4605      	mov	r5, r0
 800183c:	b320      	cbz	r0, 8001888 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800183e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001842:	2b02      	cmp	r3, #2
 8001844:	b2dc      	uxtb	r4, r3
 8001846:	d01d      	beq.n	8001884 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8001848:	6803      	ldr	r3, [r0, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8001850:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8001852:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8001854:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8001856:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001858:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800185a:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 800185c:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800185e:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8001860:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001862:	f7ff ff53 	bl	800170c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001866:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001868:	233f      	movs	r3, #63	; 0x3f
 800186a:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 800186c:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8001870:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8001874:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001878:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800187a:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 800187c:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001880:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 8001884:	4620      	mov	r0, r4
 8001886:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001888:	2401      	movs	r4, #1
 800188a:	e7fb      	b.n	8001884 <HAL_DMA_DeInit+0x4c>

0800188c <HAL_DMA_Start_IT>:
{
 800188c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800188e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001892:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001894:	2c01      	cmp	r4, #1
 8001896:	d031      	beq.n	80018fc <HAL_DMA_Start_IT+0x70>
 8001898:	2401      	movs	r4, #1
 800189a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800189e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80018a2:	2c01      	cmp	r4, #1
 80018a4:	f04f 0500 	mov.w	r5, #0
 80018a8:	f04f 0402 	mov.w	r4, #2
 80018ac:	d124      	bne.n	80018f8 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80018ae:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018b2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b4:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018b6:	6825      	ldr	r5, [r4, #0]
 80018b8:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80018bc:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80018be:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018c0:	6883      	ldr	r3, [r0, #8]
 80018c2:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80018c4:	bf0e      	itee	eq
 80018c6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80018c8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80018ca:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018cc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80018ce:	bf08      	it	eq
 80018d0:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018d2:	233f      	movs	r3, #63	; 0x3f
 80018d4:	4093      	lsls	r3, r2
 80018d6:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	f043 0316 	orr.w	r3, r3, #22
 80018de:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80018e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018e2:	b11b      	cbz	r3, 80018ec <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018f4:	2000      	movs	r0, #0
}
 80018f6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80018f8:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80018fc:	2002      	movs	r0, #2
 80018fe:	e7fa      	b.n	80018f6 <HAL_DMA_Start_IT+0x6a>

08001900 <HAL_DMA_Abort>:
{
 8001900:	b570      	push	{r4, r5, r6, lr}
 8001902:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001904:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8001906:	f7ff fe79 	bl	80015fc <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800190a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800190e:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8001910:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001912:	d006      	beq.n	8001922 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001918:	2300      	movs	r3, #0
 800191a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800191e:	2001      	movs	r0, #1
}
 8001920:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	f022 0216 	bic.w	r2, r2, #22
 800192a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001932:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001934:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001936:	b90a      	cbnz	r2, 800193c <HAL_DMA_Abort+0x3c>
 8001938:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800193a:	b11a      	cbz	r2, 8001944 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	f022 0208 	bic.w	r2, r2, #8
 8001942:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800194c:	6823      	ldr	r3, [r4, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f013 0301 	ands.w	r3, r3, #1
 8001954:	d10a      	bne.n	800196c <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001956:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001958:	223f      	movs	r2, #63	; 0x3f
 800195a:	408a      	lsls	r2, r1
 800195c:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800195e:	2201      	movs	r2, #1
 8001960:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001964:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8001968:	4618      	mov	r0, r3
 800196a:	e7d9      	b.n	8001920 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800196c:	f7ff fe46 	bl	80015fc <HAL_GetTick>
 8001970:	1b40      	subs	r0, r0, r5
 8001972:	2805      	cmp	r0, #5
 8001974:	d9ea      	bls.n	800194c <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001976:	2320      	movs	r3, #32
 8001978:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800197a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 800197c:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800197e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001982:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001986:	e7cb      	b.n	8001920 <HAL_DMA_Abort+0x20>

08001988 <HAL_DMA_IRQHandler>:
{
 8001988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800198e:	4b5c      	ldr	r3, [pc, #368]	; (8001b00 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001990:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001992:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001994:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001996:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001998:	2208      	movs	r2, #8
 800199a:	409a      	lsls	r2, r3
 800199c:	4232      	tst	r2, r6
{
 800199e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019a0:	d00c      	beq.n	80019bc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019a2:	6801      	ldr	r1, [r0, #0]
 80019a4:	6808      	ldr	r0, [r1, #0]
 80019a6:	0740      	lsls	r0, r0, #29
 80019a8:	d508      	bpl.n	80019bc <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019aa:	6808      	ldr	r0, [r1, #0]
 80019ac:	f020 0004 	bic.w	r0, r0, #4
 80019b0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019b2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019bc:	2201      	movs	r2, #1
 80019be:	409a      	lsls	r2, r3
 80019c0:	4232      	tst	r2, r6
 80019c2:	d008      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019c4:	6821      	ldr	r1, [r4, #0]
 80019c6:	6949      	ldr	r1, [r1, #20]
 80019c8:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019ca:	bf41      	itttt	mi
 80019cc:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019ce:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80019d0:	f042 0202 	orrmi.w	r2, r2, #2
 80019d4:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019d6:	2204      	movs	r2, #4
 80019d8:	409a      	lsls	r2, r3
 80019da:	4232      	tst	r2, r6
 80019dc:	d008      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019de:	6821      	ldr	r1, [r4, #0]
 80019e0:	6809      	ldr	r1, [r1, #0]
 80019e2:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019e4:	bf41      	itttt	mi
 80019e6:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019e8:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80019ea:	f042 0204 	orrmi.w	r2, r2, #4
 80019ee:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019f0:	2210      	movs	r2, #16
 80019f2:	409a      	lsls	r2, r3
 80019f4:	4232      	tst	r2, r6
 80019f6:	d010      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	6819      	ldr	r1, [r3, #0]
 80019fc:	0709      	lsls	r1, r1, #28
 80019fe:	d50c      	bpl.n	8001a1a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a00:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	0350      	lsls	r0, r2, #13
 8001a06:	d537      	bpl.n	8001a78 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	0319      	lsls	r1, r3, #12
 8001a0c:	d401      	bmi.n	8001a12 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001a0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a10:	e000      	b.n	8001a14 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001a14:	b10b      	cbz	r3, 8001a1a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001a16:	4620      	mov	r0, r4
 8001a18:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a1a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	408a      	lsls	r2, r1
 8001a20:	4232      	tst	r2, r6
 8001a22:	d03a      	beq.n	8001a9a <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	06c6      	lsls	r6, r0, #27
 8001a2a:	d536      	bpl.n	8001a9a <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a2c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a2e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001a32:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a34:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a36:	d127      	bne.n	8001a88 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a38:	f022 0216 	bic.w	r2, r2, #22
 8001a3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a44:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a48:	b90a      	cbnz	r2, 8001a4e <HAL_DMA_IRQHandler+0xc6>
 8001a4a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001a4c:	b11a      	cbz	r2, 8001a56 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	f022 0208 	bic.w	r2, r2, #8
 8001a54:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a56:	233f      	movs	r3, #63	; 0x3f
 8001a58:	408b      	lsls	r3, r1
 8001a5a:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001a62:	2300      	movs	r3, #0
 8001a64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001a68:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d045      	beq.n	8001afa <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8001a6e:	4620      	mov	r0, r4
}
 8001a70:	b003      	add	sp, #12
 8001a72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001a76:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a7c:	bf5e      	ittt	pl
 8001a7e:	681a      	ldrpl	r2, [r3, #0]
 8001a80:	f022 0208 	bicpl.w	r2, r2, #8
 8001a84:	601a      	strpl	r2, [r3, #0]
 8001a86:	e7c2      	b.n	8001a0e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a88:	0350      	lsls	r0, r2, #13
 8001a8a:	d527      	bpl.n	8001adc <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	0319      	lsls	r1, r3, #12
 8001a90:	d431      	bmi.n	8001af6 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8001a92:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001a94:	b10b      	cbz	r3, 8001a9a <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8001a96:	4620      	mov	r0, r4
 8001a98:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a9c:	b36b      	cbz	r3, 8001afa <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001aa0:	07da      	lsls	r2, r3, #31
 8001aa2:	d519      	bpl.n	8001ad8 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8001aa4:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001aa6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001aaa:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aae:	2305      	movs	r3, #5
 8001ab0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001ab4:	6813      	ldr	r3, [r2, #0]
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001abc:	9b01      	ldr	r3, [sp, #4]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	42bb      	cmp	r3, r7
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	d802      	bhi.n	8001acc <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ac6:	6813      	ldr	r3, [r2, #0]
 8001ac8:	07db      	lsls	r3, r3, #31
 8001aca:	d4f7      	bmi.n	8001abc <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001ad8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ada:	e7c6      	b.n	8001a6a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001ae2:	d108      	bne.n	8001af6 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ae4:	6819      	ldr	r1, [r3, #0]
 8001ae6:	f021 0110 	bic.w	r1, r1, #16
 8001aea:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001af2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001af6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001af8:	e7cc      	b.n	8001a94 <HAL_DMA_IRQHandler+0x10c>
}
 8001afa:	b003      	add	sp, #12
 8001afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000084 	.word	0x20000084

08001b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b08:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8001cb4 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b0c:	4a67      	ldr	r2, [pc, #412]	; (8001cac <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b10:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8001b12:	2401      	movs	r4, #1
 8001b14:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b16:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001b1a:	43ac      	bics	r4, r5
 8001b1c:	f040 80b1 	bne.w	8001c82 <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b20:	684d      	ldr	r5, [r1, #4]
 8001b22:	f005 0403 	and.w	r4, r5, #3
 8001b26:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001b2a:	2603      	movs	r6, #3
 8001b2c:	1e67      	subs	r7, r4, #1
 8001b2e:	fa06 f608 	lsl.w	r6, r6, r8
 8001b32:	2f01      	cmp	r7, #1
 8001b34:	ea6f 0606 	mvn.w	r6, r6
 8001b38:	d834      	bhi.n	8001ba4 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001b3a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b3c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b40:	68cf      	ldr	r7, [r1, #12]
 8001b42:	fa07 f708 	lsl.w	r7, r7, r8
 8001b46:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001b4a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b4c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b4e:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b52:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001b56:	409f      	lsls	r7, r3
 8001b58:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001b5c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001b5e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b60:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b64:	688f      	ldr	r7, [r1, #8]
 8001b66:	fa07 f708 	lsl.w	r7, r7, r8
 8001b6a:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001b70:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b72:	d119      	bne.n	8001ba8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001b74:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001b78:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001b80:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b84:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001b88:	f04f 0e0f 	mov.w	lr, #15
 8001b8c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001b90:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b94:	690f      	ldr	r7, [r1, #16]
 8001b96:	fa07 f70b 	lsl.w	r7, r7, fp
 8001b9a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001b9e:	f8ca 7020 	str.w	r7, [sl, #32]
 8001ba2:	e001      	b.n	8001ba8 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba4:	2c03      	cmp	r4, #3
 8001ba6:	d1da      	bne.n	8001b5e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001ba8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001baa:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bae:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb0:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb2:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001bb6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb8:	d063      	beq.n	8001c82 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	f04f 0a00 	mov.w	sl, #0
 8001bbe:	f8cd a004 	str.w	sl, [sp, #4]
 8001bc2:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bc6:	4c3a      	ldr	r4, [pc, #232]	; (8001cb0 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc8:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001bcc:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001bd0:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001bd4:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001bd8:	9601      	str	r6, [sp, #4]
 8001bda:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001bdc:	f023 0603 	bic.w	r6, r3, #3
 8001be0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001be4:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be8:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001bec:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001bf4:	270f      	movs	r7, #15
 8001bf6:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfa:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bfc:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c00:	d046      	beq.n	8001c90 <HAL_GPIO_Init+0x18c>
 8001c02:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c06:	42a0      	cmp	r0, r4
 8001c08:	d044      	beq.n	8001c94 <HAL_GPIO_Init+0x190>
 8001c0a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c0e:	42a0      	cmp	r0, r4
 8001c10:	d042      	beq.n	8001c98 <HAL_GPIO_Init+0x194>
 8001c12:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c16:	42a0      	cmp	r0, r4
 8001c18:	d040      	beq.n	8001c9c <HAL_GPIO_Init+0x198>
 8001c1a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c1e:	42a0      	cmp	r0, r4
 8001c20:	d03e      	beq.n	8001ca0 <HAL_GPIO_Init+0x19c>
 8001c22:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c26:	42a0      	cmp	r0, r4
 8001c28:	d03c      	beq.n	8001ca4 <HAL_GPIO_Init+0x1a0>
 8001c2a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c2e:	42a0      	cmp	r0, r4
 8001c30:	d03a      	beq.n	8001ca8 <HAL_GPIO_Init+0x1a4>
 8001c32:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c36:	42a0      	cmp	r0, r4
 8001c38:	bf0c      	ite	eq
 8001c3a:	2407      	moveq	r4, #7
 8001c3c:	2408      	movne	r4, #8
 8001c3e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001c42:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c44:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8001c46:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c4c:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001c4e:	bf54      	ite	pl
 8001c50:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001c52:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001c56:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8001c58:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5a:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	bf54      	ite	pl
 8001c5e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001c60:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001c64:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c66:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c68:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001c6a:	bf54      	ite	pl
 8001c6c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001c6e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001c72:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001c74:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c76:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001c78:	bf54      	ite	pl
 8001c7a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001c7c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001c80:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	3301      	adds	r3, #1
 8001c84:	2b10      	cmp	r3, #16
 8001c86:	f47f af43 	bne.w	8001b10 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001c8a:	b003      	add	sp, #12
 8001c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c90:	4654      	mov	r4, sl
 8001c92:	e7d4      	b.n	8001c3e <HAL_GPIO_Init+0x13a>
 8001c94:	2401      	movs	r4, #1
 8001c96:	e7d2      	b.n	8001c3e <HAL_GPIO_Init+0x13a>
 8001c98:	2402      	movs	r4, #2
 8001c9a:	e7d0      	b.n	8001c3e <HAL_GPIO_Init+0x13a>
 8001c9c:	2403      	movs	r4, #3
 8001c9e:	e7ce      	b.n	8001c3e <HAL_GPIO_Init+0x13a>
 8001ca0:	2404      	movs	r4, #4
 8001ca2:	e7cc      	b.n	8001c3e <HAL_GPIO_Init+0x13a>
 8001ca4:	2405      	movs	r4, #5
 8001ca6:	e7ca      	b.n	8001c3e <HAL_GPIO_Init+0x13a>
 8001ca8:	2406      	movs	r4, #6
 8001caa:	e7c8      	b.n	8001c3e <HAL_GPIO_Init+0x13a>
 8001cac:	40013c00 	.word	0x40013c00
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cb8:	6903      	ldr	r3, [r0, #16]
 8001cba:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001cbc:	bf14      	ite	ne
 8001cbe:	2001      	movne	r0, #1
 8001cc0:	2000      	moveq	r0, #0
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc4:	b10a      	cbz	r2, 8001cca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cc6:	6181      	str	r1, [r0, #24]
  }
}
 8001cc8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cca:	0409      	lsls	r1, r1, #16
 8001ccc:	e7fb      	b.n	8001cc6 <HAL_GPIO_WritePin+0x2>

08001cce <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cce:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cd0:	ea01 0203 	and.w	r2, r1, r3
 8001cd4:	ea21 0103 	bic.w	r1, r1, r3
 8001cd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001cdc:	6181      	str	r1, [r0, #24]
}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ce0:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001ce2:	6951      	ldr	r1, [r2, #20]
 8001ce4:	4201      	tst	r1, r0
{
 8001ce6:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ce8:	d002      	beq.n	8001cf0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cea:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cec:	f002 f8ac 	bl	8003e48 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cf0:	bd08      	pop	{r3, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40013c00 	.word	0x40013c00

08001cf8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cf8:	6801      	ldr	r1, [r0, #0]
 8001cfa:	694b      	ldr	r3, [r1, #20]
 8001cfc:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	d010      	beq.n	8001d28 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d06:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001d0a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d0c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0e:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d10:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d14:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d18:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d1a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d1e:	f043 0304 	orr.w	r3, r3, #4
 8001d22:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001d24:	2001      	movs	r0, #1
 8001d26:	4770      	bx	lr
  }
  return HAL_OK;
 8001d28:	4618      	mov	r0, r3
}
 8001d2a:	4770      	bx	lr

08001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d30:	4604      	mov	r4, r0
 8001d32:	460f      	mov	r7, r1
 8001d34:	4616      	mov	r6, r2
 8001d36:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d38:	6825      	ldr	r5, [r4, #0]
 8001d3a:	6968      	ldr	r0, [r5, #20]
 8001d3c:	ea27 0000 	bic.w	r0, r7, r0
 8001d40:	b280      	uxth	r0, r0
 8001d42:	b1b8      	cbz	r0, 8001d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d44:	696b      	ldr	r3, [r5, #20]
 8001d46:	055a      	lsls	r2, r3, #21
 8001d48:	d516      	bpl.n	8001d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d4a:	682b      	ldr	r3, [r5, #0]
 8001d4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d50:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d52:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001d56:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d58:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d5e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d68:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d6c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001d6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001d72:	2001      	movs	r0, #1
}
 8001d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001d78:	1c73      	adds	r3, r6, #1
 8001d7a:	d0de      	beq.n	8001d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d7c:	f7ff fc3e 	bl	80015fc <HAL_GetTick>
 8001d80:	eba0 0008 	sub.w	r0, r0, r8
 8001d84:	42b0      	cmp	r0, r6
 8001d86:	d801      	bhi.n	8001d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8001d88:	2e00      	cmp	r6, #0
 8001d8a:	d1d5      	bne.n	8001d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8c:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d8e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d90:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d92:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d96:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d9c:	f042 0220 	orr.w	r2, r2, #32
 8001da0:	e7e4      	b.n	8001d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08001da2 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001da2:	b570      	push	{r4, r5, r6, lr}
 8001da4:	4604      	mov	r4, r0
 8001da6:	460d      	mov	r5, r1
 8001da8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	075b      	lsls	r3, r3, #29
 8001db0:	d501      	bpl.n	8001db6 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001db2:	2000      	movs	r0, #0
}
 8001db4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001db6:	4620      	mov	r0, r4
 8001db8:	f7ff ff9e 	bl	8001cf8 <I2C_IsAcknowledgeFailed>
 8001dbc:	b9a8      	cbnz	r0, 8001dea <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001dbe:	1c6a      	adds	r2, r5, #1
 8001dc0:	d0f3      	beq.n	8001daa <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc2:	f7ff fc1b 	bl	80015fc <HAL_GetTick>
 8001dc6:	1b80      	subs	r0, r0, r6
 8001dc8:	42a8      	cmp	r0, r5
 8001dca:	d801      	bhi.n	8001dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001dcc:	2d00      	cmp	r5, #0
 8001dce:	d1ec      	bne.n	8001daa <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001dd0:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001dd2:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001dd4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001dd6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dda:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dde:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001de0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001de4:	f042 0220 	orr.w	r2, r2, #32
 8001de8:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001dea:	2001      	movs	r0, #1
 8001dec:	e7e2      	b.n	8001db4 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08001dee <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001dee:	b570      	push	{r4, r5, r6, lr}
 8001df0:	4604      	mov	r4, r0
 8001df2:	460d      	mov	r5, r1
 8001df4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001df6:	6821      	ldr	r1, [r4, #0]
 8001df8:	694b      	ldr	r3, [r1, #20]
 8001dfa:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001dfe:	d001      	beq.n	8001e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001e00:	2000      	movs	r0, #0
 8001e02:	e010      	b.n	8001e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e04:	694a      	ldr	r2, [r1, #20]
 8001e06:	06d2      	lsls	r2, r2, #27
 8001e08:	d50e      	bpl.n	8001e28 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e0a:	f06f 0210 	mvn.w	r2, #16
 8001e0e:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e10:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e12:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e14:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001e1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e1e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001e20:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001e24:	2001      	movs	r0, #1
}
 8001e26:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e28:	f7ff fbe8 	bl	80015fc <HAL_GetTick>
 8001e2c:	1b80      	subs	r0, r0, r6
 8001e2e:	42a8      	cmp	r0, r5
 8001e30:	d801      	bhi.n	8001e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8001e32:	2d00      	cmp	r5, #0
 8001e34:	d1df      	bne.n	8001df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e36:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e38:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e3a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e3c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001e46:	f042 0220 	orr.w	r2, r2, #32
 8001e4a:	e7e8      	b.n	8001e1e <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08001e4c <I2C_WaitOnFlagUntilTimeout>:
{
 8001e4c:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8001e50:	4606      	mov	r6, r0
 8001e52:	460f      	mov	r7, r1
 8001e54:	4691      	mov	r9, r2
 8001e56:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8001e5c:	6833      	ldr	r3, [r6, #0]
 8001e5e:	f1ba 0f01 	cmp.w	sl, #1
 8001e62:	bf0c      	ite	eq
 8001e64:	695c      	ldreq	r4, [r3, #20]
 8001e66:	699c      	ldrne	r4, [r3, #24]
 8001e68:	ea27 0404 	bic.w	r4, r7, r4
 8001e6c:	b2a4      	uxth	r4, r4
 8001e6e:	fab4 f484 	clz	r4, r4
 8001e72:	0964      	lsrs	r4, r4, #5
 8001e74:	45a1      	cmp	r9, r4
 8001e76:	d001      	beq.n	8001e7c <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001e78:	2000      	movs	r0, #0
 8001e7a:	e017      	b.n	8001eac <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8001e7c:	1c6a      	adds	r2, r5, #1
 8001e7e:	d0ee      	beq.n	8001e5e <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e80:	f7ff fbbc 	bl	80015fc <HAL_GetTick>
 8001e84:	9b08      	ldr	r3, [sp, #32]
 8001e86:	1ac0      	subs	r0, r0, r3
 8001e88:	42a8      	cmp	r0, r5
 8001e8a:	d801      	bhi.n	8001e90 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001e8c:	2d00      	cmp	r5, #0
 8001e8e:	d1e5      	bne.n	8001e5c <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e90:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e92:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e94:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e96:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e9a:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e9e:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001ea0:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ea4:	f042 0220 	orr.w	r2, r2, #32
 8001ea8:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001eaa:	2001      	movs	r0, #1
}
 8001eac:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08001eb0 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	460d      	mov	r5, r1
 8001eb6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	061b      	lsls	r3, r3, #24
 8001ebe:	d501      	bpl.n	8001ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001ec0:	2000      	movs	r0, #0
}
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f7ff ff17 	bl	8001cf8 <I2C_IsAcknowledgeFailed>
 8001eca:	b9a8      	cbnz	r0, 8001ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001ecc:	1c6a      	adds	r2, r5, #1
 8001ece:	d0f3      	beq.n	8001eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed0:	f7ff fb94 	bl	80015fc <HAL_GetTick>
 8001ed4:	1b80      	subs	r0, r0, r6
 8001ed6:	42a8      	cmp	r0, r5
 8001ed8:	d801      	bhi.n	8001ede <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001eda:	2d00      	cmp	r5, #0
 8001edc:	d1ec      	bne.n	8001eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ede:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ee0:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ee2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ee4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ee8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001eec:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001eee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ef2:	f042 0220 	orr.w	r2, r2, #32
 8001ef6:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001ef8:	2001      	movs	r0, #1
 8001efa:	e7e2      	b.n	8001ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08001efc <I2C_RequestMemoryWrite>:
{
 8001efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f00:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f02:	6802      	ldr	r2, [r0, #0]
{
 8001f04:	b085      	sub	sp, #20
 8001f06:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8001f0a:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f0c:	6813      	ldr	r3, [r2, #0]
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f12:	6013      	str	r3, [r2, #0]
{
 8001f14:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f16:	463b      	mov	r3, r7
 8001f18:	f8cd 8000 	str.w	r8, [sp]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001f22:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f24:	f7ff ff92 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	b138      	cbz	r0, 8001f3c <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	05db      	lsls	r3, r3, #23
 8001f30:	d502      	bpl.n	8001f38 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f36:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001f38:	2003      	movs	r0, #3
 8001f3a:	e00a      	b.n	8001f52 <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f3c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8001f40:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f42:	4919      	ldr	r1, [pc, #100]	; (8001fa8 <I2C_RequestMemoryWrite+0xac>)
 8001f44:	4643      	mov	r3, r8
 8001f46:	463a      	mov	r2, r7
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f7ff feef 	bl	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f4e:	b118      	cbz	r0, 8001f58 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8001f50:	2001      	movs	r0, #1
}
 8001f52:	b005      	add	sp, #20
 8001f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	9003      	str	r0, [sp, #12]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	9203      	str	r2, [sp, #12]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f64:	4642      	mov	r2, r8
 8001f66:	4639      	mov	r1, r7
 8001f68:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f6a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f6c:	f7ff ffa0 	bl	8001eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f70:	b140      	cbz	r0, 8001f84 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f74:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f76:	bf01      	itttt	eq
 8001f78:	6822      	ldreq	r2, [r4, #0]
 8001f7a:	6813      	ldreq	r3, [r2, #0]
 8001f7c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001f80:	6013      	streq	r3, [r2, #0]
 8001f82:	e7e5      	b.n	8001f50 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f84:	f1b9 0f01 	cmp.w	r9, #1
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	d102      	bne.n	8001f92 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f8c:	b2ed      	uxtb	r5, r5
 8001f8e:	611d      	str	r5, [r3, #16]
 8001f90:	e7df      	b.n	8001f52 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f92:	0a2a      	lsrs	r2, r5, #8
 8001f94:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f96:	4639      	mov	r1, r7
 8001f98:	4642      	mov	r2, r8
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f7ff ff88 	bl	8001eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	d1e6      	bne.n	8001f72 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	e7f1      	b.n	8001f8c <I2C_RequestMemoryWrite+0x90>
 8001fa8:	00010002 	.word	0x00010002

08001fac <I2C_RequestMemoryRead>:
{
 8001fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fb0:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fb2:	6803      	ldr	r3, [r0, #0]
{
 8001fb4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fbc:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fbe:	681a      	ldr	r2, [r3, #0]
{
 8001fc0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fc8:	601a      	str	r2, [r3, #0]
{
 8001fca:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fcc:	463b      	mov	r3, r7
 8001fce:	f8cd 8000 	str.w	r8, [sp]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001fd8:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fda:	f7ff ff37 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	b148      	cbz	r0, 8001ff6 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fe2:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fe4:	05db      	lsls	r3, r3, #23
 8001fe6:	d502      	bpl.n	8001fee <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fec:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001fee:	2003      	movs	r0, #3
}
 8001ff0:	b004      	add	sp, #16
 8001ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ff6:	fa5f f986 	uxtb.w	r9, r6
 8001ffa:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8001ffe:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002000:	492a      	ldr	r1, [pc, #168]	; (80020ac <I2C_RequestMemoryRead+0x100>)
 8002002:	4643      	mov	r3, r8
 8002004:	463a      	mov	r2, r7
 8002006:	4620      	mov	r0, r4
 8002008:	f7ff fe90 	bl	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800200c:	b108      	cbz	r0, 8002012 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 800200e:	2001      	movs	r0, #1
 8002010:	e7ee      	b.n	8001ff0 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002012:	6823      	ldr	r3, [r4, #0]
 8002014:	9003      	str	r0, [sp, #12]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	9203      	str	r2, [sp, #12]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800201e:	4642      	mov	r2, r8
 8002020:	4639      	mov	r1, r7
 8002022:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002024:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002026:	f7ff ff43 	bl	8001eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800202a:	b140      	cbz	r0, 800203e <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800202c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800202e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002030:	bf01      	itttt	eq
 8002032:	6822      	ldreq	r2, [r4, #0]
 8002034:	6813      	ldreq	r3, [r2, #0]
 8002036:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800203a:	6013      	streq	r3, [r2, #0]
 800203c:	e7e7      	b.n	800200e <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800203e:	f1ba 0f01 	cmp.w	sl, #1
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	d11a      	bne.n	800207c <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002046:	b2ed      	uxtb	r5, r5
 8002048:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800204a:	4642      	mov	r2, r8
 800204c:	4639      	mov	r1, r7
 800204e:	4620      	mov	r0, r4
 8002050:	f7ff ff2e 	bl	8001eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002054:	2800      	cmp	r0, #0
 8002056:	d1e9      	bne.n	800202c <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002058:	6822      	ldr	r2, [r4, #0]
 800205a:	6813      	ldr	r3, [r2, #0]
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002062:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002066:	4602      	mov	r2, r0
 8002068:	f8cd 8000 	str.w	r8, [sp]
 800206c:	463b      	mov	r3, r7
 800206e:	4620      	mov	r0, r4
 8002070:	f7ff feec 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8002074:	6822      	ldr	r2, [r4, #0]
 8002076:	b160      	cbz	r0, 8002092 <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002078:	6813      	ldr	r3, [r2, #0]
 800207a:	e7b3      	b.n	8001fe4 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800207c:	0a2a      	lsrs	r2, r5, #8
 800207e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002080:	4639      	mov	r1, r7
 8002082:	4642      	mov	r2, r8
 8002084:	4620      	mov	r0, r4
 8002086:	f7ff ff13 	bl	8001eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800208a:	2800      	cmp	r0, #0
 800208c:	d1ce      	bne.n	800202c <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	e7d9      	b.n	8002046 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002092:	f049 0301 	orr.w	r3, r9, #1
 8002096:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002098:	4904      	ldr	r1, [pc, #16]	; (80020ac <I2C_RequestMemoryRead+0x100>)
 800209a:	4643      	mov	r3, r8
 800209c:	463a      	mov	r2, r7
 800209e:	4620      	mov	r0, r4
 80020a0:	f7ff fe44 	bl	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 80020a4:	3800      	subs	r0, #0
 80020a6:	bf18      	it	ne
 80020a8:	2001      	movne	r0, #1
 80020aa:	e7a1      	b.n	8001ff0 <I2C_RequestMemoryRead+0x44>
 80020ac:	00010002 	.word	0x00010002

080020b0 <HAL_I2C_MspInit>:
}
 80020b0:	4770      	bx	lr
	...

080020b4 <HAL_I2C_Init>:
{
 80020b4:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80020b6:	4604      	mov	r4, r0
 80020b8:	b908      	cbnz	r0, 80020be <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80020ba:	2001      	movs	r0, #1
}
 80020bc:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020c6:	b91b      	cbnz	r3, 80020d0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80020c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80020cc:	f7ff fff0 	bl	80020b0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d0:	2324      	movs	r3, #36	; 0x24
 80020d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ee:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020f0:	f001 f9a0 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020f4:	4a3f      	ldr	r2, [pc, #252]	; (80021f4 <HAL_I2C_Init+0x140>)
 80020f6:	6863      	ldr	r3, [r4, #4]
 80020f8:	4293      	cmp	r3, r2
 80020fa:	bf94      	ite	ls
 80020fc:	4a3e      	ldrls	r2, [pc, #248]	; (80021f8 <HAL_I2C_Init+0x144>)
 80020fe:	4a3f      	ldrhi	r2, [pc, #252]	; (80021fc <HAL_I2C_Init+0x148>)
 8002100:	4290      	cmp	r0, r2
 8002102:	bf8c      	ite	hi
 8002104:	2200      	movhi	r2, #0
 8002106:	2201      	movls	r2, #1
 8002108:	2a00      	cmp	r2, #0
 800210a:	d1d6      	bne.n	80020ba <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800210c:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800210e:	4e3c      	ldr	r6, [pc, #240]	; (8002200 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002110:	684a      	ldr	r2, [r1, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002112:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002116:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800211a:	4332      	orrs	r2, r6
 800211c:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800211e:	4a35      	ldr	r2, [pc, #212]	; (80021f4 <HAL_I2C_Init+0x140>)
 8002120:	6a0d      	ldr	r5, [r1, #32]
 8002122:	4293      	cmp	r3, r2
 8002124:	bf84      	itt	hi
 8002126:	f44f 7296 	movhi.w	r2, #300	; 0x12c
 800212a:	4372      	mulhi	r2, r6
 800212c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002130:	bf91      	iteee	ls
 8002132:	1c72      	addls	r2, r6, #1
 8002134:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002138:	fbb2 f2f6 	udivhi	r2, r2, r6
 800213c:	3201      	addhi	r2, #1
 800213e:	432a      	orrs	r2, r5
 8002140:	620a      	str	r2, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002142:	69cd      	ldr	r5, [r1, #28]
 8002144:	1e42      	subs	r2, r0, #1
 8002146:	482b      	ldr	r0, [pc, #172]	; (80021f4 <HAL_I2C_Init+0x140>)
 8002148:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 800214c:	4283      	cmp	r3, r0
 800214e:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8002152:	d832      	bhi.n	80021ba <HAL_I2C_Init+0x106>
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fbb2 f3f3 	udiv	r3, r2, r3
 800215a:	f640 72fc 	movw	r2, #4092	; 0xffc
 800215e:	3301      	adds	r3, #1
 8002160:	4213      	tst	r3, r2
 8002162:	d042      	beq.n	80021ea <HAL_I2C_Init+0x136>
 8002164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002168:	432b      	orrs	r3, r5
 800216a:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800216c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002170:	680a      	ldr	r2, [r1, #0]
 8002172:	4303      	orrs	r3, r0
 8002174:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800217c:	688a      	ldr	r2, [r1, #8]
 800217e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002182:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 8002186:	4303      	orrs	r3, r0
 8002188:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800218c:	4313      	orrs	r3, r2
 800218e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002190:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002194:	68ca      	ldr	r2, [r1, #12]
 8002196:	4303      	orrs	r3, r0
 8002198:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800219c:	4313      	orrs	r3, r2
 800219e:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80021a0:	680b      	ldr	r3, [r1, #0]
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a8:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ac:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021b2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80021b8:	e780      	b.n	80020bc <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021ba:	68a0      	ldr	r0, [r4, #8]
 80021bc:	b950      	cbnz	r0, 80021d4 <HAL_I2C_Init+0x120>
 80021be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021cc:	b17b      	cbz	r3, 80021ee <HAL_I2C_Init+0x13a>
 80021ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d2:	e7c9      	b.n	8002168 <HAL_I2C_Init+0xb4>
 80021d4:	2019      	movs	r0, #25
 80021d6:	4343      	muls	r3, r0
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e2:	b123      	cbz	r3, 80021ee <HAL_I2C_Init+0x13a>
 80021e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021e8:	e7be      	b.n	8002168 <HAL_I2C_Init+0xb4>
 80021ea:	2304      	movs	r3, #4
 80021ec:	e7bc      	b.n	8002168 <HAL_I2C_Init+0xb4>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e7ba      	b.n	8002168 <HAL_I2C_Init+0xb4>
 80021f2:	bf00      	nop
 80021f4:	000186a0 	.word	0x000186a0
 80021f8:	001e847f 	.word	0x001e847f
 80021fc:	003d08ff 	.word	0x003d08ff
 8002200:	000f4240 	.word	0x000f4240

08002204 <HAL_I2C_MspDeInit>:
 8002204:	4770      	bx	lr

08002206 <HAL_I2C_DeInit>:
{
 8002206:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002208:	4604      	mov	r4, r0
 800220a:	b198      	cbz	r0, 8002234 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800220c:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800220e:	2324      	movs	r3, #36	; 0x24
 8002210:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002214:	6813      	ldr	r3, [r2, #0]
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800221c:	f7ff fff2 	bl	8002204 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002220:	2000      	movs	r0, #0
 8002222:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 8002224:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002228:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800222c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800222e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002232:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002234:	2001      	movs	r0, #1
 8002236:	e7fc      	b.n	8002232 <HAL_I2C_DeInit+0x2c>

08002238 <HAL_I2C_Mem_Write>:
{
 8002238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800223c:	4604      	mov	r4, r0
 800223e:	4699      	mov	r9, r3
 8002240:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002242:	460f      	mov	r7, r1
 8002244:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002246:	f7ff f9d9 	bl	80015fc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800224a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800224e:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8002250:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002252:	d003      	beq.n	800225c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8002254:	2002      	movs	r0, #2
}
 8002256:	b003      	add	sp, #12
 8002258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800225c:	9000      	str	r0, [sp, #0]
 800225e:	493c      	ldr	r1, [pc, #240]	; (8002350 <HAL_I2C_Mem_Write+0x118>)
 8002260:	2319      	movs	r3, #25
 8002262:	2201      	movs	r2, #1
 8002264:	4620      	mov	r0, r4
 8002266:	f7ff fdf1 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 800226a:	2800      	cmp	r0, #0
 800226c:	d1f2      	bne.n	8002254 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800226e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002272:	2b01      	cmp	r3, #1
 8002274:	d0ee      	beq.n	8002254 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002276:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8002278:	2301      	movs	r3, #1
 800227a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800227e:	6803      	ldr	r3, [r0, #0]
 8002280:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8002282:	bf5e      	ittt	pl
 8002284:	6803      	ldrpl	r3, [r0, #0]
 8002286:	f043 0301 	orrpl.w	r3, r3, #1
 800228a:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800228c:	6803      	ldr	r3, [r0, #0]
 800228e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002292:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002294:	2321      	movs	r3, #33	; 0x21
 8002296:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800229a:	2340      	movs	r3, #64	; 0x40
 800229c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80022a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022a6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022a8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80022ac:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022b0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022b2:	4b28      	ldr	r3, [pc, #160]	; (8002354 <HAL_I2C_Mem_Write+0x11c>)
 80022b4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022b6:	e9cd 6500 	strd	r6, r5, [sp]
 80022ba:	464b      	mov	r3, r9
 80022bc:	4642      	mov	r2, r8
 80022be:	4639      	mov	r1, r7
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff fe1b 	bl	8001efc <I2C_RequestMemoryWrite>
 80022c6:	2800      	cmp	r0, #0
 80022c8:	d02a      	beq.n	8002320 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 80022ca:	2001      	movs	r0, #1
 80022cc:	e7c3      	b.n	8002256 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ce:	f7ff fdef 	bl	8001eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80022d2:	b140      	cbz	r0, 80022e6 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022d6:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d8:	bf01      	itttt	eq
 80022da:	6822      	ldreq	r2, [r4, #0]
 80022dc:	6813      	ldreq	r3, [r2, #0]
 80022de:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80022e2:	6013      	streq	r3, [r2, #0]
 80022e4:	e7f1      	b.n	80022ca <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022e8:	6827      	ldr	r7, [r4, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	f812 1b01 	ldrb.w	r1, [r2], #1
 80022f0:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 80022f2:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80022f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80022f6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80022f8:	3a01      	subs	r2, #1
 80022fa:	b292      	uxth	r2, r2
 80022fc:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022fe:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8002300:	1e48      	subs	r0, r1, #1
 8002302:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002304:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8002306:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002308:	d50a      	bpl.n	8002320 <HAL_I2C_Mem_Write+0xe8>
 800230a:	b148      	cbz	r0, 8002320 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800230c:	785a      	ldrb	r2, [r3, #1]
 800230e:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8002310:	3302      	adds	r3, #2
 8002312:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002314:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002316:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8002318:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800231a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800231c:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800231e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002320:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002322:	462a      	mov	r2, r5
 8002324:	4631      	mov	r1, r6
 8002326:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1d0      	bne.n	80022ce <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232c:	f7ff fd39 	bl	8001da2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002330:	2800      	cmp	r0, #0
 8002332:	d1cf      	bne.n	80022d4 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	6822      	ldr	r2, [r4, #0]
 8002336:	6813      	ldr	r3, [r2, #0]
 8002338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800233c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800233e:	2320      	movs	r3, #32
 8002340:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002344:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002348:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800234c:	e783      	b.n	8002256 <HAL_I2C_Mem_Write+0x1e>
 800234e:	bf00      	nop
 8002350:	00100002 	.word	0x00100002
 8002354:	ffff0000 	.word	0xffff0000

08002358 <HAL_I2C_Mem_Read>:
{
 8002358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800235c:	4604      	mov	r4, r0
 800235e:	b087      	sub	sp, #28
 8002360:	4699      	mov	r9, r3
 8002362:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8002364:	460d      	mov	r5, r1
 8002366:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff f948 	bl	80015fc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800236c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002370:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8002372:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002374:	d004      	beq.n	8002380 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8002376:	2502      	movs	r5, #2
}
 8002378:	4628      	mov	r0, r5
 800237a:	b007      	add	sp, #28
 800237c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002380:	9000      	str	r0, [sp, #0]
 8002382:	4976      	ldr	r1, [pc, #472]	; (800255c <HAL_I2C_Mem_Read+0x204>)
 8002384:	2319      	movs	r3, #25
 8002386:	2201      	movs	r2, #1
 8002388:	4620      	mov	r0, r4
 800238a:	f7ff fd5f 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 800238e:	2800      	cmp	r0, #0
 8002390:	d1f1      	bne.n	8002376 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8002392:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002396:	2b01      	cmp	r3, #1
 8002398:	d0ed      	beq.n	8002376 <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800239a:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800239c:	2301      	movs	r3, #1
 800239e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023a2:	6803      	ldr	r3, [r0, #0]
 80023a4:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80023a6:	bf5e      	ittt	pl
 80023a8:	6803      	ldrpl	r3, [r0, #0]
 80023aa:	f043 0301 	orrpl.w	r3, r3, #1
 80023ae:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023b0:	6803      	ldr	r3, [r0, #0]
 80023b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023b6:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023b8:	2322      	movs	r3, #34	; 0x22
 80023ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023be:	2340      	movs	r3, #64	; 0x40
 80023c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80023c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023ca:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023cc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80023d0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023d4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023d6:	4b62      	ldr	r3, [pc, #392]	; (8002560 <HAL_I2C_Mem_Read+0x208>)
 80023d8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023da:	4629      	mov	r1, r5
 80023dc:	e9cd 7600 	strd	r7, r6, [sp]
 80023e0:	464b      	mov	r3, r9
 80023e2:	4642      	mov	r2, r8
 80023e4:	4620      	mov	r0, r4
 80023e6:	f7ff fde1 	bl	8001fac <I2C_RequestMemoryRead>
 80023ea:	4605      	mov	r5, r0
 80023ec:	b108      	cbz	r0, 80023f2 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 80023ee:	2501      	movs	r5, #1
 80023f0:	e7c2      	b.n	8002378 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 80023f2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80023f4:	6823      	ldr	r3, [r4, #0]
 80023f6:	b9b2      	cbnz	r2, 8002426 <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f8:	9002      	str	r0, [sp, #8]
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	9202      	str	r2, [sp, #8]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	9202      	str	r2, [sp, #8]
 8002402:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240a:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800240c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8002564 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 8002410:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002412:	2b00      	cmp	r3, #0
 8002414:	d12c      	bne.n	8002470 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 8002416:	2220      	movs	r2, #32
 8002418:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800241c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002420:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002424:	e7a8      	b.n	8002378 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8002426:	2a01      	cmp	r2, #1
 8002428:	d10a      	bne.n	8002440 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002430:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002432:	9003      	str	r0, [sp, #12]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	9203      	str	r2, [sp, #12]
 8002438:	699a      	ldr	r2, [r3, #24]
 800243a:	9203      	str	r2, [sp, #12]
 800243c:	9a03      	ldr	r2, [sp, #12]
 800243e:	e7e1      	b.n	8002404 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8002440:	2a02      	cmp	r2, #2
 8002442:	d10e      	bne.n	8002462 <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002452:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002454:	9004      	str	r0, [sp, #16]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	9204      	str	r2, [sp, #16]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	9304      	str	r3, [sp, #16]
 800245e:	9b04      	ldr	r3, [sp, #16]
 8002460:	e7d4      	b.n	800240c <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002462:	9005      	str	r0, [sp, #20]
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	9205      	str	r2, [sp, #20]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	9305      	str	r3, [sp, #20]
 800246c:	9b05      	ldr	r3, [sp, #20]
 800246e:	e7cd      	b.n	800240c <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8002470:	2b03      	cmp	r3, #3
 8002472:	d856      	bhi.n	8002522 <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8002474:	2b01      	cmp	r3, #1
 8002476:	d115      	bne.n	80024a4 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002478:	4632      	mov	r2, r6
 800247a:	4639      	mov	r1, r7
 800247c:	4620      	mov	r0, r4
 800247e:	f7ff fcb6 	bl	8001dee <I2C_WaitOnRXNEFlagUntilTimeout>
 8002482:	2800      	cmp	r0, #0
 8002484:	d1b3      	bne.n	80023ee <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800248c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800248e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002490:	3301      	adds	r3, #1
 8002492:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002494:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002496:	3b01      	subs	r3, #1
 8002498:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800249a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800249c:	3b01      	subs	r3, #1
 800249e:	b29b      	uxth	r3, r3
 80024a0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80024a2:	e7b5      	b.n	8002410 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 80024a4:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024a6:	9600      	str	r6, [sp, #0]
 80024a8:	463b      	mov	r3, r7
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	4641      	mov	r1, r8
 80024b0:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80024b2:	d119      	bne.n	80024e8 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024b4:	f7ff fcca 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 80024b8:	2800      	cmp	r0, #0
 80024ba:	d198      	bne.n	80023ee <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c4:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024ca:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80024cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024ce:	1c53      	adds	r3, r2, #1
 80024d0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80024d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80024d4:	3b01      	subs	r3, #1
 80024d6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80024d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29b      	uxth	r3, r3
 80024de:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e0:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	7053      	strb	r3, [r2, #1]
 80024e6:	e7d2      	b.n	800248e <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024e8:	f7ff fcb0 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 80024ec:	2800      	cmp	r0, #0
 80024ee:	f47f af7e 	bne.w	80023ee <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024fa:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002500:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002502:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002504:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8002506:	3301      	adds	r3, #1
 8002508:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800250a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002510:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002512:	3b01      	subs	r3, #1
 8002514:	b29b      	uxth	r3, r3
 8002516:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002518:	4602      	mov	r2, r0
 800251a:	463b      	mov	r3, r7
 800251c:	4641      	mov	r1, r8
 800251e:	4620      	mov	r0, r4
 8002520:	e7c8      	b.n	80024b4 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002522:	4632      	mov	r2, r6
 8002524:	4639      	mov	r1, r7
 8002526:	4620      	mov	r0, r4
 8002528:	f7ff fc61 	bl	8001dee <I2C_WaitOnRXNEFlagUntilTimeout>
 800252c:	2800      	cmp	r0, #0
 800252e:	f47f af5e 	bne.w	80023ee <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002538:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800253a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800253c:	1c53      	adds	r3, r2, #1
 800253e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002540:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002542:	3b01      	subs	r3, #1
 8002544:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002546:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002548:	3b01      	subs	r3, #1
 800254a:	b29b      	uxth	r3, r3
 800254c:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	6959      	ldr	r1, [r3, #20]
 8002552:	0749      	lsls	r1, r1, #29
 8002554:	f57f af5c 	bpl.w	8002410 <HAL_I2C_Mem_Read+0xb8>
 8002558:	e7c3      	b.n	80024e2 <HAL_I2C_Mem_Read+0x18a>
 800255a:	bf00      	nop
 800255c:	00100002 	.word	0x00100002
 8002560:	ffff0000 	.word	0xffff0000
 8002564:	00010004 	.word	0x00010004

08002568 <HAL_I2C_GetState>:
  return hi2c->State;
 8002568:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800256c:	4770      	bx	lr

0800256e <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800256e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002572:	4604      	mov	r4, r0
 8002574:	460f      	mov	r7, r1
 8002576:	4616      	mov	r6, r2
 8002578:	461d      	mov	r5, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800257a:	f7ff f83f 	bl	80015fc <HAL_GetTick>
 800257e:	4680      	mov	r8, r0

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002580:	6822      	ldr	r2, [r4, #0]
 8002582:	6893      	ldr	r3, [r2, #8]
 8002584:	ea37 0303 	bics.w	r3, r7, r3
 8002588:	bf0c      	ite	eq
 800258a:	2301      	moveq	r3, #1
 800258c:	2300      	movne	r3, #0
 800258e:	42b3      	cmp	r3, r6
 8002590:	d101      	bne.n	8002596 <I2S_WaitFlagStateUntilTimeout+0x28>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002592:	2000      	movs	r0, #0
 8002594:	e00e      	b.n	80025b4 <I2S_WaitFlagStateUntilTimeout+0x46>
    if (Timeout != HAL_MAX_DELAY)
 8002596:	1c6b      	adds	r3, r5, #1
 8002598:	d0f3      	beq.n	8002582 <I2S_WaitFlagStateUntilTimeout+0x14>
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800259a:	f7ff f82f 	bl	80015fc <HAL_GetTick>
 800259e:	eba0 0008 	sub.w	r0, r0, r8
 80025a2:	42a8      	cmp	r0, r5
 80025a4:	d3ec      	bcc.n	8002580 <I2S_WaitFlagStateUntilTimeout+0x12>
        hi2s->State = HAL_I2S_STATE_READY;
 80025a6:	2301      	movs	r3, #1
 80025a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2s);
 80025ac:	2300      	movs	r3, #0
 80025ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80025b2:	2003      	movs	r0, #3
}
 80025b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080025b8 <HAL_I2S_MspInit>:
}
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_I2S_Init>:
{
 80025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2s == NULL)
 80025be:	4604      	mov	r4, r0
 80025c0:	2800      	cmp	r0, #0
 80025c2:	f000 8087 	beq.w	80026d4 <HAL_I2S_Init+0x118>
  if (hi2s->State == HAL_I2S_STATE_RESET)
 80025c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80025ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025ce:	b92b      	cbnz	r3, 80025dc <HAL_I2S_Init+0x20>
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80025d0:	4b42      	ldr	r3, [pc, #264]	; (80026dc <HAL_I2S_Init+0x120>)
    hi2s->Lock = HAL_UNLOCKED;
 80025d2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80025d6:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 80025d8:	f7ff ffee 	bl	80025b8 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025dc:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 80025de:	2102      	movs	r1, #2
 80025e0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025e4:	69d3      	ldr	r3, [r2, #28]
 80025e6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80025ea:	f023 030f 	bic.w	r3, r3, #15
 80025ee:	61d3      	str	r3, [r2, #28]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80025f0:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 80025f2:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80025f4:	428b      	cmp	r3, r1
 80025f6:	d06f      	beq.n	80026d8 <HAL_I2S_Init+0x11c>
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80025f8:	68e3      	ldr	r3, [r4, #12]
      packetlength = 32U;
 80025fa:	2b00      	cmp	r3, #0
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80025fc:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 80025fe:	bf0c      	ite	eq
 8002600:	2510      	moveq	r5, #16
 8002602:	2520      	movne	r5, #32
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002604:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002606:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8002608:	bf98      	it	ls
 800260a:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800260c:	f000 ffd2 	bl	80035b4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002610:	6923      	ldr	r3, [r4, #16]
 8002612:	6961      	ldr	r1, [r4, #20]
 8002614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002618:	d153      	bne.n	80026c2 <HAL_I2S_Init+0x106>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800261a:	68e3      	ldr	r3, [r4, #12]
 800261c:	220a      	movs	r2, #10
 800261e:	2b00      	cmp	r3, #0
 8002620:	d04d      	beq.n	80026be <HAL_I2S_Init+0x102>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002622:	00ab      	lsls	r3, r5, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002624:	fbb0 f3f3 	udiv	r3, r0, r3
 8002628:	4353      	muls	r3, r2
    tmp = tmp / 10U;
 800262a:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800262c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002630:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8002632:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002636:	f003 0201 	and.w	r2, r3, #1
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800263a:	085b      	lsrs	r3, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800263c:	1e99      	subs	r1, r3, #2
 800263e:	29fd      	cmp	r1, #253	; 0xfd
 8002640:	d844      	bhi.n	80026cc <HAL_I2S_Init+0x110>
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002642:	0212      	lsls	r2, r2, #8
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002644:	4313      	orrs	r3, r2
 8002646:	6922      	ldr	r2, [r4, #16]
 8002648:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800264a:	4f25      	ldr	r7, [pc, #148]	; (80026e0 <HAL_I2S_Init+0x124>)
 800264c:	68e5      	ldr	r5, [r4, #12]
 800264e:	69a0      	ldr	r0, [r4, #24]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002650:	4313      	orrs	r3, r2
 8002652:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002654:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
 8002658:	69ca      	ldr	r2, [r1, #28]
 800265a:	ea46 0c03 	orr.w	ip, r6, r3
 800265e:	403a      	ands	r2, r7
 8002660:	ea42 020c 	orr.w	r2, r2, ip
 8002664:	432a      	orrs	r2, r5
 8002666:	4302      	orrs	r2, r0
 8002668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800266c:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800266e:	6a22      	ldr	r2, [r4, #32]
 8002670:	2a01      	cmp	r2, #1
 8002672:	d11e      	bne.n	80026b2 <HAL_I2S_Init+0xf6>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002674:	4a1b      	ldr	r2, [pc, #108]	; (80026e4 <HAL_I2S_Init+0x128>)
 8002676:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002678:	f8df c070 	ldr.w	ip, [pc, #112]	; 80026ec <HAL_I2S_Init+0x130>
 800267c:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <HAL_I2S_Init+0x12c>)
 800267e:	4561      	cmp	r1, ip
 8002680:	bf18      	it	ne
 8002682:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      tmp = I2S_MODE_SLAVE_TX;
 8002686:	f436 7600 	bics.w	r6, r6, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800268a:	69d1      	ldr	r1, [r2, #28]
 800268c:	ea01 0107 	and.w	r1, r1, r7
 8002690:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002692:	f04f 0102 	mov.w	r1, #2
 8002696:	6211      	str	r1, [r2, #32]
      tmp = I2S_MODE_SLAVE_TX;
 8002698:	bf0c      	ite	eq
 800269a:	f44f 7680 	moveq.w	r6, #256	; 0x100
 800269e:	2600      	movne	r6, #0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026a0:	432b      	orrs	r3, r5
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80026a2:	69d1      	ldr	r1, [r2, #28]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026a4:	4333      	orrs	r3, r6
 80026a6:	4303      	orrs	r3, r0
 80026a8:	430b      	orrs	r3, r1
 80026aa:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80026ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026b0:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026b2:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80026b4:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026b6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80026b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80026bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026be:	00eb      	lsls	r3, r5, #3
 80026c0:	e7b0      	b.n	8002624 <HAL_I2S_Init+0x68>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026c2:	230a      	movs	r3, #10
 80026c4:	fbb0 f0f5 	udiv	r0, r0, r5
 80026c8:	4343      	muls	r3, r0
 80026ca:	e7ae      	b.n	800262a <HAL_I2S_Init+0x6e>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80026cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026ce:	f043 0310 	orr.w	r3, r3, #16
 80026d2:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 80026d4:	2001      	movs	r0, #1
 80026d6:	e7f1      	b.n	80026bc <HAL_I2S_Init+0x100>
    i2sodd = 0U;
 80026d8:	2200      	movs	r2, #0
 80026da:	e7b3      	b.n	8002644 <HAL_I2S_Init+0x88>
 80026dc:	08002bd5 	.word	0x08002bd5
 80026e0:	fffff040 	.word	0xfffff040
 80026e4:	08002d01 	.word	0x08002d01
 80026e8:	40003400 	.word	0x40003400
 80026ec:	40003800 	.word	0x40003800

080026f0 <HAL_I2S_Transmit_DMA>:
{
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 80026f4:	2900      	cmp	r1, #0
 80026f6:	d056      	beq.n	80027a6 <HAL_I2S_Transmit_DMA+0xb6>
 80026f8:	2a00      	cmp	r2, #0
 80026fa:	d054      	beq.n	80027a6 <HAL_I2S_Transmit_DMA+0xb6>
  __HAL_LOCK(hi2s);
 80026fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002700:	2b01      	cmp	r3, #1
 8002702:	d00b      	beq.n	800271c <HAL_I2S_Transmit_DMA+0x2c>
 8002704:	2301      	movs	r3, #1
 8002706:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 800270a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800270e:	2b01      	cmp	r3, #1
 8002710:	b2dd      	uxtb	r5, r3
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_I2S_Transmit_DMA+0x30>
    __HAL_UNLOCK(hi2s);
 8002718:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 800271c:	2502      	movs	r5, #2
 800271e:	e028      	b.n	8002772 <HAL_I2S_Transmit_DMA+0x82>
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002720:	2003      	movs	r0, #3
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002722:	6826      	ldr	r6, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002724:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002728:	6463      	str	r3, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800272a:	69f3      	ldr	r3, [r6, #28]
  hi2s->pTxBuffPtr = pData;
 800272c:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800272e:	f003 0307 	and.w	r3, r3, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002732:	4283      	cmp	r3, r0
 8002734:	d001      	beq.n	800273a <HAL_I2S_Transmit_DMA+0x4a>
 8002736:	2b05      	cmp	r3, #5
 8002738:	d11d      	bne.n	8002776 <HAL_I2S_Transmit_DMA+0x86>
    hi2s->TxXferSize = (Size << 1U);
 800273a:	0053      	lsls	r3, r2, #1
 800273c:	b29b      	uxth	r3, r3
 800273e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002740:	8563      	strh	r3, [r4, #42]	; 0x2a
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002742:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_I2S_Transmit_DMA+0xbc>)
 8002746:	6403      	str	r3, [r0, #64]	; 0x40
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_I2S_Transmit_DMA+0xc0>)
 800274a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_I2S_Transmit_DMA+0xc4>)
 800274e:	64c3      	str	r3, [r0, #76]	; 0x4c
                                 hi2s->TxXferSize))
 8002750:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002752:	f106 020c 	add.w	r2, r6, #12
 8002756:	b29b      	uxth	r3, r3
 8002758:	f7ff f898 	bl	800188c <HAL_DMA_Start_IT>
 800275c:	b170      	cbz	r0, 800277c <HAL_I2S_Transmit_DMA+0x8c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800275e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002766:	2301      	movs	r3, #1
 8002768:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 800276c:	2300      	movs	r3, #0
 800276e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002772:	4628      	mov	r0, r5
 8002774:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->TxXferSize = Size;
 8002776:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002778:	8562      	strh	r2, [r4, #42]	; 0x2a
 800277a:	e7e2      	b.n	8002742 <HAL_I2S_Transmit_DMA+0x52>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	69da      	ldr	r2, [r3, #28]
 8002780:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8002782:	bf5e      	ittt	pl
 8002784:	69da      	ldrpl	r2, [r3, #28]
 8002786:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 800278a:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	0792      	lsls	r2, r2, #30
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002790:	bf58      	it	pl
 8002792:	685a      	ldrpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8002794:	f04f 0500 	mov.w	r5, #0
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002798:	bf5c      	itt	pl
 800279a:	f042 0202 	orrpl.w	r2, r2, #2
 800279e:	605a      	strpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 80027a0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  return HAL_OK;
 80027a4:	e7e5      	b.n	8002772 <HAL_I2S_Transmit_DMA+0x82>
    return  HAL_ERROR;
 80027a6:	2501      	movs	r5, #1
 80027a8:	e7e3      	b.n	8002772 <HAL_I2S_Transmit_DMA+0x82>
 80027aa:	bf00      	nop
 80027ac:	08002b7d 	.word	0x08002b7d
 80027b0:	08002b87 	.word	0x08002b87
 80027b4:	08002ccf 	.word	0x08002ccf

080027b8 <HAL_I2S_Receive_DMA>:
{
 80027b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027ba:	4613      	mov	r3, r2
 80027bc:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 80027be:	2900      	cmp	r1, #0
 80027c0:	d062      	beq.n	8002888 <HAL_I2S_Receive_DMA+0xd0>
 80027c2:	2a00      	cmp	r2, #0
 80027c4:	d060      	beq.n	8002888 <HAL_I2S_Receive_DMA+0xd0>
  __HAL_LOCK(hi2s);
 80027c6:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80027ca:	2a01      	cmp	r2, #1
 80027cc:	d00b      	beq.n	80027e6 <HAL_I2S_Receive_DMA+0x2e>
 80027ce:	2201      	movs	r2, #1
 80027d0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 80027d4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80027d8:	2a01      	cmp	r2, #1
 80027da:	b2d5      	uxtb	r5, r2
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	d003      	beq.n	80027ea <HAL_I2S_Receive_DMA+0x32>
    __HAL_UNLOCK(hi2s);
 80027e2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 80027e6:	2502      	movs	r5, #2
 80027e8:	e036      	b.n	8002858 <HAL_I2S_Receive_DMA+0xa0>
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80027ea:	6826      	ldr	r6, [r4, #0]
  hi2s->pRxBuffPtr = pData;
 80027ec:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80027ee:	2004      	movs	r0, #4
 80027f0:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80027f4:	6462      	str	r2, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80027f6:	69f2      	ldr	r2, [r6, #28]
 80027f8:	f002 0207 	and.w	r2, r2, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80027fc:	2a03      	cmp	r2, #3
 80027fe:	d001      	beq.n	8002804 <HAL_I2S_Receive_DMA+0x4c>
 8002800:	2a05      	cmp	r2, #5
 8002802:	d101      	bne.n	8002808 <HAL_I2S_Receive_DMA+0x50>
    hi2s->RxXferSize = (Size << 1U);
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	b29b      	uxth	r3, r3
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002808:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2s->RxXferSize = Size;
 800280a:	8623      	strh	r3, [r4, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800280c:	8663      	strh	r3, [r4, #50]	; 0x32
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800280e:	4b1f      	ldr	r3, [pc, #124]	; (800288c <HAL_I2S_Receive_DMA+0xd4>)
 8002810:	6403      	str	r3, [r0, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002812:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <HAL_I2S_Receive_DMA+0xd8>)
 8002814:	63c3      	str	r3, [r0, #60]	; 0x3c
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002816:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <HAL_I2S_Receive_DMA+0xdc>)
 8002818:	64c3      	str	r3, [r0, #76]	; 0x4c
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800281a:	69f3      	ldr	r3, [r6, #28]
 800281c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002820:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002824:	d106      	bne.n	8002834 <HAL_I2S_Receive_DMA+0x7c>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002826:	2300      	movs	r3, #0
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	68f3      	ldr	r3, [r6, #12]
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	68b3      	ldr	r3, [r6, #8]
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	9b01      	ldr	r3, [sp, #4]
                                 hi2s->RxXferSize))
 8002834:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002836:	460a      	mov	r2, r1
 8002838:	b29b      	uxth	r3, r3
 800283a:	f106 010c 	add.w	r1, r6, #12
 800283e:	f7ff f825 	bl	800188c <HAL_DMA_Start_IT>
 8002842:	b160      	cbz	r0, 800285e <HAL_I2S_Receive_DMA+0xa6>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002844:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002846:	f043 0308 	orr.w	r3, r3, #8
 800284a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800284c:	2301      	movs	r3, #1
 800284e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8002852:	2300      	movs	r3, #0
 8002854:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002858:	4628      	mov	r0, r5
 800285a:	b002      	add	sp, #8
 800285c:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8002864:	bf5e      	ittt	pl
 8002866:	69da      	ldrpl	r2, [r3, #28]
 8002868:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 800286c:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	07d2      	lsls	r2, r2, #31
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002872:	bf58      	it	pl
 8002874:	685a      	ldrpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8002876:	f04f 0500 	mov.w	r5, #0
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800287a:	bf5c      	itt	pl
 800287c:	f042 0201 	orrpl.w	r2, r2, #1
 8002880:	605a      	strpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8002882:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  return HAL_OK;
 8002886:	e7e7      	b.n	8002858 <HAL_I2S_Receive_DMA+0xa0>
    return  HAL_ERROR;
 8002888:	2501      	movs	r5, #1
 800288a:	e7e5      	b.n	8002858 <HAL_I2S_Receive_DMA+0xa0>
 800288c:	08002ba9 	.word	0x08002ba9
 8002890:	08002bb3 	.word	0x08002bb3
 8002894:	08002ccf 	.word	0x08002ccf

08002898 <HAL_I2S_DMAPause>:
  __HAL_LOCK(hi2s);
 8002898:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800289c:	2b01      	cmp	r3, #1
 800289e:	d02d      	beq.n	80028fc <HAL_I2S_DMAPause+0x64>
 80028a0:	2301      	movs	r3, #1
 80028a2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80028a6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d109      	bne.n	80028c2 <HAL_I2S_DMAPause+0x2a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80028ae:	6802      	ldr	r2, [r0, #0]
 80028b0:	6853      	ldr	r3, [r2, #4]
 80028b2:	f023 0302 	bic.w	r3, r3, #2
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80028b6:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hi2s);
 80028b8:	2300      	movs	r3, #0
 80028ba:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 80028be:	4618      	mov	r0, r3
 80028c0:	4770      	bx	lr
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80028c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d104      	bne.n	80028d4 <HAL_I2S_DMAPause+0x3c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80028ca:	6802      	ldr	r2, [r0, #0]
 80028cc:	6853      	ldr	r3, [r2, #4]
 80028ce:	f023 0301 	bic.w	r3, r3, #1
 80028d2:	e7f0      	b.n	80028b6 <HAL_I2S_DMAPause+0x1e>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80028d4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80028d8:	2b05      	cmp	r3, #5
 80028da:	d1ed      	bne.n	80028b8 <HAL_I2S_DMAPause+0x20>
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80028dc:	6802      	ldr	r2, [r0, #0]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80028de:	4908      	ldr	r1, [pc, #32]	; (8002900 <HAL_I2S_DMAPause+0x68>)
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80028e0:	6853      	ldr	r3, [r2, #4]
 80028e2:	f023 0303 	bic.w	r3, r3, #3
 80028e6:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_I2S_DMAPause+0x6c>)
 80028ea:	428a      	cmp	r2, r1
 80028ec:	bf18      	it	ne
 80028ee:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	f022 0203 	bic.w	r2, r2, #3
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	e7dd      	b.n	80028b8 <HAL_I2S_DMAPause+0x20>
  __HAL_LOCK(hi2s);
 80028fc:	2002      	movs	r0, #2
}
 80028fe:	4770      	bx	lr
 8002900:	40003800 	.word	0x40003800
 8002904:	40003400 	.word	0x40003400

08002908 <HAL_I2S_DMAResume>:
  __HAL_LOCK(hi2s);
 8002908:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800290c:	2b01      	cmp	r3, #1
 800290e:	d039      	beq.n	8002984 <HAL_I2S_DMAResume+0x7c>
 8002910:	2301      	movs	r3, #1
 8002912:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002916:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800291a:	6803      	ldr	r3, [r0, #0]
 800291c:	2a03      	cmp	r2, #3
 800291e:	d10f      	bne.n	8002940 <HAL_I2S_DMAResume+0x38>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	f042 0202 	orr.w	r2, r2, #2
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002926:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002928:	69da      	ldr	r2, [r3, #28]
 800292a:	0552      	lsls	r2, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 800292c:	bf5e      	ittt	pl
 800292e:	69da      	ldrpl	r2, [r3, #28]
 8002930:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8002934:	61da      	strpl	r2, [r3, #28]
  __HAL_UNLOCK(hi2s);
 8002936:	2300      	movs	r3, #0
 8002938:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 800293c:	4618      	mov	r0, r3
 800293e:	4770      	bx	lr
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002940:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002944:	2a04      	cmp	r2, #4
 8002946:	d103      	bne.n	8002950 <HAL_I2S_DMAResume+0x48>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	e7ea      	b.n	8002926 <HAL_I2S_DMAResume+0x1e>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002950:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002954:	2a05      	cmp	r2, #5
 8002956:	d1e7      	bne.n	8002928 <HAL_I2S_DMAResume+0x20>
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002958:	685a      	ldr	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800295a:	490b      	ldr	r1, [pc, #44]	; (8002988 <HAL_I2S_DMAResume+0x80>)
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800295c:	f042 0203 	orr.w	r2, r2, #3
 8002960:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002962:	4a0a      	ldr	r2, [pc, #40]	; (800298c <HAL_I2S_DMAResume+0x84>)
 8002964:	428b      	cmp	r3, r1
 8002966:	bf18      	it	ne
 8002968:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 800296c:	6851      	ldr	r1, [r2, #4]
 800296e:	f041 0103 	orr.w	r1, r1, #3
 8002972:	6051      	str	r1, [r2, #4]
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8002974:	69d1      	ldr	r1, [r2, #28]
 8002976:	0549      	lsls	r1, r1, #21
      __HAL_I2SEXT_ENABLE(hi2s);
 8002978:	bf5e      	ittt	pl
 800297a:	69d1      	ldrpl	r1, [r2, #28]
 800297c:	f441 6180 	orrpl.w	r1, r1, #1024	; 0x400
 8002980:	61d1      	strpl	r1, [r2, #28]
 8002982:	e7d1      	b.n	8002928 <HAL_I2S_DMAResume+0x20>
  __HAL_LOCK(hi2s);
 8002984:	2002      	movs	r0, #2
}
 8002986:	4770      	bx	lr
 8002988:	40003800 	.word	0x40003800
 800298c:	40003400 	.word	0x40003400

08002990 <HAL_I2S_DMAStop>:
{
 8002990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002994:	6843      	ldr	r3, [r0, #4]
 8002996:	f433 7300 	bics.w	r3, r3, #512	; 0x200
{
 800299a:	b085      	sub	sp, #20
 800299c:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800299e:	d16c      	bne.n	8002a7a <HAL_I2S_DMAStop+0xea>
    if (hi2s->hdmatx != NULL)
 80029a0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d15f      	bne.n	8002a66 <HAL_I2S_DMAStop+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029a6:	2500      	movs	r5, #0
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80029a8:	2364      	movs	r3, #100	; 0x64
 80029aa:	2201      	movs	r2, #1
 80029ac:	2102      	movs	r1, #2
 80029ae:	4620      	mov	r0, r4
 80029b0:	f7ff fddd 	bl	800256e <I2S_WaitFlagStateUntilTimeout>
 80029b4:	b130      	cbz	r0, 80029c4 <HAL_I2S_DMAStop+0x34>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80029b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80029b8:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80029c0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80029c4:	2364      	movs	r3, #100	; 0x64
 80029c6:	2200      	movs	r2, #0
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	4620      	mov	r0, r4
 80029cc:	f7ff fdcf 	bl	800256e <I2S_WaitFlagStateUntilTimeout>
 80029d0:	b130      	cbz	r0, 80029e0 <HAL_I2S_DMAStop+0x50>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80029d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80029d4:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80029dc:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_I2S_DISABLE(hi2s);
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	69da      	ldr	r2, [r3, #28]
 80029e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e8:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80029ea:	2200      	movs	r2, #0
 80029ec:	9200      	str	r2, [sp, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	9200      	str	r2, [sp, #0]
 80029f2:	9a00      	ldr	r2, [sp, #0]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	f022 0202 	bic.w	r2, r2, #2
 80029fa:	605a      	str	r2, [r3, #4]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80029fc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d129      	bne.n	8002a58 <HAL_I2S_DMAStop+0xc8>
      if (hi2s->hdmarx != NULL)
 8002a04:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002a06:	b138      	cbz	r0, 8002a18 <HAL_I2S_DMAStop+0x88>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002a08:	f7fe ff7a 	bl	8001900 <HAL_DMA_Abort>
 8002a0c:	b120      	cbz	r0, 8002a18 <HAL_I2S_DMAStop+0x88>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a10:	f043 0308 	orr.w	r3, r3, #8
 8002a14:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002a16:	2501      	movs	r5, #1
      __HAL_I2SEXT_DISABLE(hi2s);
 8002a18:	6821      	ldr	r1, [r4, #0]
 8002a1a:	4a56      	ldr	r2, [pc, #344]	; (8002b74 <HAL_I2S_DMAStop+0x1e4>)
 8002a1c:	4b56      	ldr	r3, [pc, #344]	; (8002b78 <HAL_I2S_DMAStop+0x1e8>)
 8002a1e:	4291      	cmp	r1, r2
 8002a20:	bf18      	it	ne
 8002a22:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2c:	61da      	str	r2, [r3, #28]
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	9201      	str	r2, [sp, #4]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	9201      	str	r2, [sp, #4]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	9201      	str	r2, [sp, #4]
 8002a3a:	9a01      	ldr	r2, [sp, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	605a      	str	r2, [r3, #4]
      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8002a44:	6862      	ldr	r2, [r4, #4]
 8002a46:	2a00      	cmp	r2, #0
 8002a48:	d16c      	bne.n	8002b24 <HAL_I2S_DMAStop+0x194>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002a4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002a4c:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a52:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002a54:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2s->State = HAL_I2S_STATE_READY;
 8002a58:	2301      	movs	r3, #1
}
 8002a5a:	4628      	mov	r0, r5
  hi2s->State = HAL_I2S_STATE_READY;
 8002a5c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8002a60:	b005      	add	sp, #20
 8002a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002a66:	f7fe ff4b 	bl	8001900 <HAL_DMA_Abort>
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	d09b      	beq.n	80029a6 <HAL_I2S_DMAStop+0x16>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a70:	f043 0308 	orr.w	r3, r3, #8
 8002a74:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002a76:	2501      	movs	r5, #1
 8002a78:	e796      	b.n	80029a8 <HAL_I2S_DMAStop+0x18>
  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7e:	d177      	bne.n	8002b70 <HAL_I2S_DMAStop+0x1e0>
    if (hi2s->hdmarx != NULL)
 8002a80:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002a82:	2800      	cmp	r0, #0
 8002a84:	d150      	bne.n	8002b28 <HAL_I2S_DMAStop+0x198>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a86:	2500      	movs	r5, #0
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002a88:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	d135      	bne.n	8002afc <HAL_I2S_DMAStop+0x16c>
      if (hi2s->hdmatx != NULL)
 8002a90:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a92:	b138      	cbz	r0, 8002aa4 <HAL_I2S_DMAStop+0x114>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002a94:	f7fe ff34 	bl	8001900 <HAL_DMA_Abort>
 8002a98:	b120      	cbz	r0, 8002aa4 <HAL_I2S_DMAStop+0x114>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a9c:	f043 0308 	orr.w	r3, r3, #8
 8002aa0:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002aa2:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 8002aa4:	f7fe fdaa 	bl	80015fc <HAL_GetTick>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002aa8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8002b74 <HAL_I2S_DMAStop+0x1e4>
 8002aac:	4f32      	ldr	r7, [pc, #200]	; (8002b78 <HAL_I2S_DMAStop+0x1e8>)
      tickstart = HAL_GetTick();
 8002aae:	4606      	mov	r6, r0
          hi2s->State = HAL_I2S_STATE_READY;
 8002ab0:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	4543      	cmp	r3, r8
 8002ab8:	bf0c      	ite	eq
 8002aba:	463b      	moveq	r3, r7
 8002abc:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	079b      	lsls	r3, r3, #30
 8002ac4:	d53a      	bpl.n	8002b3c <HAL_I2S_DMAStop+0x1ac>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002ac6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8002b74 <HAL_I2S_DMAStop+0x1e4>
 8002aca:	4f2b      	ldr	r7, [pc, #172]	; (8002b78 <HAL_I2S_DMAStop+0x1e8>)
          hi2s->State = HAL_I2S_STATE_READY;
 8002acc:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	4543      	cmp	r3, r8
 8002ad4:	bf0c      	ite	eq
 8002ad6:	463b      	moveq	r3, r7
 8002ad8:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8002ae2:	d138      	bne.n	8002b56 <HAL_I2S_DMAStop+0x1c6>
      __HAL_I2SEXT_DISABLE(hi2s);
 8002ae4:	69d9      	ldr	r1, [r3, #28]
 8002ae6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002aea:	61d9      	str	r1, [r3, #28]
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002aec:	9202      	str	r2, [sp, #8]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	9202      	str	r2, [sp, #8]
 8002af2:	9a02      	ldr	r2, [sp, #8]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	f022 0202 	bic.w	r2, r2, #2
 8002afa:	605a      	str	r2, [r3, #4]
    __HAL_I2S_DISABLE(hi2s);
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b04:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b06:	2200      	movs	r2, #0
 8002b08:	9203      	str	r2, [sp, #12]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	9203      	str	r2, [sp, #12]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	9203      	str	r2, [sp, #12]
 8002b12:	9a03      	ldr	r2, [sp, #12]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	605a      	str	r2, [r3, #4]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002b1c:	6862      	ldr	r2, [r4, #4]
 8002b1e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002b22:	d092      	beq.n	8002a4a <HAL_I2S_DMAStop+0xba>
      READ_REG((hi2s->Instance)->DR);
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	e797      	b.n	8002a58 <HAL_I2S_DMAStop+0xc8>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002b28:	f7fe feea 	bl	8001900 <HAL_DMA_Abort>
 8002b2c:	2800      	cmp	r0, #0
 8002b2e:	d0aa      	beq.n	8002a86 <HAL_I2S_DMAStop+0xf6>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002b30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b32:	f043 0308 	orr.w	r3, r3, #8
 8002b36:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002b38:	2501      	movs	r5, #1
 8002b3a:	e7a5      	b.n	8002a88 <HAL_I2S_DMAStop+0xf8>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002b3c:	f7fe fd5e 	bl	80015fc <HAL_GetTick>
 8002b40:	1b80      	subs	r0, r0, r6
 8002b42:	2864      	cmp	r0, #100	; 0x64
 8002b44:	d9b6      	bls.n	8002ab4 <HAL_I2S_DMAStop+0x124>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002b46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 8002b4e:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 8002b50:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002b54:	e7ae      	b.n	8002ab4 <HAL_I2S_DMAStop+0x124>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002b56:	f7fe fd51 	bl	80015fc <HAL_GetTick>
 8002b5a:	1b80      	subs	r0, r0, r6
 8002b5c:	2864      	cmp	r0, #100	; 0x64
 8002b5e:	d9b7      	bls.n	8002ad0 <HAL_I2S_DMAStop+0x140>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002b60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 8002b68:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 8002b6a:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002b6e:	e7af      	b.n	8002ad0 <HAL_I2S_DMAStop+0x140>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b70:	2500      	movs	r5, #0
 8002b72:	e771      	b.n	8002a58 <HAL_I2S_DMAStop+0xc8>
 8002b74:	40003800 	.word	0x40003800
 8002b78:	40003400 	.word	0x40003400

08002b7c <I2S_DMATxHalfCplt>:
{
 8002b7c:	b508      	push	{r3, lr}
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002b7e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002b80:	f7fe fb68 	bl	8001254 <HAL_I2S_TxHalfCpltCallback>
}
 8002b84:	bd08      	pop	{r3, pc}

08002b86 <I2S_DMATxCplt>:
{
 8002b86:	b508      	push	{r3, lr}
 8002b88:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b8a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	b942      	cbnz	r2, 8002ba2 <I2S_DMATxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b90:	6801      	ldr	r1, [r0, #0]
 8002b92:	684b      	ldr	r3, [r1, #4]
 8002b94:	f023 0302 	bic.w	r3, r3, #2
 8002b98:	604b      	str	r3, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002b9a:	2301      	movs	r3, #1
    hi2s->TxXferCount = 0U;
 8002b9c:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002b9e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8002ba2:	f7fe fb4b 	bl	800123c <HAL_I2S_TxCpltCallback>
}
 8002ba6:	bd08      	pop	{r3, pc}

08002ba8 <I2S_DMARxHalfCplt>:
{
 8002ba8:	b508      	push	{r3, lr}
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002baa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002bac:	f7fe fca2 	bl	80014f4 <HAL_I2S_RxHalfCpltCallback>
}
 8002bb0:	bd08      	pop	{r3, pc}

08002bb2 <I2S_DMARxCplt>:
{
 8002bb2:	b508      	push	{r3, lr}
 8002bb4:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002bb6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002bb8:	69da      	ldr	r2, [r3, #28]
 8002bba:	b942      	cbnz	r2, 8002bce <I2S_DMARxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002bbc:	6801      	ldr	r1, [r0, #0]
 8002bbe:	684b      	ldr	r3, [r1, #4]
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	604b      	str	r3, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002bc6:	2301      	movs	r3, #1
    hi2s->RxXferCount = 0U;
 8002bc8:	8642      	strh	r2, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002bca:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 8002bce:	f7fe fc8d 	bl	80014ec <HAL_I2S_RxCpltCallback>
}
 8002bd2:	bd08      	pop	{r3, pc}

08002bd4 <I2S_IRQHandler>:
{
 8002bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002bd6:	6803      	ldr	r3, [r0, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	9201      	str	r2, [sp, #4]
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002bdc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002be0:	2a04      	cmp	r2, #4
{
 8002be2:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002be4:	d136      	bne.n	8002c54 <I2S_IRQHandler+0x80>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002be6:	9a01      	ldr	r2, [sp, #4]
 8002be8:	07d1      	lsls	r1, r2, #31
 8002bea:	d517      	bpl.n	8002c1c <I2S_IRQHandler+0x48>
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	0652      	lsls	r2, r2, #25
 8002bf0:	d514      	bpl.n	8002c1c <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002bf2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002bf4:	68d9      	ldr	r1, [r3, #12]
 8002bf6:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8002bfa:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002bfc:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8002bfe:	3a01      	subs	r2, #1
 8002c00:	b292      	uxth	r2, r2
 8002c02:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8002c04:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8002c06:	b292      	uxth	r2, r2
 8002c08:	b942      	cbnz	r2, 8002c1c <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c10:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8002c18:	f7fe fc68 	bl	80014ec <HAL_I2S_RxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c1c:	9b01      	ldr	r3, [sp, #4]
 8002c1e:	0659      	lsls	r1, r3, #25
 8002c20:	d518      	bpl.n	8002c54 <I2S_IRQHandler+0x80>
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	0692      	lsls	r2, r2, #26
 8002c28:	d514      	bpl.n	8002c54 <I2S_IRQHandler+0x80>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c30:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c32:	2200      	movs	r2, #0
 8002c34:	9202      	str	r2, [sp, #8]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	9202      	str	r2, [sp, #8]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	9302      	str	r3, [sp, #8]
 8002c3e:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f7fe fc54 	bl	80014fc <HAL_I2S_ErrorCallback>
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002c54:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d136      	bne.n	8002cca <I2S_IRQHandler+0xf6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002c5c:	9b01      	ldr	r3, [sp, #4]
 8002c5e:	079b      	lsls	r3, r3, #30
 8002c60:	d519      	bpl.n	8002c96 <I2S_IRQHandler+0xc2>
 8002c62:	6822      	ldr	r2, [r4, #0]
 8002c64:	6853      	ldr	r3, [r2, #4]
 8002c66:	0618      	lsls	r0, r3, #24
 8002c68:	d515      	bpl.n	8002c96 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c6c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002c70:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8002c72:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8002c74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002c7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	b94b      	cbnz	r3, 8002c96 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c82:	6853      	ldr	r3, [r2, #4]
 8002c84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c88:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8002c90:	4620      	mov	r0, r4
 8002c92:	f7fe fad3 	bl	800123c <HAL_I2S_TxCpltCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c96:	9b01      	ldr	r3, [sp, #4]
 8002c98:	0719      	lsls	r1, r3, #28
 8002c9a:	d516      	bpl.n	8002cca <I2S_IRQHandler+0xf6>
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	0692      	lsls	r2, r2, #26
 8002ca2:	d512      	bpl.n	8002cca <I2S_IRQHandler+0xf6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002caa:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cac:	2200      	movs	r2, #0
 8002cae:	9203      	str	r2, [sp, #12]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	9303      	str	r3, [sp, #12]
 8002cb4:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	f7fe fc19 	bl	80014fc <HAL_I2S_ErrorCallback>
}
 8002cca:	b004      	add	sp, #16
 8002ccc:	bd10      	pop	{r4, pc}

08002cce <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002cce:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002cd0:	6802      	ldr	r2, [r0, #0]
{
 8002cd2:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002cd4:	6853      	ldr	r3, [r2, #4]
 8002cd6:	f023 0303 	bic.w	r3, r3, #3
 8002cda:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002ce0:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002ce8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002cea:	f043 0308 	orr.w	r3, r3, #8
 8002cee:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8002cf0:	f7fe fc04 	bl	80014fc <HAL_I2S_ErrorCallback>
}
 8002cf4:	bd08      	pop	{r3, pc}

08002cf6 <HAL_I2S_GetState>:
  return hi2s->State;
 8002cf6:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8002cfa:	4770      	bx	lr

08002cfc <HAL_I2SEx_TxRxCpltCallback>:
 8002cfc:	4770      	bx	lr
	...

08002d00 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d00:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002d02:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002d04:	498e      	ldr	r1, [pc, #568]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002d06:	6893      	ldr	r3, [r2, #8]
{
 8002d08:	b086      	sub	sp, #24
 8002d0a:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002d0c:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002d0e:	4b8d      	ldr	r3, [pc, #564]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002d10:	428a      	cmp	r2, r1
 8002d12:	bf18      	it	ne
 8002d14:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002d18:	6899      	ldr	r1, [r3, #8]
 8002d1a:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002d1c:	6851      	ldr	r1, [r2, #4]
 8002d1e:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002d20:	6859      	ldr	r1, [r3, #4]
 8002d22:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d24:	6841      	ldr	r1, [r0, #4]
 8002d26:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8002d2a:	f040 8093 	bne.w	8002e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002d2e:	9b00      	ldr	r3, [sp, #0]
 8002d30:	0799      	lsls	r1, r3, #30
 8002d32:	d51a      	bpl.n	8002d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8002d34:	9b02      	ldr	r3, [sp, #8]
 8002d36:	061b      	lsls	r3, r3, #24
 8002d38:	d517      	bpl.n	8002d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002d3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d3c:	1c99      	adds	r1, r3, #2
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	6241      	str	r1, [r0, #36]	; 0x24
 8002d42:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8002d44:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d4c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	b95b      	cbnz	r3, 8002d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d52:	6853      	ldr	r3, [r2, #4]
 8002d54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d58:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8002d5a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	b923      	cbnz	r3, 8002d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d66:	f7ff ffc9 	bl	8002cfc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002d6a:	9b01      	ldr	r3, [sp, #4]
 8002d6c:	07d8      	lsls	r0, r3, #31
 8002d6e:	d522      	bpl.n	8002db6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8002d70:	9b03      	ldr	r3, [sp, #12]
 8002d72:	0659      	lsls	r1, r3, #25
 8002d74:	d51f      	bpl.n	8002db6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002d76:	6821      	ldr	r1, [r4, #0]
 8002d78:	4a71      	ldr	r2, [pc, #452]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8002d7a:	4b72      	ldr	r3, [pc, #456]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002d7c:	4291      	cmp	r1, r2
 8002d7e:	bf18      	it	ne
 8002d80:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002d84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d86:	68d9      	ldr	r1, [r3, #12]
 8002d88:	1c90      	adds	r0, r2, #2
 8002d8a:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002d8c:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8002d8e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8002d90:	3a01      	subs	r2, #1
 8002d92:	b292      	uxth	r2, r2
 8002d94:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d96:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	b962      	cbnz	r2, 8002db6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002da2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002da4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	b92b      	cbnz	r3, 8002db6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002db0:	4620      	mov	r0, r4
 8002db2:	f7ff ffa3 	bl	8002cfc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002db6:	9b01      	ldr	r3, [sp, #4]
 8002db8:	065a      	lsls	r2, r3, #25
 8002dba:	d522      	bpl.n	8002e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8002dbc:	9b03      	ldr	r3, [sp, #12]
 8002dbe:	069b      	lsls	r3, r3, #26
 8002dc0:	d51f      	bpl.n	8002e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	495e      	ldr	r1, [pc, #376]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8002dc6:	4a5f      	ldr	r2, [pc, #380]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002dc8:	428b      	cmp	r3, r1
 8002dca:	bf18      	it	ne
 8002dcc:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8002dd0:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dd2:	6851      	ldr	r1, [r2, #4]
 8002dd4:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8002dd8:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002de0:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002de2:	2200      	movs	r2, #0
 8002de4:	9204      	str	r2, [sp, #16]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	9204      	str	r2, [sp, #16]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	9304      	str	r3, [sp, #16]
 8002dee:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8002df0:	2301      	movs	r3, #1
 8002df2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002df6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002dfe:	f7fe fb7d 	bl	80014fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e02:	9b00      	ldr	r3, [sp, #0]
 8002e04:	0718      	lsls	r0, r3, #28
 8002e06:	f140 8098 	bpl.w	8002f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8002e0a:	9b02      	ldr	r3, [sp, #8]
 8002e0c:	0699      	lsls	r1, r3, #26
 8002e0e:	f140 8094 	bpl.w	8002f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e12:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e14:	494a      	ldr	r1, [pc, #296]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e1c:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e1e:	4a49      	ldr	r2, [pc, #292]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002e20:	428b      	cmp	r3, r1
 8002e22:	bf18      	it	ne
 8002e24:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002e28:	6851      	ldr	r1, [r2, #4]
 8002e2a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8002e2e:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e30:	2200      	movs	r2, #0
 8002e32:	9205      	str	r2, [sp, #20]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	9305      	str	r3, [sp, #20]
 8002e38:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e40:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002e42:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002e4a:	b006      	add	sp, #24
 8002e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8002e50:	f7fe bb54 	b.w	80014fc <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002e54:	9a01      	ldr	r2, [sp, #4]
 8002e56:	0792      	lsls	r2, r2, #30
 8002e58:	d51a      	bpl.n	8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 8002e5a:	9a03      	ldr	r2, [sp, #12]
 8002e5c:	0611      	lsls	r1, r2, #24
 8002e5e:	d517      	bpl.n	8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002e60:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002e62:	1c91      	adds	r1, r2, #2
 8002e64:	8812      	ldrh	r2, [r2, #0]
 8002e66:	6241      	str	r1, [r0, #36]	; 0x24
 8002e68:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e6a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002e6c:	3a01      	subs	r2, #1
 8002e6e:	b292      	uxth	r2, r2
 8002e70:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002e72:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002e74:	b292      	uxth	r2, r2
 8002e76:	b95a      	cbnz	r2, 8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e7e:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8002e80:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	b923      	cbnz	r3, 8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 8002e86:	2301      	movs	r3, #1
 8002e88:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e8c:	f7ff ff36 	bl	8002cfc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002e90:	9b00      	ldr	r3, [sp, #0]
 8002e92:	07da      	lsls	r2, r3, #31
 8002e94:	d51c      	bpl.n	8002ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 8002e96:	9b02      	ldr	r3, [sp, #8]
 8002e98:	065b      	lsls	r3, r3, #25
 8002e9a:	d519      	bpl.n	8002ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002e9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e9e:	6822      	ldr	r2, [r4, #0]
 8002ea0:	1c98      	adds	r0, r3, #2
 8002ea2:	68d1      	ldr	r1, [r2, #12]
 8002ea4:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002ea6:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8002ea8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8002eb0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	b963      	cbnz	r3, 8002ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002eb6:	6853      	ldr	r3, [r2, #4]
 8002eb8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002ebc:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8002ebe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	b92b      	cbnz	r3, 8002ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f7ff ff16 	bl	8002cfc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ed0:	9b00      	ldr	r3, [sp, #0]
 8002ed2:	0658      	lsls	r0, r3, #25
 8002ed4:	d51b      	bpl.n	8002f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 8002ed6:	9b02      	ldr	r3, [sp, #8]
 8002ed8:	0699      	lsls	r1, r3, #26
 8002eda:	d518      	bpl.n	8002f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002edc:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ede:	4918      	ldr	r1, [pc, #96]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ee0:	6853      	ldr	r3, [r2, #4]
 8002ee2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002ee6:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ee8:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002eea:	428a      	cmp	r2, r1
 8002eec:	bf18      	it	ne
 8002eee:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8002ef2:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002efa:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f04:	f043 0302 	orr.w	r3, r3, #2
 8002f08:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002f0a:	f7fe faf7 	bl	80014fc <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002f0e:	9b01      	ldr	r3, [sp, #4]
 8002f10:	071a      	lsls	r2, r3, #28
 8002f12:	d512      	bpl.n	8002f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8002f14:	9b03      	ldr	r3, [sp, #12]
 8002f16:	069b      	lsls	r3, r3, #26
 8002f18:	d50f      	bpl.n	8002f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	4908      	ldr	r1, [pc, #32]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002f20:	428a      	cmp	r2, r1
 8002f22:	bf18      	it	ne
 8002f24:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002f28:	6859      	ldr	r1, [r3, #4]
 8002f2a:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8002f2e:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f30:	6853      	ldr	r3, [r2, #4]
 8002f32:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002f36:	6053      	str	r3, [r2, #4]
 8002f38:	e77f      	b.n	8002e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 8002f3a:	b006      	add	sp, #24
 8002f3c:	bd10      	pop	{r4, pc}
 8002f3e:	bf00      	nop
 8002f40:	40003800 	.word	0x40003800
 8002f44:	40003400 	.word	0x40003400

08002f48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f4c:	4604      	mov	r4, r0
 8002f4e:	b340      	cbz	r0, 8002fa2 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f50:	6803      	ldr	r3, [r0, #0]
 8002f52:	07dd      	lsls	r5, r3, #31
 8002f54:	d410      	bmi.n	8002f78 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	0798      	lsls	r0, r3, #30
 8002f5a:	d45e      	bmi.n	800301a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	071a      	lsls	r2, r3, #28
 8002f60:	f100 80a0 	bmi.w	80030a4 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	075b      	lsls	r3, r3, #29
 8002f68:	f100 80be 	bmi.w	80030e8 <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6c:	69a0      	ldr	r0, [r4, #24]
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	f040 811f 	bne.w	80031b2 <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002f74:	2000      	movs	r0, #0
 8002f76:	e02b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f78:	4ba6      	ldr	r3, [pc, #664]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	f002 020c 	and.w	r2, r2, #12
 8002f80:	2a04      	cmp	r2, #4
 8002f82:	d007      	beq.n	8002f94 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f8a:	2a08      	cmp	r2, #8
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	0251      	lsls	r1, r2, #9
 8002f92:	d508      	bpl.n	8002fa6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	4b9f      	ldr	r3, [pc, #636]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	039a      	lsls	r2, r3, #14
 8002f9a:	d5dc      	bpl.n	8002f56 <HAL_RCC_OscConfig+0xe>
 8002f9c:	6863      	ldr	r3, [r4, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1d9      	bne.n	8002f56 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	e014      	b.n	8002fd0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa6:	6862      	ldr	r2, [r4, #4]
 8002fa8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002fac:	d113      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x8e>
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fb4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002fb6:	f7fe fb21 	bl	80015fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4e96      	ldr	r6, [pc, #600]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8002fbc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	6833      	ldr	r3, [r6, #0]
 8002fc0:	039b      	lsls	r3, r3, #14
 8002fc2:	d4c8      	bmi.n	8002f56 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fb1a 	bl	80015fc <HAL_GetTick>
 8002fc8:	1b40      	subs	r0, r0, r5
 8002fca:	2864      	cmp	r0, #100	; 0x64
 8002fcc:	d9f7      	bls.n	8002fbe <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8002fce:	2003      	movs	r0, #3
}
 8002fd0:	b002      	add	sp, #8
 8002fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd6:	4d8f      	ldr	r5, [pc, #572]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
 8002fd8:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002fdc:	682b      	ldr	r3, [r5, #0]
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_OscConfig+0xa8>
 8002fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fe4:	602b      	str	r3, [r5, #0]
 8002fe6:	682b      	ldr	r3, [r5, #0]
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fec:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fee:	e7e2      	b.n	8002fb6 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff4:	602b      	str	r3, [r5, #0]
 8002ff6:	682b      	ldr	r3, [r5, #0]
 8002ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffc:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ffe:	2a00      	cmp	r2, #0
 8003000:	d1d9      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8003002:	f7fe fafb 	bl	80015fc <HAL_GetTick>
 8003006:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003008:	682b      	ldr	r3, [r5, #0]
 800300a:	039f      	lsls	r7, r3, #14
 800300c:	d5a3      	bpl.n	8002f56 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800300e:	f7fe faf5 	bl	80015fc <HAL_GetTick>
 8003012:	1b80      	subs	r0, r0, r6
 8003014:	2864      	cmp	r0, #100	; 0x64
 8003016:	d9f7      	bls.n	8003008 <HAL_RCC_OscConfig+0xc0>
 8003018:	e7d9      	b.n	8002fce <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800301a:	4b7e      	ldr	r3, [pc, #504]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	f012 0f0c 	tst.w	r2, #12
 8003022:	d007      	beq.n	8003034 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800302a:	2a08      	cmp	r2, #8
 800302c:	d111      	bne.n	8003052 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	025e      	lsls	r6, r3, #9
 8003032:	d40e      	bmi.n	8003052 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003034:	4b77      	ldr	r3, [pc, #476]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	0795      	lsls	r5, r2, #30
 800303a:	d502      	bpl.n	8003042 <HAL_RCC_OscConfig+0xfa>
 800303c:	68e2      	ldr	r2, [r4, #12]
 800303e:	2a01      	cmp	r2, #1
 8003040:	d1af      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	6921      	ldr	r1, [r4, #16]
 8003046:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800304a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800304e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003050:	e784      	b.n	8002f5c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003052:	68e2      	ldr	r2, [r4, #12]
 8003054:	4b70      	ldr	r3, [pc, #448]	; (8003218 <HAL_RCC_OscConfig+0x2d0>)
 8003056:	b1b2      	cbz	r2, 8003086 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8003058:	2201      	movs	r2, #1
 800305a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800305c:	f7fe face 	bl	80015fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	4d6c      	ldr	r5, [pc, #432]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8003062:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003064:	682b      	ldr	r3, [r5, #0]
 8003066:	0798      	lsls	r0, r3, #30
 8003068:	d507      	bpl.n	800307a <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306a:	682b      	ldr	r3, [r5, #0]
 800306c:	6922      	ldr	r2, [r4, #16]
 800306e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003072:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003076:	602b      	str	r3, [r5, #0]
 8003078:	e770      	b.n	8002f5c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307a:	f7fe fabf 	bl	80015fc <HAL_GetTick>
 800307e:	1b80      	subs	r0, r0, r6
 8003080:	2802      	cmp	r0, #2
 8003082:	d9ef      	bls.n	8003064 <HAL_RCC_OscConfig+0x11c>
 8003084:	e7a3      	b.n	8002fce <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8003086:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003088:	f7fe fab8 	bl	80015fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308c:	4e61      	ldr	r6, [pc, #388]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800308e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003090:	6833      	ldr	r3, [r6, #0]
 8003092:	0799      	lsls	r1, r3, #30
 8003094:	f57f af62 	bpl.w	8002f5c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003098:	f7fe fab0 	bl	80015fc <HAL_GetTick>
 800309c:	1b40      	subs	r0, r0, r5
 800309e:	2802      	cmp	r0, #2
 80030a0:	d9f6      	bls.n	8003090 <HAL_RCC_OscConfig+0x148>
 80030a2:	e794      	b.n	8002fce <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030a4:	6962      	ldr	r2, [r4, #20]
 80030a6:	4b5d      	ldr	r3, [pc, #372]	; (800321c <HAL_RCC_OscConfig+0x2d4>)
 80030a8:	b17a      	cbz	r2, 80030ca <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80030ae:	f7fe faa5 	bl	80015fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b2:	4e58      	ldr	r6, [pc, #352]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80030b4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b6:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80030b8:	079f      	lsls	r7, r3, #30
 80030ba:	f53f af53 	bmi.w	8002f64 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030be:	f7fe fa9d 	bl	80015fc <HAL_GetTick>
 80030c2:	1b40      	subs	r0, r0, r5
 80030c4:	2802      	cmp	r0, #2
 80030c6:	d9f6      	bls.n	80030b6 <HAL_RCC_OscConfig+0x16e>
 80030c8:	e781      	b.n	8002fce <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80030ca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80030cc:	f7fe fa96 	bl	80015fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d0:	4e50      	ldr	r6, [pc, #320]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80030d2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80030d6:	0798      	lsls	r0, r3, #30
 80030d8:	f57f af44 	bpl.w	8002f64 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030dc:	f7fe fa8e 	bl	80015fc <HAL_GetTick>
 80030e0:	1b40      	subs	r0, r0, r5
 80030e2:	2802      	cmp	r0, #2
 80030e4:	d9f6      	bls.n	80030d4 <HAL_RCC_OscConfig+0x18c>
 80030e6:	e772      	b.n	8002fce <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e8:	4b4a      	ldr	r3, [pc, #296]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
 80030ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ec:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80030f0:	d128      	bne.n	8003144 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	9201      	str	r2, [sp, #4]
 80030f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003106:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003108:	4d45      	ldr	r5, [pc, #276]	; (8003220 <HAL_RCC_OscConfig+0x2d8>)
 800310a:	682b      	ldr	r3, [r5, #0]
 800310c:	05d9      	lsls	r1, r3, #23
 800310e:	d51b      	bpl.n	8003148 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003110:	68a3      	ldr	r3, [r4, #8]
 8003112:	4d40      	ldr	r5, [pc, #256]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
 8003114:	2b01      	cmp	r3, #1
 8003116:	d127      	bne.n	8003168 <HAL_RCC_OscConfig+0x220>
 8003118:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003120:	f7fe fa6c 	bl	80015fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003124:	4e3b      	ldr	r6, [pc, #236]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8003126:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800312e:	079b      	lsls	r3, r3, #30
 8003130:	d539      	bpl.n	80031a6 <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8003132:	2f00      	cmp	r7, #0
 8003134:	f43f af1a 	beq.w	8002f6c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003138:	4a36      	ldr	r2, [pc, #216]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
 800313a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800313c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
 8003142:	e713      	b.n	8002f6c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003144:	2700      	movs	r7, #0
 8003146:	e7df      	b.n	8003108 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003150:	f7fe fa54 	bl	80015fc <HAL_GetTick>
 8003154:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003156:	682b      	ldr	r3, [r5, #0]
 8003158:	05da      	lsls	r2, r3, #23
 800315a:	d4d9      	bmi.n	8003110 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315c:	f7fe fa4e 	bl	80015fc <HAL_GetTick>
 8003160:	1b80      	subs	r0, r0, r6
 8003162:	2802      	cmp	r0, #2
 8003164:	d9f7      	bls.n	8003156 <HAL_RCC_OscConfig+0x20e>
 8003166:	e732      	b.n	8002fce <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003168:	2b05      	cmp	r3, #5
 800316a:	d104      	bne.n	8003176 <HAL_RCC_OscConfig+0x22e>
 800316c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800316e:	f043 0304 	orr.w	r3, r3, #4
 8003172:	672b      	str	r3, [r5, #112]	; 0x70
 8003174:	e7d0      	b.n	8003118 <HAL_RCC_OscConfig+0x1d0>
 8003176:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	672a      	str	r2, [r5, #112]	; 0x70
 800317e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003180:	f022 0204 	bic.w	r2, r2, #4
 8003184:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1ca      	bne.n	8003120 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 800318a:	f7fe fa37 	bl	80015fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003192:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003194:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003196:	0798      	lsls	r0, r3, #30
 8003198:	d5cb      	bpl.n	8003132 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7fe fa2f 	bl	80015fc <HAL_GetTick>
 800319e:	1b80      	subs	r0, r0, r6
 80031a0:	4540      	cmp	r0, r8
 80031a2:	d9f7      	bls.n	8003194 <HAL_RCC_OscConfig+0x24c>
 80031a4:	e713      	b.n	8002fce <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f7fe fa29 	bl	80015fc <HAL_GetTick>
 80031aa:	1b40      	subs	r0, r0, r5
 80031ac:	4540      	cmp	r0, r8
 80031ae:	d9bd      	bls.n	800312c <HAL_RCC_OscConfig+0x1e4>
 80031b0:	e70d      	b.n	8002fce <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031b2:	4d18      	ldr	r5, [pc, #96]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
 80031b4:	68ab      	ldr	r3, [r5, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d047      	beq.n	800324e <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031be:	4e19      	ldr	r6, [pc, #100]	; (8003224 <HAL_RCC_OscConfig+0x2dc>)
 80031c0:	2300      	movs	r3, #0
 80031c2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80031c4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c6:	d135      	bne.n	8003234 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 80031c8:	f7fe fa18 	bl	80015fc <HAL_GetTick>
 80031cc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ce:	682b      	ldr	r3, [r5, #0]
 80031d0:	0199      	lsls	r1, r3, #6
 80031d2:	d429      	bmi.n	8003228 <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031d4:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80031d8:	4313      	orrs	r3, r2
 80031da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031dc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80031e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80031e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80031e8:	0852      	lsrs	r2, r2, #1
 80031ea:	3a01      	subs	r2, #1
 80031ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031f0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80031f2:	2301      	movs	r3, #1
 80031f4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80031f6:	f7fe fa01 	bl	80015fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fa:	4d06      	ldr	r5, [pc, #24]	; (8003214 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80031fc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fe:	682b      	ldr	r3, [r5, #0]
 8003200:	019a      	lsls	r2, r3, #6
 8003202:	f53f aeb7 	bmi.w	8002f74 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003206:	f7fe f9f9 	bl	80015fc <HAL_GetTick>
 800320a:	1b00      	subs	r0, r0, r4
 800320c:	2802      	cmp	r0, #2
 800320e:	d9f6      	bls.n	80031fe <HAL_RCC_OscConfig+0x2b6>
 8003210:	e6dd      	b.n	8002fce <HAL_RCC_OscConfig+0x86>
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	42470000 	.word	0x42470000
 800321c:	42470e80 	.word	0x42470e80
 8003220:	40007000 	.word	0x40007000
 8003224:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003228:	f7fe f9e8 	bl	80015fc <HAL_GetTick>
 800322c:	1bc0      	subs	r0, r0, r7
 800322e:	2802      	cmp	r0, #2
 8003230:	d9cd      	bls.n	80031ce <HAL_RCC_OscConfig+0x286>
 8003232:	e6cc      	b.n	8002fce <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8003234:	f7fe f9e2 	bl	80015fc <HAL_GetTick>
 8003238:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	682b      	ldr	r3, [r5, #0]
 800323c:	019b      	lsls	r3, r3, #6
 800323e:	f57f ae99 	bpl.w	8002f74 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003242:	f7fe f9db 	bl	80015fc <HAL_GetTick>
 8003246:	1b00      	subs	r0, r0, r4
 8003248:	2802      	cmp	r0, #2
 800324a:	d9f6      	bls.n	800323a <HAL_RCC_OscConfig+0x2f2>
 800324c:	e6bf      	b.n	8002fce <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800324e:	2801      	cmp	r0, #1
 8003250:	f43f aebe 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8003254:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003256:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003258:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800325c:	4291      	cmp	r1, r2
 800325e:	f47f aea0 	bne.w	8002fa2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003264:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003268:	428a      	cmp	r2, r1
 800326a:	f47f ae9a 	bne.w	8002fa2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800326e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003270:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003274:	401a      	ands	r2, r3
 8003276:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800327a:	f47f ae92 	bne.w	8002fa2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800327e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003280:	0852      	lsrs	r2, r2, #1
 8003282:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003286:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003288:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800328c:	f47f ae89 	bne.w	8002fa2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003290:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003292:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003296:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800329a:	f43f ae6b 	beq.w	8002f74 <HAL_RCC_OscConfig+0x2c>
 800329e:	e680      	b.n	8002fa2 <HAL_RCC_OscConfig+0x5a>

080032a0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a0:	4913      	ldr	r1, [pc, #76]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80032a2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a4:	688b      	ldr	r3, [r1, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d01c      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x48>
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d11c      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032b4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032b8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032bc:	bf14      	ite	ne
 80032be:	480d      	ldrne	r0, [pc, #52]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c0:	480d      	ldreq	r0, [pc, #52]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80032c6:	bf18      	it	ne
 80032c8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ce:	fba1 0100 	umull	r0, r1, r1, r0
 80032d2:	f7fc ff79 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x50>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80032de:	3301      	adds	r3, #1
 80032e0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80032e2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80032e6:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e8:	4802      	ldr	r0, [pc, #8]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x54>)
 80032ea:	e7fc      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80032ec:	4802      	ldr	r0, [pc, #8]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80032ee:	e7fa      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x46>
 80032f0:	40023800 	.word	0x40023800
 80032f4:	007a1200 	.word	0x007a1200
 80032f8:	00f42400 	.word	0x00f42400

080032fc <HAL_RCC_ClockConfig>:
{
 80032fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003300:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003302:	4604      	mov	r4, r0
 8003304:	b910      	cbnz	r0, 800330c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003306:	2001      	movs	r0, #1
}
 8003308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800330c:	4b44      	ldr	r3, [pc, #272]	; (8003420 <HAL_RCC_ClockConfig+0x124>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	f002 0207 	and.w	r2, r2, #7
 8003314:	428a      	cmp	r2, r1
 8003316:	d328      	bcc.n	800336a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003318:	6822      	ldr	r2, [r4, #0]
 800331a:	0797      	lsls	r7, r2, #30
 800331c:	d42d      	bmi.n	800337a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331e:	07d0      	lsls	r0, r2, #31
 8003320:	d441      	bmi.n	80033a6 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003322:	4b3f      	ldr	r3, [pc, #252]	; (8003420 <HAL_RCC_ClockConfig+0x124>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	f002 0207 	and.w	r2, r2, #7
 800332a:	42aa      	cmp	r2, r5
 800332c:	d866      	bhi.n	80033fc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332e:	6822      	ldr	r2, [r4, #0]
 8003330:	0751      	lsls	r1, r2, #29
 8003332:	d46c      	bmi.n	800340e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003334:	0713      	lsls	r3, r2, #28
 8003336:	d507      	bpl.n	8003348 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003338:	4a3a      	ldr	r2, [pc, #232]	; (8003424 <HAL_RCC_ClockConfig+0x128>)
 800333a:	6921      	ldr	r1, [r4, #16]
 800333c:	6893      	ldr	r3, [r2, #8]
 800333e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003342:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003346:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003348:	f7ff ffaa 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 800334c:	4b35      	ldr	r3, [pc, #212]	; (8003424 <HAL_RCC_ClockConfig+0x128>)
 800334e:	4a36      	ldr	r2, [pc, #216]	; (8003428 <HAL_RCC_ClockConfig+0x12c>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003356:	5cd3      	ldrb	r3, [r2, r3]
 8003358:	40d8      	lsrs	r0, r3
 800335a:	4b34      	ldr	r3, [pc, #208]	; (800342c <HAL_RCC_ClockConfig+0x130>)
 800335c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800335e:	4b34      	ldr	r3, [pc, #208]	; (8003430 <HAL_RCC_ClockConfig+0x134>)
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	f7fe f907 	bl	8001574 <HAL_InitTick>
  return HAL_OK;
 8003366:	2000      	movs	r0, #0
 8003368:	e7ce      	b.n	8003308 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	b2ca      	uxtb	r2, r1
 800336c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	428b      	cmp	r3, r1
 8003376:	d1c6      	bne.n	8003306 <HAL_RCC_ClockConfig+0xa>
 8003378:	e7ce      	b.n	8003318 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337a:	4b2a      	ldr	r3, [pc, #168]	; (8003424 <HAL_RCC_ClockConfig+0x128>)
 800337c:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003380:	bf1e      	ittt	ne
 8003382:	6899      	ldrne	r1, [r3, #8]
 8003384:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8003388:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338a:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800338c:	bf42      	ittt	mi
 800338e:	6899      	ldrmi	r1, [r3, #8]
 8003390:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8003394:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003396:	4923      	ldr	r1, [pc, #140]	; (8003424 <HAL_RCC_ClockConfig+0x128>)
 8003398:	68a0      	ldr	r0, [r4, #8]
 800339a:	688b      	ldr	r3, [r1, #8]
 800339c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033a0:	4303      	orrs	r3, r0
 80033a2:	608b      	str	r3, [r1, #8]
 80033a4:	e7bb      	b.n	800331e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a6:	6862      	ldr	r2, [r4, #4]
 80033a8:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <HAL_RCC_ClockConfig+0x128>)
 80033aa:	2a01      	cmp	r2, #1
 80033ac:	d11c      	bne.n	80033e8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b4:	d0a7      	beq.n	8003306 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b6:	4e1b      	ldr	r6, [pc, #108]	; (8003424 <HAL_RCC_ClockConfig+0x128>)
 80033b8:	68b3      	ldr	r3, [r6, #8]
 80033ba:	f023 0303 	bic.w	r3, r3, #3
 80033be:	4313      	orrs	r3, r2
 80033c0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80033c2:	f7fe f91b 	bl	80015fc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80033ca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033cc:	68b3      	ldr	r3, [r6, #8]
 80033ce:	6862      	ldr	r2, [r4, #4]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80033d8:	d0a3      	beq.n	8003322 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033da:	f7fe f90f 	bl	80015fc <HAL_GetTick>
 80033de:	1bc0      	subs	r0, r0, r7
 80033e0:	4540      	cmp	r0, r8
 80033e2:	d9f3      	bls.n	80033cc <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80033e4:	2003      	movs	r0, #3
 80033e6:	e78f      	b.n	8003308 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e8:	1e91      	subs	r1, r2, #2
 80033ea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ec:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ee:	d802      	bhi.n	80033f6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033f4:	e7de      	b.n	80033b4 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f6:	f013 0f02 	tst.w	r3, #2
 80033fa:	e7db      	b.n	80033b4 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fc:	b2ea      	uxtb	r2, r5
 80033fe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	42ab      	cmp	r3, r5
 8003408:	f47f af7d 	bne.w	8003306 <HAL_RCC_ClockConfig+0xa>
 800340c:	e78f      	b.n	800332e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800340e:	4905      	ldr	r1, [pc, #20]	; (8003424 <HAL_RCC_ClockConfig+0x128>)
 8003410:	68e0      	ldr	r0, [r4, #12]
 8003412:	688b      	ldr	r3, [r1, #8]
 8003414:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003418:	4303      	orrs	r3, r0
 800341a:	608b      	str	r3, [r1, #8]
 800341c:	e78a      	b.n	8003334 <HAL_RCC_ClockConfig+0x38>
 800341e:	bf00      	nop
 8003420:	40023c00 	.word	0x40023c00
 8003424:	40023800 	.word	0x40023800
 8003428:	080068d0 	.word	0x080068d0
 800342c:	20000084 	.word	0x20000084
 8003430:	2000008c 	.word	0x2000008c

08003434 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003434:	4b04      	ldr	r3, [pc, #16]	; (8003448 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003436:	4a05      	ldr	r2, [pc, #20]	; (800344c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800343e:	5cd3      	ldrb	r3, [r2, r3]
 8003440:	4a03      	ldr	r2, [pc, #12]	; (8003450 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003442:	6810      	ldr	r0, [r2, #0]
}
 8003444:	40d8      	lsrs	r0, r3
 8003446:	4770      	bx	lr
 8003448:	40023800 	.word	0x40023800
 800344c:	080068e0 	.word	0x080068e0
 8003450:	20000084 	.word	0x20000084

08003454 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003454:	6803      	ldr	r3, [r0, #0]
 8003456:	f013 0f05 	tst.w	r3, #5
{
 800345a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800345c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800345e:	d105      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	f013 0302 	ands.w	r3, r3, #2
 8003466:	d129      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x68>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003468:	2000      	movs	r0, #0
 800346a:	e025      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_PLLI2S_DISABLE();
 800346c:	4f41      	ldr	r7, [pc, #260]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800346e:	4e42      	ldr	r6, [pc, #264]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8003470:	2300      	movs	r3, #0
 8003472:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8003474:	f7fe f8c2 	bl	80015fc <HAL_GetTick>
 8003478:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800347a:	6833      	ldr	r3, [r6, #0]
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	d415      	bmi.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003480:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8003484:	071b      	lsls	r3, r3, #28
 8003486:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800348a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800348e:	2301      	movs	r3, #1
 8003490:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8003492:	f7fe f8b3 	bl	80015fc <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003496:	4e38      	ldr	r6, [pc, #224]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8003498:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800349a:	6833      	ldr	r3, [r6, #0]
 800349c:	0118      	lsls	r0, r3, #4
 800349e:	d4df      	bmi.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80034a0:	f7fe f8ac 	bl	80015fc <HAL_GetTick>
 80034a4:	1b40      	subs	r0, r0, r5
 80034a6:	2802      	cmp	r0, #2
 80034a8:	d9f7      	bls.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x46>
 80034aa:	e004      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80034ac:	f7fe f8a6 	bl	80015fc <HAL_GetTick>
 80034b0:	1b40      	subs	r0, r0, r5
 80034b2:	2802      	cmp	r0, #2
 80034b4:	d9e1      	bls.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 80034b6:	2003      	movs	r0, #3
}
 80034b8:	b003      	add	sp, #12
 80034ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80034bc:	2300      	movs	r3, #0
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 80034c2:	4d2e      	ldr	r5, [pc, #184]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80034c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80034d6:	682b      	ldr	r3, [r5, #0]
 80034d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034dc:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80034de:	f7fe f88d 	bl	80015fc <HAL_GetTick>
 80034e2:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034e4:	682b      	ldr	r3, [r5, #0]
 80034e6:	05d9      	lsls	r1, r3, #23
 80034e8:	d51a      	bpl.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034ea:	4d23      	ldr	r5, [pc, #140]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80034ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034ee:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80034f2:	d11b      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034f4:	68e3      	ldr	r3, [r4, #12]
 80034f6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80034fa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80034fe:	4a1e      	ldr	r2, [pc, #120]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003500:	d133      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003502:	6891      	ldr	r1, [r2, #8]
 8003504:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8003508:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800350c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8003510:	4301      	orrs	r1, r0
 8003512:	6091      	str	r1, [r2, #8]
 8003514:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351a:	430b      	orrs	r3, r1
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
 800351e:	e7a3      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003520:	f7fe f86c 	bl	80015fc <HAL_GetTick>
 8003524:	1b80      	subs	r0, r0, r6
 8003526:	2802      	cmp	r0, #2
 8003528:	d9dc      	bls.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800352a:	e7c4      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800352c:	68e2      	ldr	r2, [r4, #12]
 800352e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003532:	4293      	cmp	r3, r2
 8003534:	d0de      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003536:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003538:	4a11      	ldr	r2, [pc, #68]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800353a:	2101      	movs	r1, #1
 800353c:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800353e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003542:	2100      	movs	r1, #0
 8003544:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8003546:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003548:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800354a:	07da      	lsls	r2, r3, #31
 800354c:	d5d2      	bpl.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        tickstart = HAL_GetTick();
 800354e:	f7fe f855 	bl	80015fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003556:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003558:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800355a:	079b      	lsls	r3, r3, #30
 800355c:	d4ca      	bmi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fe f84d 	bl	80015fc <HAL_GetTick>
 8003562:	1b80      	subs	r0, r0, r6
 8003564:	42b8      	cmp	r0, r7
 8003566:	d9f7      	bls.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003568:	e7a5      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800356a:	6891      	ldr	r1, [r2, #8]
 800356c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003570:	e7cf      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003572:	bf00      	nop
 8003574:	42470068 	.word	0x42470068
 8003578:	40023800 	.word	0x40023800
 800357c:	40007000 	.word	0x40007000
 8003580:	42470e40 	.word	0x42470e40

08003584 <HAL_RCCEx_GetPeriphCLKConfig>:

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8003584:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8003586:	2303      	movs	r3, #3
 8003588:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800358a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800358e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003592:	6043      	str	r3, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003594:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8003598:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800359c:	6083      	str	r3, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800359e:	6891      	ldr	r1, [r2, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80035a0:	6f13      	ldr	r3, [r2, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80035a2:	f401 12f8 	and.w	r2, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80035a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60c3      	str	r3, [r0, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80035ae:	4770      	bx	lr
 80035b0:	40023800 	.word	0x40023800

080035b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80035b4:	2801      	cmp	r0, #1
 80035b6:	d11a      	bne.n	80035ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80035ba:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 80035bc:	0212      	lsls	r2, r2, #8
 80035be:	d416      	bmi.n	80035ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035c0:	685a      	ldr	r2, [r3, #4]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80035c2:	490c      	ldr	r1, [pc, #48]	; (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035c4:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035c6:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80035c8:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035cc:	bf4c      	ite	mi
 80035ce:	4b0a      	ldrmi	r3, [pc, #40]	; (80035f8 <HAL_RCCEx_GetPeriphCLKFreq+0x44>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035d0:	4b0a      	ldrpl	r3, [pc, #40]	; (80035fc <HAL_RCCEx_GetPeriphCLKFreq+0x48>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035d2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035d6:	fbb3 f3f0 	udiv	r3, r3, r0
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80035da:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80035de:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80035e2:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80035e4:	f3c0 7002 	ubfx	r0, r0, #28, #3
 80035e8:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 80035ec:	4770      	bx	lr
 80035ee:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	007a1200 	.word	0x007a1200
 80035fc:	00f42400 	.word	0x00f42400

08003600 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003604:	461f      	mov	r7, r3
 8003606:	4689      	mov	r9, r1
 8003608:	4690      	mov	r8, r2
 800360a:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800360c:	f7fd fff6 	bl	80015fc <HAL_GetTick>
 8003610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003612:	443b      	add	r3, r7
 8003614:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8003616:	f7fd fff1 	bl	80015fc <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800361a:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 800361c:	681e      	ldr	r6, [r3, #0]
 800361e:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8003622:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8003624:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003626:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003628:	6822      	ldr	r2, [r4, #0]
 800362a:	6893      	ldr	r3, [r2, #8]
 800362c:	ea39 0303 	bics.w	r3, r9, r3
 8003630:	bf0c      	ite	eq
 8003632:	2301      	moveq	r3, #1
 8003634:	2300      	movne	r3, #0
 8003636:	4543      	cmp	r3, r8
 8003638:	d101      	bne.n	800363e <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800363a:	2000      	movs	r0, #0
 800363c:	e02e      	b.n	800369c <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 800363e:	1c7b      	adds	r3, r7, #1
 8003640:	d0f3      	beq.n	800362a <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003642:	f7fd ffdb 	bl	80015fc <HAL_GetTick>
 8003646:	eba0 000a 	sub.w	r0, r0, sl
 800364a:	42a8      	cmp	r0, r5
 800364c:	d329      	bcc.n	80036a2 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003656:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003658:	6862      	ldr	r2, [r4, #4]
 800365a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800365e:	d10a      	bne.n	8003676 <SPI_WaitFlagStateUntilTimeout+0x76>
 8003660:	68a2      	ldr	r2, [r4, #8]
 8003662:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003666:	d002      	beq.n	800366e <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003668:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800366c:	d103      	bne.n	8003676 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003674:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003676:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003678:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800367c:	d107      	bne.n	800368e <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800368c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800368e:	2301      	movs	r3, #1
 8003690:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003694:	2300      	movs	r3, #0
 8003696:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800369a:	2003      	movs	r0, #3
}
 800369c:	b002      	add	sp, #8
 800369e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 80036a2:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80036a4:	2b00      	cmp	r3, #0
      count--;
 80036a6:	9b01      	ldr	r3, [sp, #4]
 80036a8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 80036ac:	bf08      	it	eq
 80036ae:	2500      	moveq	r5, #0
      count--;
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	e7b9      	b.n	8003628 <SPI_WaitFlagStateUntilTimeout+0x28>
 80036b4:	20000084 	.word	0x20000084

080036b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b530      	push	{r4, r5, lr}
 80036ba:	460b      	mov	r3, r1
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036bc:	4913      	ldr	r1, [pc, #76]	; (800370c <SPI_EndRxTxTransaction+0x54>)
 80036be:	4d14      	ldr	r5, [pc, #80]	; (8003710 <SPI_EndRxTxTransaction+0x58>)
 80036c0:	6809      	ldr	r1, [r1, #0]
 80036c2:	fbb1 f5f5 	udiv	r5, r1, r5
{
 80036c6:	b085      	sub	sp, #20
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80036cc:	4369      	muls	r1, r5
 80036ce:	9103      	str	r1, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036d0:	6841      	ldr	r1, [r0, #4]
 80036d2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 80036d6:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036d8:	d10c      	bne.n	80036f4 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036da:	9200      	str	r2, [sp, #0]
 80036dc:	2180      	movs	r1, #128	; 0x80
 80036de:	2200      	movs	r2, #0
 80036e0:	f7ff ff8e 	bl	8003600 <SPI_WaitFlagStateUntilTimeout>
 80036e4:	b178      	cbz	r0, 8003706 <SPI_EndRxTxTransaction+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036e8:	f043 0320 	orr.w	r3, r3, #32
 80036ec:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80036ee:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 80036f0:	b005      	add	sp, #20
 80036f2:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 80036f4:	9b03      	ldr	r3, [sp, #12]
 80036f6:	b133      	cbz	r3, 8003706 <SPI_EndRxTxTransaction+0x4e>
      count--;
 80036f8:	9b03      	ldr	r3, [sp, #12]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	061b      	lsls	r3, r3, #24
 8003704:	d4f6      	bmi.n	80036f4 <SPI_EndRxTxTransaction+0x3c>
  return HAL_OK;
 8003706:	2000      	movs	r0, #0
 8003708:	e7f2      	b.n	80036f0 <SPI_EndRxTxTransaction+0x38>
 800370a:	bf00      	nop
 800370c:	20000084 	.word	0x20000084
 8003710:	016e3600 	.word	0x016e3600

08003714 <HAL_SPI_MspInit>:
}
 8003714:	4770      	bx	lr

08003716 <HAL_SPI_Init>:
{
 8003716:	b538      	push	{r3, r4, r5, lr}
  if (hspi == NULL)
 8003718:	4604      	mov	r4, r0
 800371a:	2800      	cmp	r0, #0
 800371c:	d05a      	beq.n	80037d4 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800371e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	d153      	bne.n	80037cc <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003724:	6842      	ldr	r2, [r0, #4]
 8003726:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800372a:	d000      	beq.n	800372e <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800372c:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800372e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003732:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003736:	b923      	cbnz	r3, 8003742 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8003738:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800373c:	4620      	mov	r0, r4
 800373e:	f7ff ffe9 	bl	8003714 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8003742:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003744:	68a5      	ldr	r5, [r4, #8]
 8003746:	69a2      	ldr	r2, [r4, #24]
 8003748:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hspi->State = HAL_SPI_STATE_BUSY;
 800374a:	2302      	movs	r3, #2
 800374c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003750:	680b      	ldr	r3, [r1, #0]
 8003752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003756:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003758:	6863      	ldr	r3, [r4, #4]
 800375a:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 800375e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003762:	432b      	orrs	r3, r5
 8003764:	68e5      	ldr	r5, [r4, #12]
 8003766:	f405 6500 	and.w	r5, r5, #2048	; 0x800
 800376a:	432b      	orrs	r3, r5
 800376c:	6925      	ldr	r5, [r4, #16]
 800376e:	f005 0502 	and.w	r5, r5, #2
 8003772:	432b      	orrs	r3, r5
 8003774:	6965      	ldr	r5, [r4, #20]
 8003776:	f005 0501 	and.w	r5, r5, #1
 800377a:	432b      	orrs	r3, r5
 800377c:	f402 7500 	and.w	r5, r2, #512	; 0x200
 8003780:	432b      	orrs	r3, r5
 8003782:	69e5      	ldr	r5, [r4, #28]
 8003784:	f005 0538 	and.w	r5, r5, #56	; 0x38
 8003788:	432b      	orrs	r3, r5
 800378a:	6a25      	ldr	r5, [r4, #32]
 800378c:	f005 0580 	and.w	r5, r5, #128	; 0x80
 8003790:	432b      	orrs	r3, r5
 8003792:	f400 5500 	and.w	r5, r0, #8192	; 0x2000
 8003796:	432b      	orrs	r3, r5
 8003798:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800379a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800379c:	0c12      	lsrs	r2, r2, #16
 800379e:	f003 0310 	and.w	r3, r3, #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037a2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037a6:	f002 0204 	and.w	r2, r2, #4
 80037aa:	ea42 0203 	orr.w	r2, r2, r3
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80037ae:	bf08      	it	eq
 80037b0:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037b2:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80037b4:	bf08      	it	eq
 80037b6:	610b      	streq	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037b8:	69cb      	ldr	r3, [r1, #28]
 80037ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037be:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037c0:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80037c2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037c4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80037ca:	bd38      	pop	{r3, r4, r5, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037cc:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037d2:	e7ac      	b.n	800372e <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80037d4:	2001      	movs	r0, #1
 80037d6:	e7f8      	b.n	80037ca <HAL_SPI_Init+0xb4>

080037d8 <HAL_SPI_MspDeInit>:
 80037d8:	4770      	bx	lr

080037da <HAL_SPI_DeInit>:
{
 80037da:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80037dc:	4604      	mov	r4, r0
 80037de:	b180      	cbz	r0, 8003802 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 80037e0:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80037e2:	2302      	movs	r3, #2
 80037e4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80037e8:	6813      	ldr	r3, [r2, #0]
 80037ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ee:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80037f0:	f7ff fff2 	bl	80037d8 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037f4:	2000      	movs	r0, #0
 80037f6:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 80037f8:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 80037fc:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 8003800:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003802:	2001      	movs	r0, #1
 8003804:	e7fc      	b.n	8003800 <HAL_SPI_DeInit+0x26>

08003806 <HAL_SPI_TransmitReceive>:
{
 8003806:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800380a:	b085      	sub	sp, #20
 800380c:	4698      	mov	r8, r3
  __IO uint32_t tmpreg = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hspi);
 8003812:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8003816:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8003818:	2b01      	cmp	r3, #1
{
 800381a:	4604      	mov	r4, r0
 800381c:	460d      	mov	r5, r1
 800381e:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8003820:	f000 8133 	beq.w	8003a8a <HAL_SPI_TransmitReceive+0x284>
 8003824:	2301      	movs	r3, #1
 8003826:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800382a:	f7fd fee7 	bl	80015fc <HAL_GetTick>
  tmp_state           = hspi->State;
 800382e:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8003832:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003834:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8003836:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8003838:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800383a:	d00a      	beq.n	8003852 <HAL_SPI_TransmitReceive+0x4c>
 800383c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003840:	f040 8121 	bne.w	8003a86 <HAL_SPI_TransmitReceive+0x280>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003844:	68a2      	ldr	r2, [r4, #8]
 8003846:	2a00      	cmp	r2, #0
 8003848:	f040 811d 	bne.w	8003a86 <HAL_SPI_TransmitReceive+0x280>
 800384c:	2904      	cmp	r1, #4
 800384e:	f040 811a 	bne.w	8003a86 <HAL_SPI_TransmitReceive+0x280>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003852:	2d00      	cmp	r5, #0
 8003854:	f000 8109 	beq.w	8003a6a <HAL_SPI_TransmitReceive+0x264>
 8003858:	f1b9 0f00 	cmp.w	r9, #0
 800385c:	f000 8105 	beq.w	8003a6a <HAL_SPI_TransmitReceive+0x264>
 8003860:	f1b8 0f00 	cmp.w	r8, #0
 8003864:	f000 8101 	beq.w	8003a6a <HAL_SPI_TransmitReceive+0x264>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003868:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800386c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800386e:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003872:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003874:	bf1c      	itt	ne
 8003876:	2205      	movne	r2, #5
 8003878:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800387c:	2200      	movs	r2, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800387e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003882:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8003884:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003888:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800388c:	6822      	ldr	r2, [r4, #0]
 800388e:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003892:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003894:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003898:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800389c:	d107      	bne.n	80038ae <HAL_SPI_TransmitReceive+0xa8>
    SPI_RESET_CRC(hspi);
 800389e:	6811      	ldr	r1, [r2, #0]
 80038a0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80038a4:	6011      	str	r1, [r2, #0]
 80038a6:	6811      	ldr	r1, [r2, #0]
 80038a8:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80038ac:	6011      	str	r1, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ae:	6811      	ldr	r1, [r2, #0]
 80038b0:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 80038b2:	bf5e      	ittt	pl
 80038b4:	6811      	ldrpl	r1, [r2, #0]
 80038b6:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
 80038ba:	6011      	strpl	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038bc:	68e1      	ldr	r1, [r4, #12]
 80038be:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80038c2:	d168      	bne.n	8003996 <HAL_SPI_TransmitReceive+0x190>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c4:	b113      	cbz	r3, 80038cc <HAL_SPI_TransmitReceive+0xc6>
 80038c6:	f1b8 0f01 	cmp.w	r8, #1
 80038ca:	d107      	bne.n	80038dc <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038cc:	f835 3b02 	ldrh.w	r3, [r5], #2
 80038d0:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80038d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d4:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29b      	uxth	r3, r3
 80038da:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80038dc:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	b9b3      	cbnz	r3, 8003912 <HAL_SPI_TransmitReceive+0x10c>
 80038e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	b99b      	cbnz	r3, 8003912 <HAL_SPI_TransmitReceive+0x10c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80038ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f0:	f040 80a6 	bne.w	8003a40 <HAL_SPI_TransmitReceive+0x23a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80038f4:	2201      	movs	r2, #1
 80038f6:	9700      	str	r7, [sp, #0]
 80038f8:	4633      	mov	r3, r6
 80038fa:	4611      	mov	r1, r2
 80038fc:	4620      	mov	r0, r4
 80038fe:	f7ff fe7f 	bl	8003600 <SPI_WaitFlagStateUntilTimeout>
 8003902:	2800      	cmp	r0, #0
 8003904:	f000 8098 	beq.w	8003a38 <HAL_SPI_TransmitReceive+0x232>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003908:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800390a:	f043 0302 	orr.w	r3, r3, #2
 800390e:	6563      	str	r3, [r4, #84]	; 0x54
 8003910:	e020      	b.n	8003954 <HAL_SPI_TransmitReceive+0x14e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003912:	6822      	ldr	r2, [r4, #0]
 8003914:	6893      	ldr	r3, [r2, #8]
 8003916:	079b      	lsls	r3, r3, #30
 8003918:	d504      	bpl.n	8003924 <HAL_SPI_TransmitReceive+0x11e>
 800391a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800391c:	b29b      	uxth	r3, r3
 800391e:	b10b      	cbz	r3, 8003924 <HAL_SPI_TransmitReceive+0x11e>
 8003920:	bb1d      	cbnz	r5, 800396a <HAL_SPI_TransmitReceive+0x164>
{
 8003922:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003924:	6891      	ldr	r1, [r2, #8]
 8003926:	f011 0101 	ands.w	r1, r1, #1
 800392a:	d00c      	beq.n	8003946 <HAL_SPI_TransmitReceive+0x140>
 800392c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800392e:	b29b      	uxth	r3, r3
 8003930:	b14b      	cbz	r3, 8003946 <HAL_SPI_TransmitReceive+0x140>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003932:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003934:	68d2      	ldr	r2, [r2, #12]
 8003936:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800393a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800393c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800393e:	3b01      	subs	r3, #1
 8003940:	b29b      	uxth	r3, r3
 8003942:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003944:	460d      	mov	r5, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003946:	f7fd fe59 	bl	80015fc <HAL_GetTick>
 800394a:	1bc0      	subs	r0, r0, r7
 800394c:	42b0      	cmp	r0, r6
 800394e:	d3c6      	bcc.n	80038de <HAL_SPI_TransmitReceive+0xd8>
 8003950:	1c70      	adds	r0, r6, #1
 8003952:	d0c4      	beq.n	80038de <HAL_SPI_TransmitReceive+0xd8>
      errorcode = HAL_TIMEOUT;
 8003954:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003956:	2301      	movs	r3, #1
 8003958:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800395c:	2300      	movs	r3, #0
 800395e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003962:	4628      	mov	r0, r5
 8003964:	b005      	add	sp, #20
 8003966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800396a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800396c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003970:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003972:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003974:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003976:	3b01      	subs	r3, #1
 8003978:	b29b      	uxth	r3, r3
 800397a:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800397c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800397e:	b2ad      	uxth	r5, r5
 8003980:	2d00      	cmp	r5, #0
 8003982:	d1ce      	bne.n	8003922 <HAL_SPI_TransmitReceive+0x11c>
 8003984:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398a:	d1ca      	bne.n	8003922 <HAL_SPI_TransmitReceive+0x11c>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800398c:	6813      	ldr	r3, [r2, #0]
 800398e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	e7c6      	b.n	8003924 <HAL_SPI_TransmitReceive+0x11e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003996:	b113      	cbz	r3, 800399e <HAL_SPI_TransmitReceive+0x198>
 8003998:	f1b8 0f01 	cmp.w	r8, #1
 800399c:	d108      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x1aa>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800399e:	782b      	ldrb	r3, [r5, #0]
 80039a0:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039a4:	3301      	adds	r3, #1
 80039a6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80039a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80039b0:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	b91b      	cbnz	r3, 80039c0 <HAL_SPI_TransmitReceive+0x1ba>
 80039b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d094      	beq.n	80038ea <HAL_SPI_TransmitReceive+0xe4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039c0:	6822      	ldr	r2, [r4, #0]
 80039c2:	6893      	ldr	r3, [r2, #8]
 80039c4:	0799      	lsls	r1, r3, #30
 80039c6:	d504      	bpl.n	80039d2 <HAL_SPI_TransmitReceive+0x1cc>
 80039c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	b10b      	cbz	r3, 80039d2 <HAL_SPI_TransmitReceive+0x1cc>
 80039ce:	b9dd      	cbnz	r5, 8003a08 <HAL_SPI_TransmitReceive+0x202>
        txallowed = 1U;
 80039d0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039d2:	6822      	ldr	r2, [r4, #0]
 80039d4:	6891      	ldr	r1, [r2, #8]
 80039d6:	f011 0101 	ands.w	r1, r1, #1
 80039da:	d00d      	beq.n	80039f8 <HAL_SPI_TransmitReceive+0x1f2>
 80039dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039de:	b29b      	uxth	r3, r3
 80039e0:	b153      	cbz	r3, 80039f8 <HAL_SPI_TransmitReceive+0x1f2>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039e4:	68d2      	ldr	r2, [r2, #12]
 80039e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039ea:	3301      	adds	r3, #1
 80039ec:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80039ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80039f6:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039f8:	f7fd fe00 	bl	80015fc <HAL_GetTick>
 80039fc:	1bc0      	subs	r0, r0, r7
 80039fe:	42b0      	cmp	r0, r6
 8003a00:	d3d7      	bcc.n	80039b2 <HAL_SPI_TransmitReceive+0x1ac>
 8003a02:	1c73      	adds	r3, r6, #1
 8003a04:	d0d5      	beq.n	80039b2 <HAL_SPI_TransmitReceive+0x1ac>
 8003a06:	e7a5      	b.n	8003954 <HAL_SPI_TransmitReceive+0x14e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8003a0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a10:	3301      	adds	r3, #1
 8003a12:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003a14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003a1c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8003a1e:	b2ad      	uxth	r5, r5
 8003a20:	2d00      	cmp	r5, #0
 8003a22:	d1d5      	bne.n	80039d0 <HAL_SPI_TransmitReceive+0x1ca>
 8003a24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2a:	d1d1      	bne.n	80039d0 <HAL_SPI_TransmitReceive+0x1ca>
 8003a2c:	6822      	ldr	r2, [r4, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003a2e:	6813      	ldr	r3, [r2, #0]
 8003a30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e7cc      	b.n	80039d2 <HAL_SPI_TransmitReceive+0x1cc>
    tmpreg = READ_REG(hspi->Instance->DR);
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	9302      	str	r3, [sp, #8]
    UNUSED(tmpreg);
 8003a3e:	9b02      	ldr	r3, [sp, #8]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003a40:	6822      	ldr	r2, [r4, #0]
 8003a42:	6895      	ldr	r5, [r2, #8]
 8003a44:	f015 0510 	ands.w	r5, r5, #16
 8003a48:	d007      	beq.n	8003a5a <HAL_SPI_TransmitReceive+0x254>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003a4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a4c:	f043 0302 	orr.w	r3, r3, #2
 8003a50:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003a52:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003a56:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8003a58:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a5a:	463a      	mov	r2, r7
 8003a5c:	4631      	mov	r1, r6
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f7ff fe2a 	bl	80036b8 <SPI_EndRxTxTransaction>
 8003a64:	b118      	cbz	r0, 8003a6e <HAL_SPI_TransmitReceive+0x268>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a66:	2320      	movs	r3, #32
 8003a68:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003a6a:	2501      	movs	r5, #1
 8003a6c:	e773      	b.n	8003956 <HAL_SPI_TransmitReceive+0x150>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a6e:	68a3      	ldr	r3, [r4, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f47f af70 	bne.w	8003956 <HAL_SPI_TransmitReceive+0x150>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a76:	9303      	str	r3, [sp, #12]
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	9203      	str	r2, [sp, #12]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	9303      	str	r3, [sp, #12]
 8003a82:	9b03      	ldr	r3, [sp, #12]
 8003a84:	e767      	b.n	8003956 <HAL_SPI_TransmitReceive+0x150>
    errorcode = HAL_BUSY;
 8003a86:	2502      	movs	r5, #2
 8003a88:	e765      	b.n	8003956 <HAL_SPI_TransmitReceive+0x150>
  __HAL_LOCK(hspi);
 8003a8a:	2502      	movs	r5, #2
 8003a8c:	e769      	b.n	8003962 <HAL_SPI_TransmitReceive+0x15c>

08003a8e <HAL_SPI_GetState>:
  return hspi->State;
 8003a8e:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8003a92:	4770      	bx	lr

08003a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003acc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a9a:	e003      	b.n	8003aa4 <LoopCopyDataInit>

08003a9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003aa0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003aa2:	3104      	adds	r1, #4

08003aa4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003aa4:	480b      	ldr	r0, [pc, #44]	; (8003ad4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003aa8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003aaa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003aac:	d3f6      	bcc.n	8003a9c <CopyDataInit>
  ldr  r2, =_sbss
 8003aae:	4a0b      	ldr	r2, [pc, #44]	; (8003adc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ab0:	e002      	b.n	8003ab8 <LoopFillZerobss>

08003ab2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ab2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ab4:	f842 3b04 	str.w	r3, [r2], #4

08003ab8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ab8:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003aba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003abc:	d3f9      	bcc.n	8003ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003abe:	f7fd fd31 	bl	8001524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ac2:	f002 fa2d 	bl	8005f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ac6:	f000 f9fd 	bl	8003ec4 <main>
  bx  lr    
 8003aca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003acc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003ad0:	0800695c 	.word	0x0800695c
  ldr  r0, =_sdata
 8003ad4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ad8:	200005bc 	.word	0x200005bc
  ldr  r2, =_sbss
 8003adc:	200005bc 	.word	0x200005bc
  ldr  r3, = _ebss
 8003ae0:	2000ea20 	.word	0x2000ea20

08003ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ae4:	e7fe      	b.n	8003ae4 <ADC_IRQHandler>
	...

08003ae8 <AudioPlay_Test>:
  *   Audio peripheral.
  * @param  None
  * @retval None
  */
void AudioPlay_Test(void)
{  
 8003ae8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Initial volume level (from 0 (Mute) to 100 (Max)) */
  __IO uint8_t volume = 70;
 8003aea:	2346      	movs	r3, #70	; 0x46
 8003aec:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Initialize MEMS Accelerometer mounted on STM32F4-Discovery board */
  if(BSP_ACCELERO_Init() != ACCELERO_OK)
 8003af0:	f7fd f9f0 	bl	8000ed4 <BSP_ACCELERO_Init>
 8003af4:	b108      	cbz	r0, 8003afa <AudioPlay_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler();
 8003af6:	f000 fa71 	bl	8003fdc <Error_Handler>
  }
  
  /* Enable MEMS click feature only for STM32F4-DISCO rev B board */
  if (BSP_ACCELERO_ReadID() == I_AM_LIS302DL)
 8003afa:	f7fd f9ff 	bl	8000efc <BSP_ACCELERO_ReadID>
 8003afe:	283b      	cmp	r0, #59	; 0x3b
 8003b00:	d103      	bne.n	8003b0a <AudioPlay_Test+0x22>
  {
    /* MEMS Accelerometer configure to manage PAUSE, RESUME operations */
    BSP_ACCELERO_Click_ITConfig();
 8003b02:	f7fd fa03 	bl	8000f0c <BSP_ACCELERO_Click_ITConfig>
    
    /* Clear MEMS click interruption */
    BSP_ACCELERO_Click_ITClear();
 8003b06:	f7fd fa09 	bl	8000f1c <BSP_ACCELERO_Click_ITClear>
  }
  
  /* Turn ON LED6: start of Audio file play */
  BSP_LED_On(LED6);
 8003b0a:	2003      	movs	r0, #3
 8003b0c:	f7fd f86a 	bl	8000be4 <BSP_LED_On>
  
  /* Retrieve Wave Sample rate */
  waveformat = (WAVE_FormatTypeDef*) AUDIO_FILE_ADDRESS;
 8003b10:	4b26      	ldr	r3, [pc, #152]	; (8003bac <AudioPlay_Test+0xc4>)
 8003b12:	4c27      	ldr	r4, [pc, #156]	; (8003bb0 <AudioPlay_Test+0xc8>)

  /* Initialize Audio Device */
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, volume, waveformat->SampleRate) != 0)
 8003b14:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003b18:	699a      	ldr	r2, [r3, #24]
  waveformat = (WAVE_FormatTypeDef*) AUDIO_FILE_ADDRESS;
 8003b1a:	6023      	str	r3, [r4, #0]
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, volume, waveformat->SampleRate) != 0)
 8003b1c:	2004      	movs	r0, #4
 8003b1e:	f7fd fb51 	bl	80011c4 <BSP_AUDIO_OUT_Init>
 8003b22:	b108      	cbz	r0, 8003b28 <AudioPlay_Test+0x40>
  {
    Error_Handler();
 8003b24:	f000 fa5a 	bl	8003fdc <Error_Handler>
  }
  
  /* Set variable used to stop player before starting */
  UserPressButton = 0;
 8003b28:	4d22      	ldr	r5, [pc, #136]	; (8003bb4 <AudioPlay_Test+0xcc>)
  AudioTest = 0;
  
  /* Set the total number of data to be played */
  AudioTotalSize = AUDIO_FILE_SIZE;  
 8003b2a:	4e23      	ldr	r6, [pc, #140]	; (8003bb8 <AudioPlay_Test+0xd0>)
  /* Set the current audio pointer position */
  CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 8003b2c:	481f      	ldr	r0, [pc, #124]	; (8003bac <AudioPlay_Test+0xc4>)
  UserPressButton = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	702b      	strb	r3, [r5, #0]
  AudioTest = 0;
 8003b32:	6063      	str	r3, [r4, #4]
  CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 8003b34:	4c21      	ldr	r4, [pc, #132]	; (8003bbc <AudioPlay_Test+0xd4>)
  AudioTotalSize = AUDIO_FILE_SIZE;  
 8003b36:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8003b3a:	6031      	str	r1, [r6, #0]
  CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 8003b3c:	6020      	str	r0, [r4, #0]
  /* Start the audio player */
  BSP_AUDIO_OUT_Play(CurrentPos, AudioTotalSize);  
 8003b3e:	f7fd fa1b 	bl	8000f78 <BSP_AUDIO_OUT_Play>
  /* Update the remaining number of data to be played */
  AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);  
 8003b42:	6833      	ldr	r3, [r6, #0]
 8003b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	bf28      	it	cs
 8003b4c:	461a      	movcs	r2, r3
 8003b4e:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  /* Update the current audio pointer position */
  CurrentPos += DMA_MAX(AudioTotalSize);
 8003b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);  
 8003b56:	6072      	str	r2, [r6, #4]
  CurrentPos += DMA_MAX(AudioTotalSize);
 8003b58:	bf28      	it	cs
 8003b5a:	4b19      	ldrcs	r3, [pc, #100]	; (8003bc0 <AudioPlay_Test+0xd8>)
 8003b5c:	6822      	ldr	r2, [r4, #0]
 8003b5e:	bf38      	it	cc
 8003b60:	005b      	lslcc	r3, r3, #1
 8003b62:	4413      	add	r3, r2
 8003b64:	6023      	str	r3, [r4, #0]
  
  /* Infinite loop */
  while(!UserPressButton)
  { 
    if (PauseResumeStatus == PAUSE_STATUS)
 8003b66:	4c17      	ldr	r4, [pc, #92]	; (8003bc4 <AudioPlay_Test+0xdc>)
      /* Turn OFF LED4: Audio play running */
      BSP_LED_Off(LED4);
      
      /* Resume playing */
      BSP_AUDIO_OUT_Resume();
      PauseResumeStatus = IDLE_STATUS;
 8003b68:	2602      	movs	r6, #2
  while(!UserPressButton)
 8003b6a:	782b      	ldrb	r3, [r5, #0]
 8003b6c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8003b70:	b143      	cbz	r3, 8003b84 <AudioPlay_Test+0x9c>
    }
  }
  
  /* Stop Player before close Test */
  if (BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW) != AUDIO_OK)
 8003b72:	2001      	movs	r0, #1
 8003b74:	f7fd fa4e 	bl	8001014 <BSP_AUDIO_OUT_Stop>
 8003b78:	b1a8      	cbz	r0, 8003ba6 <AudioPlay_Test+0xbe>
  {
    /* Audio Stop error */
    Error_Handler();
  }
}
 8003b7a:	b002      	add	sp, #8
 8003b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8003b80:	f000 ba2c 	b.w	8003fdc <Error_Handler>
    if (PauseResumeStatus == PAUSE_STATUS)
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	b933      	cbnz	r3, 8003b96 <AudioPlay_Test+0xae>
      BSP_LED_On(LED4);
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fd f82b 	bl	8000be4 <BSP_LED_On>
      BSP_AUDIO_OUT_Pause();
 8003b8e:	f7fd fa19 	bl	8000fc4 <BSP_AUDIO_OUT_Pause>
      PauseResumeStatus = IDLE_STATUS;
 8003b92:	6026      	str	r6, [r4, #0]
 8003b94:	e7e9      	b.n	8003b6a <AudioPlay_Test+0x82>
    else if (PauseResumeStatus == RESUME_STATUS)
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d1e6      	bne.n	8003b6a <AudioPlay_Test+0x82>
      BSP_LED_Off(LED4);
 8003b9c:	f7fd f830 	bl	8000c00 <BSP_LED_Off>
      BSP_AUDIO_OUT_Resume();
 8003ba0:	f7fd fa24 	bl	8000fec <BSP_AUDIO_OUT_Resume>
 8003ba4:	e7f5      	b.n	8003b92 <AudioPlay_Test+0xaa>
}
 8003ba6:	b002      	add	sp, #8
 8003ba8:	bd70      	pop	{r4, r5, r6, pc}
 8003baa:	bf00      	nop
 8003bac:	08080000 	.word	0x08080000
 8003bb0:	20000750 	.word	0x20000750
 8003bb4:	200008a4 	.word	0x200008a4
 8003bb8:	20000090 	.word	0x20000090
 8003bbc:	200009e8 	.word	0x200009e8
 8003bc0:	0001fffe 	.word	0x0001fffe
 8003bc4:	20000098 	.word	0x20000098

08003bc8 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
* @brief  Calculates the remaining file size and new position of the pointer.
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_TransferComplete_CallBack()
{
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t replay = 0;
  
  if (AudioRemSize > 0)
 8003bca:	4c25      	ldr	r4, [pc, #148]	; (8003c60 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x98>)
 8003bcc:	6861      	ldr	r1, [r4, #4]
 8003bce:	2900      	cmp	r1, #0
 8003bd0:	d042      	beq.n	8003c58 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>
  {
    /* Replay from the current position */
    BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)CurrentPos, DMA_MAX(AudioRemSize/AUDIODATA_SIZE));
 8003bd2:	4d24      	ldr	r5, [pc, #144]	; (8003c64 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9c>)
 8003bd4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8003bd8:	bf34      	ite	cc
 8003bda:	f3c1 014f 	ubfxcc	r1, r1, #1, #16
 8003bde:	f64f 71ff 	movwcs	r1, #65535	; 0xffff
 8003be2:	6828      	ldr	r0, [r5, #0]
 8003be4:	f7fd f9e6 	bl	8000fb4 <BSP_AUDIO_OUT_ChangeBuffer>
    
    /* Update the current pointer position */
    CurrentPos += DMA_MAX(AudioRemSize);        
 8003be8:	6863      	ldr	r3, [r4, #4]
 8003bea:	682a      	ldr	r2, [r5, #0]
 8003bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf0:	bf2c      	ite	cs
 8003bf2:	491d      	ldrcs	r1, [pc, #116]	; (8003c68 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xa0>)
 8003bf4:	0059      	lslcc	r1, r3, #1
 8003bf6:	440a      	add	r2, r1
    
    /* Update the remaining number of data to be played */
    AudioRemSize -= AUDIODATA_SIZE * DMA_MAX(AudioRemSize/AUDIODATA_SIZE);  
 8003bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    CurrentPos += DMA_MAX(AudioRemSize);        
 8003bfc:	602a      	str	r2, [r5, #0]
    AudioRemSize -= AUDIODATA_SIZE * DMA_MAX(AudioRemSize/AUDIODATA_SIZE);  
 8003bfe:	bf2c      	ite	cs
 8003c00:	4a19      	ldrcs	r2, [pc, #100]	; (8003c68 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xa0>)
 8003c02:	f023 0201 	biccc.w	r2, r3, #1
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	6063      	str	r3, [r4, #4]
  uint32_t replay = 0;
 8003c0a:	2700      	movs	r7, #0
    /* Request to replay audio file from beginning */
    replay = 1;
  }
  
  /* Audio sample used for play */
  if((AudioTest == 0) && (replay == 1))
 8003c0c:	4e17      	ldr	r6, [pc, #92]	; (8003c6c <BSP_AUDIO_OUT_TransferComplete_CallBack+0xa4>)
 8003c0e:	6873      	ldr	r3, [r6, #4]
 8003c10:	b9c3      	cbnz	r3, 8003c44 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x7c>
 8003c12:	b1bf      	cbz	r7, 8003c44 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x7c>
  {
    /* Replay from the beginning */
    /* Set the current audio pointer position */
    CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 8003c14:	4d13      	ldr	r5, [pc, #76]	; (8003c64 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9c>)
 8003c16:	4816      	ldr	r0, [pc, #88]	; (8003c70 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xa8>)
    /* Replay from the beginning */
    BSP_AUDIO_OUT_Play(CurrentPos, AudioTotalSize);
 8003c18:	6821      	ldr	r1, [r4, #0]
    CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 8003c1a:	6028      	str	r0, [r5, #0]
    BSP_AUDIO_OUT_Play(CurrentPos, AudioTotalSize);
 8003c1c:	f7fd f9ac 	bl	8000f78 <BSP_AUDIO_OUT_Play>
    /* Update the remaining number of data to be played */
    AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);  
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	bf28      	it	cs
 8003c2a:	461a      	movcs	r2, r3
 8003c2c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
    /* Update the current audio pointer position */
    CurrentPos += DMA_MAX(AudioTotalSize);
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c34:	bf28      	it	cs
 8003c36:	4b0c      	ldrcs	r3, [pc, #48]	; (8003c68 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xa0>)
    AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);  
 8003c38:	6062      	str	r2, [r4, #4]
    CurrentPos += DMA_MAX(AudioTotalSize);
 8003c3a:	682a      	ldr	r2, [r5, #0]
 8003c3c:	bf38      	it	cc
 8003c3e:	005b      	lslcc	r3, r3, #1
 8003c40:	4413      	add	r3, r2
 8003c42:	602b      	str	r3, [r5, #0]
  }
  
  /* Audio sample saved during record */
  if((AudioTest == 1) && (replay == 1))
 8003c44:	6873      	ldr	r3, [r6, #4]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d108      	bne.n	8003c5c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x94>
 8003c4a:	b13f      	cbz	r7, 8003c5c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x94>
  {
    /* Replay from the beginning */
    BSP_AUDIO_OUT_Play(WrBuffer, AudioTotalSize);
 8003c4c:	6821      	ldr	r1, [r4, #0]
 8003c4e:	4809      	ldr	r0, [pc, #36]	; (8003c74 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xac>)
  }
}
 8003c50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    BSP_AUDIO_OUT_Play(WrBuffer, AudioTotalSize);
 8003c54:	f7fd b990 	b.w	8000f78 <BSP_AUDIO_OUT_Play>
    replay = 1;
 8003c58:	2701      	movs	r7, #1
 8003c5a:	e7d7      	b.n	8003c0c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x44>
}
 8003c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000090 	.word	0x20000090
 8003c64:	200009e8 	.word	0x200009e8
 8003c68:	0001fffe 	.word	0x0001fffe
 8003c6c:	20000750 	.word	0x20000750
 8003c70:	08080000 	.word	0x08080000
 8003c74:	20000a20 	.word	0x20000a20

08003c78 <BSP_AUDIO_OUT_Error_CallBack>:
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void)
{
  /* Stop the program with an infinite loop */
  Error_Handler();
 8003c78:	f000 b9b0 	b.w	8003fdc <Error_Handler>

08003c7c <AudioRecord_Test>:
  *   Audio peripheral.
  * @param  None
  * @retval None
  */
void AudioRecord_Test(void)
{
 8003c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 8003c80:	4d60      	ldr	r5, [pc, #384]	; (8003e04 <AudioRecord_Test+0x188>)
 8003c82:	2300      	movs	r3, #0
  if(BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK)
 8003c84:	2201      	movs	r2, #1
 8003c86:	2110      	movs	r1, #16
 8003c88:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 8003c8c:	602b      	str	r3, [r5, #0]
  if(BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK)
 8003c8e:	f7fd fbbf 	bl	8001410 <BSP_AUDIO_IN_Init>
 8003c92:	b108      	cbz	r0, 8003c98 <AudioRecord_Test+0x1c>
  {
    /* Record Error */
    Error_Handler();
 8003c94:	f000 f9a2 	bl	8003fdc <Error_Handler>
  }  

  /* Turn ON LED3: start record */
  BSP_LED_On(LED3);
 8003c98:	2001      	movs	r0, #1
 8003c9a:	f7fc ffa3 	bl	8000be4 <BSP_LED_On>
  
  /* Start the record */
  if (BSP_AUDIO_IN_Record((uint16_t*)&InternalBuffer[0], INTERNAL_BUFF_SIZE) != AUDIO_OK)
 8003c9e:	485a      	ldr	r0, [pc, #360]	; (8003e08 <AudioRecord_Test+0x18c>)
 8003ca0:	2180      	movs	r1, #128	; 0x80
 8003ca2:	f7fd fae1 	bl	8001268 <BSP_AUDIO_IN_Record>
 8003ca6:	b108      	cbz	r0, 8003cac <AudioRecord_Test+0x30>
  {
    /* Record Error */
    Error_Handler();
 8003ca8:	f000 f998 	bl	8003fdc <Error_Handler>
  }
  BufferCtl.fptr = 0;
  
  AUDIODataReady = 0; 
 8003cac:	4c56      	ldr	r4, [pc, #344]	; (8003e08 <AudioRecord_Test+0x18c>)
    {
      /* PDM to PCM data convert */
      BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[0], (uint16_t*)&RecBuf[0]);
      
      /* Copy PCM data in internal buffer */
      memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 8003cae:	4e57      	ldr	r6, [pc, #348]	; (8003e0c <AudioRecord_Test+0x190>)
  BufferCtl.fptr = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	606b      	str	r3, [r5, #4]
  AUDIODataReady = 0; 
 8003cb4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[0], (uint16_t*)&RecBuf[0]);
 8003cb8:	f504 7882 	add.w	r8, r4, #260	; 0x104
      
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 8003cbc:	2700      	movs	r7, #0
 8003cbe:	e034      	b.n	8003d2a <AudioRecord_Test+0xae>
    if(BufferCtl.offset == BUFFER_OFFSET_HALF)
 8003cc0:	682b      	ldr	r3, [r5, #0]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d163      	bne.n	8003d8e <AudioRecord_Test+0x112>
      BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[0], (uint16_t*)&RecBuf[0]);
 8003cc6:	4641      	mov	r1, r8
 8003cc8:	484f      	ldr	r0, [pc, #316]	; (8003e08 <AudioRecord_Test+0x18c>)
 8003cca:	f7fd fadf 	bl	800128c <BSP_AUDIO_IN_PDMToPCM>
      memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 8003cce:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 8003cd2:	4b4f      	ldr	r3, [pc, #316]	; (8003e10 <AudioRecord_Test+0x194>)
 8003cd4:	eb06 1282 	add.w	r2, r6, r2, lsl #6
 8003cd8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8003cdc:	f853 0b04 	ldr.w	r0, [r3], #4
 8003ce0:	f842 0b04 	str.w	r0, [r2], #4
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	d1f9      	bne.n	8003cdc <AudioRecord_Test+0x60>
      
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8003ce8:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 8003cec:	602f      	str	r7, [r5, #0]
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8003cee:	f240 13bf 	movw	r3, #447	; 0x1bf
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d10a      	bne.n	8003d0c <AudioRecord_Test+0x90>
      {
        AUDIODataReady = 1;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
        AUDIOBuffOffset = 0;
 8003cfc:	f8c4 7148 	str.w	r7, [r4, #328]	; 0x148
        AUDIOBuffOffset = WR_BUFFER_SIZE/2;
        ITCounter = 0;
      }
      else
      {
        ITCounter++;
 8003d00:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8003d04:	3301      	adds	r3, #1
 8003d06:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 8003d0a:	e00e      	b.n	8003d2a <AudioRecord_Test+0xae>
      else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 8003d0c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 8003d10:	f240 337f 	movw	r3, #895	; 0x37f
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d1f3      	bne.n	8003d00 <AudioRecord_Test+0x84>
        AUDIODataReady = 2;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
        AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 8003d1e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d22:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
        ITCounter = 0;
 8003d26:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
  while (AUDIODataReady != 2) 
 8003d2a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d1c6      	bne.n	8003cc0 <AudioRecord_Test+0x44>
      }  
    }   
  };
  
  /* Stop audio record */
  if (BSP_AUDIO_IN_Stop() != AUDIO_OK)
 8003d32:	f7fd faa3 	bl	800127c <BSP_AUDIO_IN_Stop>
 8003d36:	b108      	cbz	r0, 8003d3c <AudioRecord_Test+0xc0>
  {
    /* Record Error */
    Error_Handler();
 8003d38:	f000 f950 	bl	8003fdc <Error_Handler>
  }

  /* Turn OFF LED3: record stopped */
  BSP_LED_Off(LED3);
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f7fc ff5f 	bl	8000c00 <BSP_LED_Off>
  /* Turn ON LED6: play recorded file */
  BSP_LED_On(LED6);
 8003d42:	2003      	movs	r0, #3
 8003d44:	f7fc ff4e 	bl	8000be4 <BSP_LED_On>
  
  /* Play in the loop the recorded file */

  /* Set variable to indicate play from record buffer */ 
  AudioTest = 1;
 8003d48:	4b32      	ldr	r3, [pc, #200]	; (8003e14 <AudioRecord_Test+0x198>)
  
  /*Set variable used to stop player before starting */
  UserPressButton = 0;
 8003d4a:	4c33      	ldr	r4, [pc, #204]	; (8003e18 <AudioRecord_Test+0x19c>)
  AudioTest = 1;
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
  UserPressButton = 0;
 8003d50:	2500      	movs	r5, #0

  /* Initialize audio IN at REC_FREQ */ 
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, 70, DEFAULT_AUDIO_IN_FREQ);  
 8003d52:	2146      	movs	r1, #70	; 0x46
 8003d54:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003d58:	2004      	movs	r0, #4
  UserPressButton = 0;
 8003d5a:	7025      	strb	r5, [r4, #0]
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, 70, DEFAULT_AUDIO_IN_FREQ);  
 8003d5c:	f7fd fa32 	bl	80011c4 <BSP_AUDIO_OUT_Init>
  
  /* Set the total number of data to be played */
  AudioTotalSize = AUDIODATA_SIZE * WR_BUFFER_SIZE;  
 8003d60:	4b2e      	ldr	r3, [pc, #184]	; (8003e1c <AudioRecord_Test+0x1a0>)
  /* Update the remaining number of data to be played */
  AudioRemSize = 0;  
  /* Update the WrBuffer audio pointer position */
  CurrentPos = (uint16_t *)(WrBuffer);
 8003d62:	482a      	ldr	r0, [pc, #168]	; (8003e0c <AudioRecord_Test+0x190>)
  AudioTotalSize = AUDIODATA_SIZE * WR_BUFFER_SIZE;  
 8003d64:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003d68:	6019      	str	r1, [r3, #0]
  AudioRemSize = 0;  
 8003d6a:	4b2d      	ldr	r3, [pc, #180]	; (8003e20 <AudioRecord_Test+0x1a4>)
 8003d6c:	601d      	str	r5, [r3, #0]
  CurrentPos = (uint16_t *)(WrBuffer);
 8003d6e:	4b2d      	ldr	r3, [pc, #180]	; (8003e24 <AudioRecord_Test+0x1a8>)
 8003d70:	6018      	str	r0, [r3, #0]
  
  /* Play the recorded buffer */
  BSP_AUDIO_OUT_Play(WrBuffer , AudioTotalSize);
 8003d72:	f7fd f901 	bl	8000f78 <BSP_AUDIO_OUT_Play>
  
  while(!UserPressButton)
 8003d76:	7823      	ldrb	r3, [r4, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0fc      	beq.n	8003d76 <AudioRecord_Test+0xfa>
  { 
  }
  
  /* Stop Player before close Test */
  if (BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW) != AUDIO_OK)
 8003d7c:	2002      	movs	r0, #2
 8003d7e:	f7fd f949 	bl	8001014 <BSP_AUDIO_OUT_Stop>
 8003d82:	2800      	cmp	r0, #0
 8003d84:	d03b      	beq.n	8003dfe <AudioRecord_Test+0x182>
  {
    /* Audio Stop error */
    Error_Handler();
  }
}
 8003d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Error_Handler();
 8003d8a:	f000 b927 	b.w	8003fdc <Error_Handler>
    if(BufferCtl.offset == BUFFER_OFFSET_FULL)
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d1cb      	bne.n	8003d2a <AudioRecord_Test+0xae>
      BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[INTERNAL_BUFF_SIZE/2], (uint16_t*)&RecBuf[0]);
 8003d92:	4641      	mov	r1, r8
 8003d94:	4824      	ldr	r0, [pc, #144]	; (8003e28 <AudioRecord_Test+0x1ac>)
 8003d96:	f7fd fa79 	bl	800128c <BSP_AUDIO_IN_PDMToPCM>
      memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 8003d9a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8003d9e:	4a1c      	ldr	r2, [pc, #112]	; (8003e10 <AudioRecord_Test+0x194>)
 8003da0:	eb06 1383 	add.w	r3, r6, r3, lsl #6
 8003da4:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 8003da8:	f852 0b04 	ldr.w	r0, [r2], #4
 8003dac:	f843 0b04 	str.w	r0, [r3], #4
 8003db0:	428a      	cmp	r2, r1
 8003db2:	d1f9      	bne.n	8003da8 <AudioRecord_Test+0x12c>
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8003db4:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 8003db8:	f240 12bf 	movw	r2, #447	; 0x1bf
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 8003dbc:	2300      	movs	r3, #0
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8003dbe:	4291      	cmp	r1, r2
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 8003dc0:	602b      	str	r3, [r5, #0]
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8003dc2:	d10a      	bne.n	8003dda <AudioRecord_Test+0x15e>
        AUDIODataReady = 1;
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
        AUDIOBuffOffset = 0;
 8003dca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
        ITCounter++;
 8003dce:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8003dd2:	4413      	add	r3, r2
        ITCounter++;
 8003dd4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 8003dd8:	e770      	b.n	8003cbc <AudioRecord_Test+0x40>
      else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 8003dda:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 8003dde:	f240 327f 	movw	r2, #895	; 0x37f
 8003de2:	4291      	cmp	r1, r2
        AUDIODataReady = 2;
 8003de4:	bf09      	itett	eq
 8003de6:	2202      	moveq	r2, #2
        ITCounter++;
 8003de8:	f8d4 3144 	ldrne.w	r3, [r4, #324]	; 0x144
        AUDIODataReady = 2;
 8003dec:	f8c4 2100 	streq.w	r2, [r4, #256]	; 0x100
        AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 8003df0:	f44f 5260 	moveq.w	r2, #14336	; 0x3800
 8003df4:	bf0c      	ite	eq
 8003df6:	f8c4 2148 	streq.w	r2, [r4, #328]	; 0x148
        ITCounter++;
 8003dfa:	3301      	addne	r3, #1
 8003dfc:	e7ea      	b.n	8003dd4 <AudioRecord_Test+0x158>
}
 8003dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e02:	bf00      	nop
 8003e04:	20000a18 	.word	0x20000a18
 8003e08:	20000758 	.word	0x20000758
 8003e0c:	20000a20 	.word	0x20000a20
 8003e10:	2000085c 	.word	0x2000085c
 8003e14:	20000754 	.word	0x20000754
 8003e18:	200008a4 	.word	0x200008a4
 8003e1c:	20000090 	.word	0x20000090
 8003e20:	20000094 	.word	0x20000094
 8003e24:	200009e8 	.word	0x200009e8
 8003e28:	200007d8 	.word	0x200007d8

08003e2c <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
  BufferCtl.offset = BUFFER_OFFSET_FULL;
 8003e2c:	4b01      	ldr	r3, [pc, #4]	; (8003e34 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>)
 8003e2e:	2202      	movs	r2, #2
 8003e30:	601a      	str	r2, [r3, #0]
}
 8003e32:	4770      	bx	lr
 8003e34:	20000a18 	.word	0x20000a18

08003e38 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
  BufferCtl.offset = BUFFER_OFFSET_HALF;
 8003e38:	4b01      	ldr	r3, [pc, #4]	; (8003e40 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
}
 8003e3e:	4770      	bx	lr
 8003e40:	20000a18 	.word	0x20000a18

08003e44 <BSP_AUDIO_IN_Error_Callback>:
  * @retval None
  */
void BSP_AUDIO_IN_Error_Callback(void)
{
  /* Stop the program with an infinite loop */
  Error_Handler();
 8003e44:	f000 b8ca 	b.w	8003fdc <Error_Handler>

08003e48 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (KEY_BUTTON_PIN == GPIO_Pin)
 8003e48:	2801      	cmp	r0, #1
{
 8003e4a:	b508      	push	{r3, lr}
  if (KEY_BUTTON_PIN == GPIO_Pin)
 8003e4c:	d108      	bne.n	8003e60 <HAL_GPIO_EXTI_Callback+0x18>
  {
    while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f7fc ff2e 	bl	8000cb0 <BSP_PB_GetState>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d1fa      	bne.n	8003e4e <HAL_GPIO_EXTI_Callback+0x6>
    UserPressButton = 1;
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	701a      	strb	r2, [r3, #0]
      /* Pause playing Wave status */
      PauseResumeStatus = PAUSE_STATUS;
      PressCount = 1;
    }
  }
}
 8003e5e:	bd08      	pop	{r3, pc}
  if(ACCELERO_INT2_PIN == GPIO_Pin) 
 8003e60:	2802      	cmp	r0, #2
 8003e62:	d1fc      	bne.n	8003e5e <HAL_GPIO_EXTI_Callback+0x16>
    BSP_ACCELERO_Click_ITClear();
 8003e64:	f7fd f85a 	bl	8000f1c <BSP_ACCELERO_Click_ITClear>
    if (PressCount == 1)
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003e6a:	4a07      	ldr	r2, [pc, #28]	; (8003e88 <HAL_GPIO_EXTI_Callback+0x40>)
 8003e6c:	6858      	ldr	r0, [r3, #4]
 8003e6e:	2100      	movs	r1, #0
 8003e70:	2801      	cmp	r0, #1
      PauseResumeStatus = PAUSE_STATUS;
 8003e72:	bf1b      	ittet	ne
 8003e74:	6011      	strne	r1, [r2, #0]
      PressCount = 1;
 8003e76:	2201      	movne	r2, #1
      PauseResumeStatus = RESUME_STATUS;
 8003e78:	6010      	streq	r0, [r2, #0]
      PressCount = 1;
 8003e7a:	605a      	strne	r2, [r3, #4]
      PressCount = 0;
 8003e7c:	bf08      	it	eq
 8003e7e:	6059      	streq	r1, [r3, #4]
}
 8003e80:	e7ed      	b.n	8003e5e <HAL_GPIO_EXTI_Callback+0x16>
 8003e82:	bf00      	nop
 8003e84:	200008a4 	.word	0x200008a4
 8003e88:	20000098 	.word	0x20000098

08003e8c <Toggle_Leds>:
  * @brief  Toggle LEDs
  * @param  None
  * @retval None
  */
void Toggle_Leds(void)
{
 8003e8c:	b508      	push	{r3, lr}
  BSP_LED_Toggle(LED3);
 8003e8e:	2001      	movs	r0, #1
 8003e90:	f7fc fec4 	bl	8000c1c <BSP_LED_Toggle>
  HAL_Delay(100);
 8003e94:	2064      	movs	r0, #100	; 0x64
 8003e96:	f7fd fbb7 	bl	8001608 <HAL_Delay>
  BSP_LED_Toggle(LED4);
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f7fc febe 	bl	8000c1c <BSP_LED_Toggle>
  HAL_Delay(100);
 8003ea0:	2064      	movs	r0, #100	; 0x64
 8003ea2:	f7fd fbb1 	bl	8001608 <HAL_Delay>
  BSP_LED_Toggle(LED5);
 8003ea6:	2002      	movs	r0, #2
 8003ea8:	f7fc feb8 	bl	8000c1c <BSP_LED_Toggle>
  HAL_Delay(100);
 8003eac:	2064      	movs	r0, #100	; 0x64
 8003eae:	f7fd fbab 	bl	8001608 <HAL_Delay>
  BSP_LED_Toggle(LED6);
 8003eb2:	2003      	movs	r0, #3
 8003eb4:	f7fc feb2 	bl	8000c1c <BSP_LED_Toggle>
  HAL_Delay(100);
}
 8003eb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(100);
 8003ebc:	2064      	movs	r0, #100	; 0x64
 8003ebe:	f7fd bba3 	b.w	8001608 <HAL_Delay>
	...

08003ec4 <main>:
{ 
 8003ec4:	b500      	push	{lr}
 8003ec6:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8003ec8:	f7fd fb76 	bl	80015b8 <HAL_Init>
  BSP_LED_Init(LED3);
 8003ecc:	2001      	movs	r0, #1
 8003ece:	f7fc fe31 	bl	8000b34 <BSP_LED_Init>
  BSP_LED_Init(LED4); 
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	f7fc fe2e 	bl	8000b34 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8003ed8:	2002      	movs	r0, #2
 8003eda:	f7fc fe2b 	bl	8000b34 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8003ede:	2003      	movs	r0, #3
 8003ee0:	f7fc fe28 	bl	8000b34 <BSP_LED_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ee4:	2400      	movs	r4, #0
 8003ee6:	4b39      	ldr	r3, [pc, #228]	; (8003fcc <main+0x108>)
 8003ee8:	9401      	str	r4, [sp, #4]
 8003eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003efc:	4b34      	ldr	r3, [pc, #208]	; (8003fd0 <main+0x10c>)
 8003efe:	9402      	str	r4, [sp, #8]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0e:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f10:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f12:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f18:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f1c:	2502      	movs	r5, #2
 8003f1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f22:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003f26:	2108      	movs	r1, #8
 8003f28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003f2c:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003f30:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003f32:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f34:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003f36:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003f38:	f7ff f806 	bl	8002f48 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003f3c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f3e:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8003f42:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f4a:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003f4e:	2105      	movs	r1, #5
 8003f50:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f52:	9405      	str	r4, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003f54:	f7ff f9d2 	bl	80032fc <HAL_RCC_ClockConfig>
  if (HAL_GetREVID() == 0x1001)
 8003f58:	f7fd fb6a 	bl	8001630 <HAL_GetREVID>
 8003f5c:	f241 0301 	movw	r3, #4097	; 0x1001
 8003f60:	4298      	cmp	r0, r3
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f62:	bf08      	it	eq
 8003f64:	4a1b      	ldreq	r2, [pc, #108]	; (8003fd4 <main+0x110>)
  while (!UserPressButton)
 8003f66:	4d1c      	ldr	r5, [pc, #112]	; (8003fd8 <main+0x114>)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f68:	bf02      	ittt	eq
 8003f6a:	6813      	ldreq	r3, [r2, #0]
 8003f6c:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8003f70:	6013      	streq	r3, [r2, #0]
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8003f72:	2101      	movs	r1, #1
 8003f74:	2000      	movs	r0, #0
 8003f76:	f7fc fe5f 	bl	8000c38 <BSP_PB_Init>
  while (!UserPressButton)
 8003f7a:	462c      	mov	r4, r5
 8003f7c:	782b      	ldrb	r3, [r5, #0]
 8003f7e:	b1fb      	cbz	r3, 8003fc0 <main+0xfc>
  BSP_LED_Off(LED3);
 8003f80:	2001      	movs	r0, #1
 8003f82:	f7fc fe3d 	bl	8000c00 <BSP_LED_Off>
  BSP_LED_Off(LED4);
 8003f86:	2000      	movs	r0, #0
 8003f88:	f7fc fe3a 	bl	8000c00 <BSP_LED_Off>
  BSP_LED_Off(LED5);
 8003f8c:	2002      	movs	r0, #2
 8003f8e:	f7fc fe37 	bl	8000c00 <BSP_LED_Off>
  BSP_LED_Off(LED6);
 8003f92:	2003      	movs	r0, #3
 8003f94:	f7fc fe34 	bl	8000c00 <BSP_LED_Off>
    UserPressButton = 0;
 8003f98:	2500      	movs	r5, #0
 8003f9a:	7025      	strb	r5, [r4, #0]
    ACCELERO_MEMS_Test();
 8003f9c:	f000 f824 	bl	8003fe8 <ACCELERO_MEMS_Test>
    UserPressButton = 0;
 8003fa0:	7025      	strb	r5, [r4, #0]
    while (!UserPressButton) Toggle_Leds();
 8003fa2:	7823      	ldrb	r3, [r4, #0]
 8003fa4:	b17b      	cbz	r3, 8003fc6 <main+0x102>
    BSP_LED_Off(LED3);
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	f7fc fe2a 	bl	8000c00 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8003fac:	2000      	movs	r0, #0
 8003fae:	f7fc fe27 	bl	8000c00 <BSP_LED_Off>
    BSP_LED_Off(LED5);
 8003fb2:	2002      	movs	r0, #2
 8003fb4:	f7fc fe24 	bl	8000c00 <BSP_LED_Off>
    BSP_LED_Off(LED6);
 8003fb8:	2003      	movs	r0, #3
 8003fba:	f7fc fe21 	bl	8000c00 <BSP_LED_Off>
    UserPressButton = 0;
 8003fbe:	e7ec      	b.n	8003f9a <main+0xd6>
    Toggle_Leds();
 8003fc0:	f7ff ff64 	bl	8003e8c <Toggle_Leds>
 8003fc4:	e7da      	b.n	8003f7c <main+0xb8>
    while (!UserPressButton) Toggle_Leds();
 8003fc6:	f7ff ff61 	bl	8003e8c <Toggle_Leds>
 8003fca:	e7ea      	b.n	8003fa2 <main+0xde>
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40007000 	.word	0x40007000
 8003fd4:	40023c00 	.word	0x40023c00
 8003fd8:	200008a4 	.word	0x200008a4

08003fdc <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8003fdc:	b508      	push	{r3, lr}
  /* Turn LED5 on */
  BSP_LED_On(LED5);
 8003fde:	2002      	movs	r0, #2
 8003fe0:	f7fc fe00 	bl	8000be4 <BSP_LED_On>
  while(1)
 8003fe4:	e7fe      	b.n	8003fe4 <Error_Handler+0x8>
	...

08003fe8 <ACCELERO_MEMS_Test>:
  *         The main objective of this test is to check acceleration on 2 axes X and Y
  * @param  None
  * @retval None
  */
void ACCELERO_MEMS_Test(void)
{
 8003fe8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Init Accelerometer MEMS */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8003fea:	f7fc ff73 	bl	8000ed4 <BSP_ACCELERO_Init>
 8003fee:	b108      	cbz	r0, 8003ff4 <ACCELERO_MEMS_Test+0xc>
  {
    /* Initialization Error */
    Error_Handler(); 
 8003ff0:	f7ff fff4 	bl	8003fdc <Error_Handler>
  }
  
  UserPressButton = 0;
 8003ff4:	4c24      	ldr	r4, [pc, #144]	; (8004088 <ACCELERO_MEMS_Test+0xa0>)
 8003ff6:	4d25      	ldr	r5, [pc, #148]	; (800408c <ACCELERO_MEMS_Test+0xa4>)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	7023      	strb	r3, [r4, #0]
  while(!UserPressButton)
 8003ffc:	7823      	ldrb	r3, [r4, #0]
 8003ffe:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8004002:	b10b      	cbz	r3, 8004008 <ACCELERO_MEMS_Test+0x20>
  {
    ACCELERO_ReadAcc();
  }
}
 8004004:	b002      	add	sp, #8
 8004006:	bd70      	pop	{r4, r5, r6, pc}
  /* Accelerometer variables */
  int16_t buffer[3] = {0};
  int16_t xval, yval = 0x00;
  
  /* Read Acceleration */
  BSP_ACCELERO_GetXYZ(buffer);
 8004008:	4668      	mov	r0, sp
  int16_t buffer[3] = {0};
 800400a:	9600      	str	r6, [sp, #0]
 800400c:	f8ad 6004 	strh.w	r6, [sp, #4]
  BSP_ACCELERO_GetXYZ(buffer);
 8004010:	f7fc ff8c 	bl	8000f2c <BSP_ACCELERO_GetXYZ>
  
  xval = buffer[0];
 8004014:	f9bd 2000 	ldrsh.w	r2, [sp]
  yval = buffer[1];
 8004018:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  
  if((ABS(xval))>(ABS(yval)))
 800401c:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
 8004020:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8004024:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
 8004028:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800402c:	b280      	uxth	r0, r0
 800402e:	b289      	uxth	r1, r1
 8004030:	4288      	cmp	r0, r1
 8004032:	d91c      	bls.n	800406e <ACCELERO_MEMS_Test+0x86>
  {
    if(xval > ThresholdHigh)
 8004034:	f9b5 3000 	ldrsh.w	r3, [r5]
 8004038:	4293      	cmp	r3, r2
 800403a:	da12      	bge.n	8004062 <ACCELERO_MEMS_Test+0x7a>
    { 
      /* LED5 On */
      BSP_LED_On(LED5);
 800403c:	2002      	movs	r0, #2
      HAL_Delay(10);
    }
    else if(yval > ThresholdHigh)
    {
      /* LED3 On */
      BSP_LED_On(LED3);
 800403e:	f7fc fdd1 	bl	8000be4 <BSP_LED_On>
      HAL_Delay(10);
 8004042:	200a      	movs	r0, #10
 8004044:	f7fd fae0 	bl	8001608 <HAL_Delay>
    { 
      HAL_Delay(10);
    }
  } 
  
  BSP_LED_Off(LED3);
 8004048:	2001      	movs	r0, #1
 800404a:	f7fc fdd9 	bl	8000c00 <BSP_LED_Off>
  BSP_LED_Off(LED4);
 800404e:	2000      	movs	r0, #0
 8004050:	f7fc fdd6 	bl	8000c00 <BSP_LED_Off>
  BSP_LED_Off(LED5);
 8004054:	2002      	movs	r0, #2
 8004056:	f7fc fdd3 	bl	8000c00 <BSP_LED_Off>
  BSP_LED_Off(LED6);
 800405a:	2003      	movs	r0, #3
 800405c:	f7fc fdd0 	bl	8000c00 <BSP_LED_Off>
}
 8004060:	e7cc      	b.n	8003ffc <ACCELERO_MEMS_Test+0x14>
    else if(xval < ThresholdLow)
 8004062:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8004066:	4293      	cmp	r3, r2
 8004068:	ddeb      	ble.n	8004042 <ACCELERO_MEMS_Test+0x5a>
      BSP_LED_On(LED4);      
 800406a:	4630      	mov	r0, r6
 800406c:	e7e7      	b.n	800403e <ACCELERO_MEMS_Test+0x56>
    if(yval < ThresholdLow)
 800406e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8004072:	429a      	cmp	r2, r3
 8004074:	dd01      	ble.n	800407a <ACCELERO_MEMS_Test+0x92>
      BSP_LED_On(LED6);
 8004076:	2003      	movs	r0, #3
 8004078:	e7e1      	b.n	800403e <ACCELERO_MEMS_Test+0x56>
    else if(yval > ThresholdHigh)
 800407a:	f9b5 2000 	ldrsh.w	r2, [r5]
 800407e:	429a      	cmp	r2, r3
 8004080:	dadf      	bge.n	8004042 <ACCELERO_MEMS_Test+0x5a>
      BSP_LED_On(LED3);
 8004082:	2001      	movs	r0, #1
 8004084:	e7db      	b.n	800403e <ACCELERO_MEMS_Test+0x56>
 8004086:	bf00      	nop
 8004088:	200008a4 	.word	0x200008a4
 800408c:	20000150 	.word	0x20000150

08004090 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8004090:	4770      	bx	lr

08004092 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004092:	e7fe      	b.n	8004092 <HardFault_Handler>

08004094 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004094:	e7fe      	b.n	8004094 <MemManage_Handler>

08004096 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004096:	e7fe      	b.n	8004096 <BusFault_Handler>

08004098 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004098:	e7fe      	b.n	8004098 <UsageFault_Handler>

0800409a <SVC_Handler>:
 800409a:	4770      	bx	lr

0800409c <DebugMon_Handler>:
 800409c:	4770      	bx	lr

0800409e <PendSV_Handler>:
 800409e:	4770      	bx	lr

080040a0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80040a0:	f7fd baa0 	b.w	80015e4 <HAL_IncTick>

080040a4 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 80040a4:	2001      	movs	r0, #1
 80040a6:	f7fd be1b 	b.w	8001ce0 <HAL_GPIO_EXTI_IRQHandler>

080040aa <EXTI1_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(ACCELERO_INT2_PIN);
 80040aa:	2002      	movs	r0, #2
 80040ac:	f7fd be18 	b.w	8001ce0 <HAL_GPIO_EXTI_IRQHandler>

080040b0 <DMA1_Stream7_IRQHandler>:
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{ 
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 80040b0:	4b01      	ldr	r3, [pc, #4]	; (80040b8 <DMA1_Stream7_IRQHandler+0x8>)
 80040b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80040b4:	f7fd bc68 	b.w	8001988 <HAL_DMA_IRQHandler>
 80040b8:	20000954 	.word	0x20000954

080040bc <DMA1_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 80040bc:	4b01      	ldr	r3, [pc, #4]	; (80040c4 <DMA1_Stream3_IRQHandler+0x8>)
 80040be:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80040c0:	f7fd bc62 	b.w	8001988 <HAL_DMA_IRQHandler>
 80040c4:	2000099c 	.word	0x2000099c

080040c8 <D16_GENERIC>:
 80040c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040cc:	b089      	sub	sp, #36	; 0x24
 80040ce:	68d4      	ldr	r4, [r2, #12]
 80040d0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80040d2:	6993      	ldr	r3, [r2, #24]
 80040d4:	9407      	str	r4, [sp, #28]
 80040d6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80040d8:	9306      	str	r3, [sp, #24]
 80040da:	9402      	str	r4, [sp, #8]
 80040dc:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80040e0:	f8d2 b014 	ldr.w	fp, [r2, #20]
 80040e4:	69d3      	ldr	r3, [r2, #28]
 80040e6:	6896      	ldr	r6, [r2, #8]
 80040e8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80040ea:	9103      	str	r1, [sp, #12]
 80040ec:	2d00      	cmp	r5, #0
 80040ee:	d066      	beq.n	80041be <D16_GENERIC+0xf6>
 80040f0:	f004 0510 	and.w	r5, r4, #16
 80040f4:	f004 0420 	and.w	r4, r4, #32
 80040f8:	9504      	str	r5, [sp, #16]
 80040fa:	4938      	ldr	r1, [pc, #224]	; (80041dc <D16_GENERIC+0x114>)
 80040fc:	9405      	str	r4, [sp, #20]
 80040fe:	f04f 0e00 	mov.w	lr, #0
 8004102:	4635      	mov	r5, r6
 8004104:	e04f      	b.n	80041a6 <D16_GENERIC+0xde>
 8004106:	5d87      	ldrb	r7, [r0, r6]
 8004108:	7804      	ldrb	r4, [r0, #0]
 800410a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800410e:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8004112:	b2e6      	uxtb	r6, r4
 8004114:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004118:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800411c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8004120:	4433      	add	r3, r6
 8004122:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8004126:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800412a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800412e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8004132:	0aa3      	lsrs	r3, r4, #10
 8004134:	4c2a      	ldr	r4, [pc, #168]	; (80041e0 <D16_GENERIC+0x118>)
 8004136:	fb26 5404 	smlad	r4, r6, r4, r5
 800413a:	4d2a      	ldr	r5, [pc, #168]	; (80041e4 <D16_GENERIC+0x11c>)
 800413c:	fb26 f505 	smuad	r5, r6, r5
 8004140:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8004144:	eb04 080a 	add.w	r8, r4, sl
 8004148:	eba8 080b 	sub.w	r8, r8, fp
 800414c:	4646      	mov	r6, r8
 800414e:	17f7      	asrs	r7, r6, #31
 8004150:	e9cd 6700 	strd	r6, r7, [sp]
 8004154:	9e04      	ldr	r6, [sp, #16]
 8004156:	f10e 0c01 	add.w	ip, lr, #1
 800415a:	b16e      	cbz	r6, 8004178 <D16_GENERIC+0xb0>
 800415c:	6a16      	ldr	r6, [r2, #32]
 800415e:	9f01      	ldr	r7, [sp, #4]
 8004160:	fba8 8906 	umull	r8, r9, r8, r6
 8004164:	fb06 9907 	mla	r9, r6, r7, r9
 8004168:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800416c:	f149 0900 	adc.w	r9, r9, #0
 8004170:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004174:	46a3      	mov	fp, r4
 8004176:	4654      	mov	r4, sl
 8004178:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800417a:	9f02      	ldr	r7, [sp, #8]
 800417c:	0424      	lsls	r4, r4, #16
 800417e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004182:	f04f 0900 	mov.w	r9, #0
 8004186:	fb0e fe06 	mul.w	lr, lr, r6
 800418a:	fbc7 8904 	smlal	r8, r9, r7, r4
 800418e:	9e03      	ldr	r6, [sp, #12]
 8004190:	464f      	mov	r7, r9
 8004192:	10bc      	asrs	r4, r7, #2
 8004194:	f304 040f 	ssat	r4, #16, r4
 8004198:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800419c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800419e:	fa1f fe8c 	uxth.w	lr, ip
 80041a2:	4574      	cmp	r4, lr
 80041a4:	d90a      	bls.n	80041bc <D16_GENERIC+0xf4>
 80041a6:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80041a8:	2c01      	cmp	r4, #1
 80041aa:	b2e6      	uxtb	r6, r4
 80041ac:	d1ab      	bne.n	8004106 <D16_GENERIC+0x3e>
 80041ae:	9e05      	ldr	r6, [sp, #20]
 80041b0:	f850 4b02 	ldr.w	r4, [r0], #2
 80041b4:	2e00      	cmp	r6, #0
 80041b6:	d0ac      	beq.n	8004112 <D16_GENERIC+0x4a>
 80041b8:	ba64      	rev16	r4, r4
 80041ba:	e7aa      	b.n	8004112 <D16_GENERIC+0x4a>
 80041bc:	462e      	mov	r6, r5
 80041be:	9907      	ldr	r1, [sp, #28]
 80041c0:	61d3      	str	r3, [r2, #28]
 80041c2:	9b06      	ldr	r3, [sp, #24]
 80041c4:	6096      	str	r6, [r2, #8]
 80041c6:	2000      	movs	r0, #0
 80041c8:	60d1      	str	r1, [r2, #12]
 80041ca:	f8c2 a010 	str.w	sl, [r2, #16]
 80041ce:	f8c2 b014 	str.w	fp, [r2, #20]
 80041d2:	6193      	str	r3, [r2, #24]
 80041d4:	b009      	add	sp, #36	; 0x24
 80041d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041da:	bf00      	nop
 80041dc:	20000154 	.word	0x20000154
 80041e0:	00030001 	.word	0x00030001
 80041e4:	00010003 	.word	0x00010003

080041e8 <D24_GENERIC>:
 80041e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ec:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80041ee:	6993      	ldr	r3, [r2, #24]
 80041f0:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80041f2:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80041f6:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80041fa:	6894      	ldr	r4, [r2, #8]
 80041fc:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8004200:	b089      	sub	sp, #36	; 0x24
 8004202:	9307      	str	r3, [sp, #28]
 8004204:	9503      	str	r5, [sp, #12]
 8004206:	69d3      	ldr	r3, [r2, #28]
 8004208:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800420a:	9104      	str	r1, [sp, #16]
 800420c:	2e00      	cmp	r6, #0
 800420e:	f000 8096 	beq.w	800433e <D24_GENERIC+0x156>
 8004212:	f005 0610 	and.w	r6, r5, #16
 8004216:	f005 0520 	and.w	r5, r5, #32
 800421a:	4954      	ldr	r1, [pc, #336]	; (800436c <D24_GENERIC+0x184>)
 800421c:	9605      	str	r6, [sp, #20]
 800421e:	9506      	str	r5, [sp, #24]
 8004220:	f04f 0e00 	mov.w	lr, #0
 8004224:	f8cd 9008 	str.w	r9, [sp, #8]
 8004228:	e06a      	b.n	8004300 <D24_GENERIC+0x118>
 800422a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800422e:	f810 8007 	ldrb.w	r8, [r0, r7]
 8004232:	f890 c000 	ldrb.w	ip, [r0]
 8004236:	042d      	lsls	r5, r5, #16
 8004238:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800423c:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8004240:	44ac      	add	ip, r5
 8004242:	4438      	add	r0, r7
 8004244:	fa5f f68c 	uxtb.w	r6, ip
 8004248:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800424c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004250:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8004254:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004258:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800425c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004260:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8004264:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8004268:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800426c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8004270:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8004274:	4d3e      	ldr	r5, [pc, #248]	; (8004370 <D24_GENERIC+0x188>)
 8004276:	fb26 b705 	smlad	r7, r6, r5, fp
 800427a:	4d3e      	ldr	r5, [pc, #248]	; (8004374 <D24_GENERIC+0x18c>)
 800427c:	fb26 4b05 	smlad	fp, r6, r5, r4
 8004280:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8004284:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8004288:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800428c:	2401      	movs	r4, #1
 800428e:	fb26 f604 	smuad	r6, r6, r4
 8004292:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8004296:	9f02      	ldr	r7, [sp, #8]
 8004298:	eb0e 0c04 	add.w	ip, lr, r4
 800429c:	eb08 0406 	add.w	r4, r8, r6
 80042a0:	eb05 060a 	add.w	r6, r5, sl
 80042a4:	1bf6      	subs	r6, r6, r7
 80042a6:	4637      	mov	r7, r6
 80042a8:	ea4f 78e6 	mov.w	r8, r6, asr #31
 80042ac:	e9cd 7800 	strd	r7, r8, [sp]
 80042b0:	9f05      	ldr	r7, [sp, #20]
 80042b2:	b177      	cbz	r7, 80042d2 <D24_GENERIC+0xea>
 80042b4:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80042b8:	9502      	str	r5, [sp, #8]
 80042ba:	fba6 9a08 	umull	r9, sl, r6, r8
 80042be:	9e01      	ldr	r6, [sp, #4]
 80042c0:	fb08 aa06 	mla	sl, r8, r6, sl
 80042c4:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 80042c8:	f14a 0700 	adc.w	r7, sl, #0
 80042cc:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80042d0:	4655      	mov	r5, sl
 80042d2:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80042d4:	9f03      	ldr	r7, [sp, #12]
 80042d6:	03ad      	lsls	r5, r5, #14
 80042d8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80042dc:	f04f 0900 	mov.w	r9, #0
 80042e0:	fb0e fe06 	mul.w	lr, lr, r6
 80042e4:	fbc7 8905 	smlal	r8, r9, r7, r5
 80042e8:	9e04      	ldr	r6, [sp, #16]
 80042ea:	464f      	mov	r7, r9
 80042ec:	10bd      	asrs	r5, r7, #2
 80042ee:	f305 050f 	ssat	r5, #16, r5
 80042f2:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 80042f6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80042f8:	fa1f fe8c 	uxth.w	lr, ip
 80042fc:	4575      	cmp	r5, lr
 80042fe:	d91c      	bls.n	800433a <D24_GENERIC+0x152>
 8004300:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8004302:	b2ef      	uxtb	r7, r5
 8004304:	2d01      	cmp	r5, #1
 8004306:	b23e      	sxth	r6, r7
 8004308:	d18f      	bne.n	800422a <D24_GENERIC+0x42>
 800430a:	9d06      	ldr	r5, [sp, #24]
 800430c:	b15d      	cbz	r5, 8004326 <D24_GENERIC+0x13e>
 800430e:	f01e 0f01 	tst.w	lr, #1
 8004312:	d122      	bne.n	800435a <D24_GENERIC+0x172>
 8004314:	7805      	ldrb	r5, [r0, #0]
 8004316:	78c7      	ldrb	r7, [r0, #3]
 8004318:	7846      	ldrb	r6, [r0, #1]
 800431a:	022d      	lsls	r5, r5, #8
 800431c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8004320:	44b4      	add	ip, r6
 8004322:	3002      	adds	r0, #2
 8004324:	e78e      	b.n	8004244 <D24_GENERIC+0x5c>
 8004326:	7846      	ldrb	r6, [r0, #1]
 8004328:	f890 c002 	ldrb.w	ip, [r0, #2]
 800432c:	f810 5b03 	ldrb.w	r5, [r0], #3
 8004330:	0236      	lsls	r6, r6, #8
 8004332:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8004336:	44ac      	add	ip, r5
 8004338:	e784      	b.n	8004244 <D24_GENERIC+0x5c>
 800433a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800433e:	61d3      	str	r3, [r2, #28]
 8004340:	9b07      	ldr	r3, [sp, #28]
 8004342:	6094      	str	r4, [r2, #8]
 8004344:	2000      	movs	r0, #0
 8004346:	f8c2 b00c 	str.w	fp, [r2, #12]
 800434a:	f8c2 a010 	str.w	sl, [r2, #16]
 800434e:	f8c2 9014 	str.w	r9, [r2, #20]
 8004352:	6193      	str	r3, [r2, #24]
 8004354:	b009      	add	sp, #36	; 0x24
 8004356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800435a:	78c5      	ldrb	r5, [r0, #3]
 800435c:	7887      	ldrb	r7, [r0, #2]
 800435e:	f810 6b04 	ldrb.w	r6, [r0], #4
 8004362:	022d      	lsls	r5, r5, #8
 8004364:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8004368:	44b4      	add	ip, r6
 800436a:	e76b      	b.n	8004244 <D24_GENERIC+0x5c>
 800436c:	20000154 	.word	0x20000154
 8004370:	00030001 	.word	0x00030001
 8004374:	00060007 	.word	0x00060007

08004378 <D32_GENERIC>:
 8004378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800437e:	6993      	ldr	r3, [r2, #24]
 8004380:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004382:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004386:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800438a:	69d6      	ldr	r6, [r2, #28]
 800438c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8004390:	b089      	sub	sp, #36	; 0x24
 8004392:	9307      	str	r3, [sp, #28]
 8004394:	9403      	str	r4, [sp, #12]
 8004396:	6893      	ldr	r3, [r2, #8]
 8004398:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800439a:	9104      	str	r1, [sp, #16]
 800439c:	2d00      	cmp	r5, #0
 800439e:	f000 809f 	beq.w	80044e0 <D32_GENERIC+0x168>
 80043a2:	f004 0510 	and.w	r5, r4, #16
 80043a6:	f004 0420 	and.w	r4, r4, #32
 80043aa:	9505      	str	r5, [sp, #20]
 80043ac:	4953      	ldr	r1, [pc, #332]	; (80044fc <D32_GENERIC+0x184>)
 80043ae:	9406      	str	r4, [sp, #24]
 80043b0:	f04f 0c00 	mov.w	ip, #0
 80043b4:	f8cd 9008 	str.w	r9, [sp, #8]
 80043b8:	461d      	mov	r5, r3
 80043ba:	4617      	mov	r7, r2
 80043bc:	e077      	b.n	80044ae <D32_GENERIC+0x136>
 80043be:	f818 3003 	ldrb.w	r3, [r8, r3]
 80043c2:	f810 800e 	ldrb.w	r8, [r0, lr]
 80043c6:	f810 e002 	ldrb.w	lr, [r0, r2]
 80043ca:	7800      	ldrb	r0, [r0, #0]
 80043cc:	041b      	lsls	r3, r3, #16
 80043ce:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80043d2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80043d6:	4403      	add	r3, r0
 80043d8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80043dc:	b2dc      	uxtb	r4, r3
 80043de:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80043e2:	f3c3 4807 	ubfx	r8, r3, #16, #8
 80043e6:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80043ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80043ee:	0e1b      	lsrs	r3, r3, #24
 80043f0:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 80043f4:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 80043f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043fc:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8004400:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8004404:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8004408:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800440c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004410:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004414:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004418:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800441c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004420:	4b37      	ldr	r3, [pc, #220]	; (8004500 <D32_GENERIC+0x188>)
 8004422:	fb22 b403 	smlad	r4, r2, r3, fp
 8004426:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800442a:	fb2e 4803 	smlad	r8, lr, r3, r4
 800442e:	4b35      	ldr	r3, [pc, #212]	; (8004504 <D32_GENERIC+0x18c>)
 8004430:	fb22 5503 	smlad	r5, r2, r3, r5
 8004434:	4b34      	ldr	r3, [pc, #208]	; (8004508 <D32_GENERIC+0x190>)
 8004436:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800443a:	2301      	movs	r3, #1
 800443c:	fb22 f203 	smuad	r2, r2, r3
 8004440:	4b32      	ldr	r3, [pc, #200]	; (800450c <D32_GENERIC+0x194>)
 8004442:	fb2e 2503 	smlad	r5, lr, r3, r2
 8004446:	9b02      	ldr	r3, [sp, #8]
 8004448:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800444c:	eb04 080a 	add.w	r8, r4, sl
 8004450:	eba8 0803 	sub.w	r8, r8, r3
 8004454:	4642      	mov	r2, r8
 8004456:	17d3      	asrs	r3, r2, #31
 8004458:	e9cd 2300 	strd	r2, r3, [sp]
 800445c:	9b05      	ldr	r3, [sp, #20]
 800445e:	f10c 0e01 	add.w	lr, ip, #1
 8004462:	b16b      	cbz	r3, 8004480 <D32_GENERIC+0x108>
 8004464:	6a3a      	ldr	r2, [r7, #32]
 8004466:	9b01      	ldr	r3, [sp, #4]
 8004468:	9402      	str	r4, [sp, #8]
 800446a:	fba8 8902 	umull	r8, r9, r8, r2
 800446e:	fb02 9903 	mla	r9, r2, r3, r9
 8004472:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004476:	f149 0900 	adc.w	r9, r9, #0
 800447a:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800447e:	4654      	mov	r4, sl
 8004480:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004482:	9a04      	ldr	r2, [sp, #16]
 8004484:	fb0c fc03 	mul.w	ip, ip, r3
 8004488:	9b03      	ldr	r3, [sp, #12]
 800448a:	0364      	lsls	r4, r4, #13
 800448c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004490:	f04f 0900 	mov.w	r9, #0
 8004494:	fbc3 8904 	smlal	r8, r9, r3, r4
 8004498:	464b      	mov	r3, r9
 800449a:	109b      	asrs	r3, r3, #2
 800449c:	f303 030f 	ssat	r3, #16, r3
 80044a0:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 80044a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044a6:	fa1f fc8e 	uxth.w	ip, lr
 80044aa:	4563      	cmp	r3, ip
 80044ac:	d914      	bls.n	80044d8 <D32_GENERIC+0x160>
 80044ae:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80044b0:	b2e2      	uxtb	r2, r4
 80044b2:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 80044b6:	eb00 080e 	add.w	r8, r0, lr
 80044ba:	4253      	negs	r3, r2
 80044bc:	2c01      	cmp	r4, #1
 80044be:	eb08 0403 	add.w	r4, r8, r3
 80044c2:	f47f af7c 	bne.w	80043be <D32_GENERIC+0x46>
 80044c6:	1d02      	adds	r2, r0, #4
 80044c8:	6803      	ldr	r3, [r0, #0]
 80044ca:	9806      	ldr	r0, [sp, #24]
 80044cc:	b110      	cbz	r0, 80044d4 <D32_GENERIC+0x15c>
 80044ce:	ba5b      	rev16	r3, r3
 80044d0:	4610      	mov	r0, r2
 80044d2:	e783      	b.n	80043dc <D32_GENERIC+0x64>
 80044d4:	4610      	mov	r0, r2
 80044d6:	e781      	b.n	80043dc <D32_GENERIC+0x64>
 80044d8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80044dc:	462b      	mov	r3, r5
 80044de:	463a      	mov	r2, r7
 80044e0:	6093      	str	r3, [r2, #8]
 80044e2:	9b07      	ldr	r3, [sp, #28]
 80044e4:	f8c2 b00c 	str.w	fp, [r2, #12]
 80044e8:	2000      	movs	r0, #0
 80044ea:	61d6      	str	r6, [r2, #28]
 80044ec:	f8c2 a010 	str.w	sl, [r2, #16]
 80044f0:	f8c2 9014 	str.w	r9, [r2, #20]
 80044f4:	6193      	str	r3, [r2, #24]
 80044f6:	b009      	add	sp, #36	; 0x24
 80044f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fc:	20000154 	.word	0x20000154
 8004500:	00060003 	.word	0x00060003
 8004504:	000a000c 	.word	0x000a000c
 8004508:	000c000a 	.word	0x000c000a
 800450c:	00030006 	.word	0x00030006

08004510 <D48_GENERIC>:
 8004510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004514:	b089      	sub	sp, #36	; 0x24
 8004516:	6953      	ldr	r3, [r2, #20]
 8004518:	68d4      	ldr	r4, [r2, #12]
 800451a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800451c:	9302      	str	r3, [sp, #8]
 800451e:	9400      	str	r4, [sp, #0]
 8004520:	6993      	ldr	r3, [r2, #24]
 8004522:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004524:	9307      	str	r3, [sp, #28]
 8004526:	9403      	str	r4, [sp, #12]
 8004528:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800452c:	69d6      	ldr	r6, [r2, #28]
 800452e:	6893      	ldr	r3, [r2, #8]
 8004530:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004532:	9104      	str	r1, [sp, #16]
 8004534:	2d00      	cmp	r5, #0
 8004536:	f000 80c5 	beq.w	80046c4 <D48_GENERIC+0x1b4>
 800453a:	f004 0510 	and.w	r5, r4, #16
 800453e:	f004 0420 	and.w	r4, r4, #32
 8004542:	4967      	ldr	r1, [pc, #412]	; (80046e0 <D48_GENERIC+0x1d0>)
 8004544:	9505      	str	r5, [sp, #20]
 8004546:	9406      	str	r4, [sp, #24]
 8004548:	f04f 0c00 	mov.w	ip, #0
 800454c:	4657      	mov	r7, sl
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	e09c      	b.n	800468c <D48_GENERIC+0x17c>
 8004552:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8004556:	f810 b009 	ldrb.w	fp, [r0, r9]
 800455a:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800455e:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8004562:	7800      	ldrb	r0, [r0, #0]
 8004564:	0424      	lsls	r4, r4, #16
 8004566:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800456a:	f818 4005 	ldrb.w	r4, [r8, r5]
 800456e:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8004572:	44a8      	add	r8, r5
 8004574:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8004578:	eb0b 0500 	add.w	r5, fp, r0
 800457c:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8004580:	fa5f f885 	uxtb.w	r8, r5
 8004584:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8004588:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800458c:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8004590:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8004594:	0e2d      	lsrs	r5, r5, #24
 8004596:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800459a:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800459e:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 80045a2:	b2e6      	uxtb	r6, r4
 80045a4:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 80045a8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80045ac:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 80045b0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80045b4:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 80045b8:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 80045bc:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80045c0:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 80045c4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80045c8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80045cc:	f3c6 0909 	ubfx	r9, r6, #0, #10
 80045d0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80045d4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80045d8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80045dc:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 80045e0:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 80045e4:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 80045e8:	4c3e      	ldr	r4, [pc, #248]	; (80046e4 <D48_GENERIC+0x1d4>)
 80045ea:	9d00      	ldr	r5, [sp, #0]
 80045ec:	fb2a 5404 	smlad	r4, sl, r4, r5
 80045f0:	4d3d      	ldr	r5, [pc, #244]	; (80046e8 <D48_GENERIC+0x1d8>)
 80045f2:	fb28 4405 	smlad	r4, r8, r5, r4
 80045f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045fa:	fb2e 4b03 	smlad	fp, lr, r3, r4
 80045fe:	4c3b      	ldr	r4, [pc, #236]	; (80046ec <D48_GENERIC+0x1dc>)
 8004600:	9b01      	ldr	r3, [sp, #4]
 8004602:	fb2a 3304 	smlad	r3, sl, r4, r3
 8004606:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800460a:	fb28 3304 	smlad	r3, r8, r4, r3
 800460e:	4c38      	ldr	r4, [pc, #224]	; (80046f0 <D48_GENERIC+0x1e0>)
 8004610:	fb2e 3304 	smlad	r3, lr, r4, r3
 8004614:	2501      	movs	r5, #1
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	fb2a fa05 	smuad	sl, sl, r5
 800461c:	4b35      	ldr	r3, [pc, #212]	; (80046f4 <D48_GENERIC+0x1e4>)
 800461e:	fb28 a803 	smlad	r8, r8, r3, sl
 8004622:	4b35      	ldr	r3, [pc, #212]	; (80046f8 <D48_GENERIC+0x1e8>)
 8004624:	fb2e 8303 	smlad	r3, lr, r3, r8
 8004628:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	9b02      	ldr	r3, [sp, #8]
 8004630:	eb04 0807 	add.w	r8, r4, r7
 8004634:	eba8 0803 	sub.w	r8, r8, r3
 8004638:	9b05      	ldr	r3, [sp, #20]
 800463a:	4465      	add	r5, ip
 800463c:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8004640:	b163      	cbz	r3, 800465c <D48_GENERIC+0x14c>
 8004642:	6a17      	ldr	r7, [r2, #32]
 8004644:	9402      	str	r4, [sp, #8]
 8004646:	fba8 8907 	umull	r8, r9, r8, r7
 800464a:	fb07 990b 	mla	r9, r7, fp, r9
 800464e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004652:	f149 0900 	adc.w	r9, r9, #0
 8004656:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800465a:	463c      	mov	r4, r7
 800465c:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8004660:	9b03      	ldr	r3, [sp, #12]
 8004662:	02e4      	lsls	r4, r4, #11
 8004664:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004668:	f04f 0900 	mov.w	r9, #0
 800466c:	fb0c fc0e 	mul.w	ip, ip, lr
 8004670:	fbc3 8904 	smlal	r8, r9, r3, r4
 8004674:	9b04      	ldr	r3, [sp, #16]
 8004676:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800467a:	f304 040f 	ssat	r4, #16, r4
 800467e:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8004682:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8004684:	fa1f fc85 	uxth.w	ip, r5
 8004688:	4564      	cmp	r4, ip
 800468a:	d919      	bls.n	80046c0 <D48_GENERIC+0x1b0>
 800468c:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800468e:	fa5f fe84 	uxtb.w	lr, r4
 8004692:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8004696:	f1ce 0500 	rsb	r5, lr, #0
 800469a:	eb00 0b09 	add.w	fp, r0, r9
 800469e:	eb0b 0a05 	add.w	sl, fp, r5
 80046a2:	2c01      	cmp	r4, #1
 80046a4:	eb0a 0809 	add.w	r8, sl, r9
 80046a8:	f47f af53 	bne.w	8004552 <D48_GENERIC+0x42>
 80046ac:	9b06      	ldr	r3, [sp, #24]
 80046ae:	6805      	ldr	r5, [r0, #0]
 80046b0:	6844      	ldr	r4, [r0, #4]
 80046b2:	3006      	adds	r0, #6
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f43f af63 	beq.w	8004580 <D48_GENERIC+0x70>
 80046ba:	ba6d      	rev16	r5, r5
 80046bc:	ba64      	rev16	r4, r4
 80046be:	e75f      	b.n	8004580 <D48_GENERIC+0x70>
 80046c0:	9b01      	ldr	r3, [sp, #4]
 80046c2:	46ba      	mov	sl, r7
 80046c4:	6093      	str	r3, [r2, #8]
 80046c6:	9b00      	ldr	r3, [sp, #0]
 80046c8:	60d3      	str	r3, [r2, #12]
 80046ca:	9b02      	ldr	r3, [sp, #8]
 80046cc:	6153      	str	r3, [r2, #20]
 80046ce:	9b07      	ldr	r3, [sp, #28]
 80046d0:	61d6      	str	r6, [r2, #28]
 80046d2:	2000      	movs	r0, #0
 80046d4:	f8c2 a010 	str.w	sl, [r2, #16]
 80046d8:	6193      	str	r3, [r2, #24]
 80046da:	b009      	add	sp, #36	; 0x24
 80046dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e0:	20000154 	.word	0x20000154
 80046e4:	000f000a 	.word	0x000f000a
 80046e8:	00060003 	.word	0x00060003
 80046ec:	00150019 	.word	0x00150019
 80046f0:	00190015 	.word	0x00190015
 80046f4:	00030006 	.word	0x00030006
 80046f8:	000a000f 	.word	0x000a000f

080046fc <D64_GENERIC>:
 80046fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004700:	b089      	sub	sp, #36	; 0x24
 8004702:	6913      	ldr	r3, [r2, #16]
 8004704:	6895      	ldr	r5, [r2, #8]
 8004706:	9303      	str	r3, [sp, #12]
 8004708:	9501      	str	r5, [sp, #4]
 800470a:	6953      	ldr	r3, [r2, #20]
 800470c:	68d5      	ldr	r5, [r2, #12]
 800470e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8004710:	9304      	str	r3, [sp, #16]
 8004712:	9500      	str	r5, [sp, #0]
 8004714:	6993      	ldr	r3, [r2, #24]
 8004716:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8004718:	9307      	str	r3, [sp, #28]
 800471a:	9505      	str	r5, [sp, #20]
 800471c:	69d3      	ldr	r3, [r2, #28]
 800471e:	9106      	str	r1, [sp, #24]
 8004720:	2c00      	cmp	r4, #0
 8004722:	f000 80d9 	beq.w	80048d8 <D64_GENERIC+0x1dc>
 8004726:	6a11      	ldr	r1, [r2, #32]
 8004728:	9102      	str	r1, [sp, #8]
 800472a:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8004918 <D64_GENERIC+0x21c>
 800472e:	f04f 0c00 	mov.w	ip, #0
 8004732:	4681      	mov	r9, r0
 8004734:	e0c1      	b.n	80048ba <D64_GENERIC+0x1be>
 8004736:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800473a:	4274      	negs	r4, r6
 800473c:	eb09 0708 	add.w	r7, r9, r8
 8004740:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8004744:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8004748:	5d38      	ldrb	r0, [r7, r4]
 800474a:	5d29      	ldrb	r1, [r5, r4]
 800474c:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8004750:	f819 a008 	ldrb.w	sl, [r9, r8]
 8004754:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8004758:	f899 7000 	ldrb.w	r7, [r9]
 800475c:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8004760:	4425      	add	r5, r4
 8004762:	0409      	lsls	r1, r1, #16
 8004764:	0400      	lsls	r0, r0, #16
 8004766:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800476a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800476e:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8004772:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8004776:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800477a:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800477e:	4459      	add	r1, fp
 8004780:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8004784:	4438      	add	r0, r7
 8004786:	b2c5      	uxtb	r5, r0
 8004788:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800478c:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8004790:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8004794:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8004798:	0e00      	lsrs	r0, r0, #24
 800479a:	eb03 0806 	add.w	r8, r3, r6
 800479e:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 80047a2:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 80047a6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80047aa:	b2c8      	uxtb	r0, r1
 80047ac:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80047b0:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80047b4:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 80047b8:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80047bc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80047c0:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 80047c4:	0e09      	lsrs	r1, r1, #24
 80047c6:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 80047ca:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80047ce:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 80047d2:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 80047d6:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 80047da:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80047de:	f3ca 0309 	ubfx	r3, sl, #0, #10
 80047e2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80047e6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80047ea:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80047ee:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 80047f2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80047f6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80047fa:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80047fe:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8004802:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8004806:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800480a:	0a8b      	lsrs	r3, r1, #10
 800480c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004810:	4939      	ldr	r1, [pc, #228]	; (80048f8 <D64_GENERIC+0x1fc>)
 8004812:	9c00      	ldr	r4, [sp, #0]
 8004814:	fb28 4101 	smlad	r1, r8, r1, r4
 8004818:	4c38      	ldr	r4, [pc, #224]	; (80048fc <D64_GENERIC+0x200>)
 800481a:	fb27 1104 	smlad	r1, r7, r4, r1
 800481e:	4c38      	ldr	r4, [pc, #224]	; (8004900 <D64_GENERIC+0x204>)
 8004820:	fb20 1104 	smlad	r1, r0, r4, r1
 8004824:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8004828:	fb2a 1106 	smlad	r1, sl, r6, r1
 800482c:	4c35      	ldr	r4, [pc, #212]	; (8004904 <D64_GENERIC+0x208>)
 800482e:	9d01      	ldr	r5, [sp, #4]
 8004830:	fb28 5404 	smlad	r4, r8, r4, r5
 8004834:	4d33      	ldr	r5, [pc, #204]	; (8004904 <D64_GENERIC+0x208>)
 8004836:	fb2a 4415 	smladx	r4, sl, r5, r4
 800483a:	4d33      	ldr	r5, [pc, #204]	; (8004908 <D64_GENERIC+0x20c>)
 800483c:	fb27 4405 	smlad	r4, r7, r5, r4
 8004840:	fb20 4415 	smladx	r4, r0, r5, r4
 8004844:	2501      	movs	r5, #1
 8004846:	9400      	str	r4, [sp, #0]
 8004848:	fb28 f805 	smuad	r8, r8, r5
 800484c:	4c2f      	ldr	r4, [pc, #188]	; (800490c <D64_GENERIC+0x210>)
 800484e:	fb27 8704 	smlad	r7, r7, r4, r8
 8004852:	4c2f      	ldr	r4, [pc, #188]	; (8004910 <D64_GENERIC+0x214>)
 8004854:	fb20 7004 	smlad	r0, r0, r4, r7
 8004858:	4c2e      	ldr	r4, [pc, #184]	; (8004914 <D64_GENERIC+0x218>)
 800485a:	fb2a 0004 	smlad	r0, sl, r4, r0
 800485e:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8004862:	9902      	ldr	r1, [sp, #8]
 8004864:	9001      	str	r0, [sp, #4]
 8004866:	b189      	cbz	r1, 800488c <D64_GENERIC+0x190>
 8004868:	9803      	ldr	r0, [sp, #12]
 800486a:	9c04      	ldr	r4, [sp, #16]
 800486c:	9604      	str	r6, [sp, #16]
 800486e:	4430      	add	r0, r6
 8004870:	1b00      	subs	r0, r0, r4
 8004872:	17c5      	asrs	r5, r0, #31
 8004874:	460f      	mov	r7, r1
 8004876:	fba0 0101 	umull	r0, r1, r0, r1
 800487a:	fb07 1105 	mla	r1, r7, r5, r1
 800487e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004882:	f141 0100 	adc.w	r1, r1, #0
 8004886:	0049      	lsls	r1, r1, #1
 8004888:	9103      	str	r1, [sp, #12]
 800488a:	460e      	mov	r6, r1
 800488c:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800488e:	9905      	ldr	r1, [sp, #20]
 8004890:	9806      	ldr	r0, [sp, #24]
 8004892:	02b6      	lsls	r6, r6, #10
 8004894:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8004898:	f04f 0800 	mov.w	r8, #0
 800489c:	fb0c f404 	mul.w	r4, ip, r4
 80048a0:	fbc1 7806 	smlal	r7, r8, r1, r6
 80048a4:	4641      	mov	r1, r8
 80048a6:	1089      	asrs	r1, r1, #2
 80048a8:	f301 010f 	ssat	r1, #16, r1
 80048ac:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 80048b0:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 80048b2:	f10c 0c01 	add.w	ip, ip, #1
 80048b6:	4561      	cmp	r1, ip
 80048b8:	dd0e      	ble.n	80048d8 <D64_GENERIC+0x1dc>
 80048ba:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 80048bc:	2e01      	cmp	r6, #1
 80048be:	f47f af3a 	bne.w	8004736 <D64_GENERIC+0x3a>
 80048c2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80048c4:	06b4      	lsls	r4, r6, #26
 80048c6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80048ca:	f109 0908 	add.w	r9, r9, #8
 80048ce:	f57f af5a 	bpl.w	8004786 <D64_GENERIC+0x8a>
 80048d2:	ba40      	rev16	r0, r0
 80048d4:	ba49      	rev16	r1, r1
 80048d6:	e756      	b.n	8004786 <D64_GENERIC+0x8a>
 80048d8:	61d3      	str	r3, [r2, #28]
 80048da:	9b03      	ldr	r3, [sp, #12]
 80048dc:	9901      	ldr	r1, [sp, #4]
 80048de:	6113      	str	r3, [r2, #16]
 80048e0:	9b04      	ldr	r3, [sp, #16]
 80048e2:	6091      	str	r1, [r2, #8]
 80048e4:	6153      	str	r3, [r2, #20]
 80048e6:	9900      	ldr	r1, [sp, #0]
 80048e8:	9b07      	ldr	r3, [sp, #28]
 80048ea:	60d1      	str	r1, [r2, #12]
 80048ec:	2000      	movs	r0, #0
 80048ee:	6193      	str	r3, [r2, #24]
 80048f0:	b009      	add	sp, #36	; 0x24
 80048f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f6:	bf00      	nop
 80048f8:	001c0015 	.word	0x001c0015
 80048fc:	000f000a 	.word	0x000f000a
 8004900:	00060003 	.word	0x00060003
 8004904:	0024002a 	.word	0x0024002a
 8004908:	002e0030 	.word	0x002e0030
 800490c:	00030006 	.word	0x00030006
 8004910:	000a000f 	.word	0x000a000f
 8004914:	0015001c 	.word	0x0015001c
 8004918:	20000154 	.word	0x20000154

0800491c <D80_GENERIC>:
 800491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004920:	b08b      	sub	sp, #44	; 0x2c
 8004922:	6914      	ldr	r4, [r2, #16]
 8004924:	9404      	str	r4, [sp, #16]
 8004926:	6954      	ldr	r4, [r2, #20]
 8004928:	9405      	str	r4, [sp, #20]
 800492a:	6994      	ldr	r4, [r2, #24]
 800492c:	9409      	str	r4, [sp, #36]	; 0x24
 800492e:	6894      	ldr	r4, [r2, #8]
 8004930:	9402      	str	r4, [sp, #8]
 8004932:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004934:	68d4      	ldr	r4, [r2, #12]
 8004936:	9401      	str	r4, [sp, #4]
 8004938:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800493a:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800493e:	9406      	str	r4, [sp, #24]
 8004940:	9107      	str	r1, [sp, #28]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 810f 	beq.w	8004b66 <D80_GENERIC+0x24a>
 8004948:	6a13      	ldr	r3, [r2, #32]
 800494a:	9308      	str	r3, [sp, #32]
 800494c:	2300      	movs	r3, #0
 800494e:	9200      	str	r2, [sp, #0]
 8004950:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8004bb8 <D80_GENERIC+0x29c>
 8004954:	f8cd b00c 	str.w	fp, [sp, #12]
 8004958:	461a      	mov	r2, r3
 800495a:	e0ed      	b.n	8004b38 <D80_GENERIC+0x21c>
 800495c:	fa5f fc8c 	uxtb.w	ip, ip
 8004960:	fa0f f48c 	sxth.w	r4, ip
 8004964:	0066      	lsls	r6, r4, #1
 8004966:	eb06 0804 	add.w	r8, r6, r4
 800496a:	f1cc 0500 	rsb	r5, ip, #0
 800496e:	eb00 0108 	add.w	r1, r0, r8
 8004972:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004976:	194b      	adds	r3, r1, r5
 8004978:	5d49      	ldrb	r1, [r1, r5]
 800497a:	f810 a008 	ldrb.w	sl, [r0, r8]
 800497e:	f813 b004 	ldrb.w	fp, [r3, r4]
 8004982:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8004986:	f890 8000 	ldrb.w	r8, [r0]
 800498a:	eb03 0e04 	add.w	lr, r3, r4
 800498e:	eb0e 0705 	add.w	r7, lr, r5
 8004992:	0409      	lsls	r1, r1, #16
 8004994:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8004998:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800499c:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80049a0:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 80049a4:	eb0a 0004 	add.w	r0, sl, r4
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	f81a a004 	ldrb.w	sl, [sl, r4]
 80049ae:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 80049b2:	5d44      	ldrb	r4, [r0, r5]
 80049b4:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 80049b8:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 80049bc:	4428      	add	r0, r5
 80049be:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80049c2:	4441      	add	r1, r8
 80049c4:	4430      	add	r0, r6
 80049c6:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 80049ca:	441f      	add	r7, r3
 80049cc:	b2cd      	uxtb	r5, r1
 80049ce:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80049d2:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 80049d6:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 80049da:	9b03      	ldr	r3, [sp, #12]
 80049dc:	f3c1 4507 	ubfx	r5, r1, #16, #8
 80049e0:	0e09      	lsrs	r1, r1, #24
 80049e2:	4433      	add	r3, r6
 80049e4:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 80049e8:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 80049ec:	b2fd      	uxtb	r5, r7
 80049ee:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 80049f2:	469b      	mov	fp, r3
 80049f4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80049f8:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 80049fc:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8004a00:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8004a04:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8004a08:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8004a0c:	0e3b      	lsrs	r3, r7, #24
 8004a0e:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8004a12:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8004a16:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004a1a:	fa5f fe84 	uxtb.w	lr, r4
 8004a1e:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8004a22:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004a26:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004a2a:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8004a2e:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8004a32:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8004a36:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8004a3a:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8004a3e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a46:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004a4a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004a4e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004a52:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004a56:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8004a5a:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8004a5e:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8004a62:	0aa3      	lsrs	r3, r4, #10
 8004a64:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004a68:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004a6c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004a70:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8004a74:	9303      	str	r3, [sp, #12]
 8004a76:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8004a7a:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8004a7e:	4b42      	ldr	r3, [pc, #264]	; (8004b88 <D80_GENERIC+0x26c>)
 8004a80:	9901      	ldr	r1, [sp, #4]
 8004a82:	fb2b 1303 	smlad	r3, fp, r3, r1
 8004a86:	4941      	ldr	r1, [pc, #260]	; (8004b8c <D80_GENERIC+0x270>)
 8004a88:	fb28 3301 	smlad	r3, r8, r1, r3
 8004a8c:	4940      	ldr	r1, [pc, #256]	; (8004b90 <D80_GENERIC+0x274>)
 8004a8e:	fb2c 3301 	smlad	r3, ip, r1, r3
 8004a92:	4940      	ldr	r1, [pc, #256]	; (8004b94 <D80_GENERIC+0x278>)
 8004a94:	fb27 3301 	smlad	r3, r7, r1, r3
 8004a98:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004a9c:	fb2e 3301 	smlad	r3, lr, r1, r3
 8004aa0:	493d      	ldr	r1, [pc, #244]	; (8004b98 <D80_GENERIC+0x27c>)
 8004aa2:	9c02      	ldr	r4, [sp, #8]
 8004aa4:	fb2b 4401 	smlad	r4, fp, r1, r4
 8004aa8:	493c      	ldr	r1, [pc, #240]	; (8004b9c <D80_GENERIC+0x280>)
 8004aaa:	fb28 4401 	smlad	r4, r8, r1, r4
 8004aae:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8004ab2:	fb2c 4101 	smlad	r1, ip, r1, r4
 8004ab6:	4c3a      	ldr	r4, [pc, #232]	; (8004ba0 <D80_GENERIC+0x284>)
 8004ab8:	fb27 1104 	smlad	r1, r7, r4, r1
 8004abc:	4c39      	ldr	r4, [pc, #228]	; (8004ba4 <D80_GENERIC+0x288>)
 8004abe:	fb2e 1104 	smlad	r1, lr, r4, r1
 8004ac2:	9101      	str	r1, [sp, #4]
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	fb2b fb01 	smuad	fp, fp, r1
 8004aca:	4937      	ldr	r1, [pc, #220]	; (8004ba8 <D80_GENERIC+0x28c>)
 8004acc:	fb28 b801 	smlad	r8, r8, r1, fp
 8004ad0:	4d36      	ldr	r5, [pc, #216]	; (8004bac <D80_GENERIC+0x290>)
 8004ad2:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8004ad6:	4d36      	ldr	r5, [pc, #216]	; (8004bb0 <D80_GENERIC+0x294>)
 8004ad8:	fb27 c705 	smlad	r7, r7, r5, ip
 8004adc:	4d35      	ldr	r5, [pc, #212]	; (8004bb4 <D80_GENERIC+0x298>)
 8004ade:	fb2e 7105 	smlad	r1, lr, r5, r7
 8004ae2:	9102      	str	r1, [sp, #8]
 8004ae4:	9908      	ldr	r1, [sp, #32]
 8004ae6:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8004aea:	b181      	cbz	r1, 8004b0e <D80_GENERIC+0x1f2>
 8004aec:	9c04      	ldr	r4, [sp, #16]
 8004aee:	9d05      	ldr	r5, [sp, #20]
 8004af0:	9305      	str	r3, [sp, #20]
 8004af2:	441c      	add	r4, r3
 8004af4:	1b64      	subs	r4, r4, r5
 8004af6:	17e7      	asrs	r7, r4, #31
 8004af8:	fba4 4501 	umull	r4, r5, r4, r1
 8004afc:	fb01 5507 	mla	r5, r1, r7, r5
 8004b00:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8004b04:	f145 0500 	adc.w	r5, r5, #0
 8004b08:	0069      	lsls	r1, r5, #1
 8004b0a:	9104      	str	r1, [sp, #16]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	9e00      	ldr	r6, [sp, #0]
 8004b10:	9f06      	ldr	r7, [sp, #24]
 8004b12:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8004b14:	025b      	lsls	r3, r3, #9
 8004b16:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004b1a:	2500      	movs	r5, #0
 8004b1c:	fb02 f101 	mul.w	r1, r2, r1
 8004b20:	fbc7 4503 	smlal	r4, r5, r7, r3
 8004b24:	9c07      	ldr	r4, [sp, #28]
 8004b26:	10ab      	asrs	r3, r5, #2
 8004b28:	f303 030f 	ssat	r3, #16, r3
 8004b2c:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8004b30:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8004b32:	3201      	adds	r2, #1
 8004b34:	4293      	cmp	r3, r2
 8004b36:	dd13      	ble.n	8004b60 <D80_GENERIC+0x244>
 8004b38:	9b00      	ldr	r3, [sp, #0]
 8004b3a:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8004b3e:	f1bc 0f01 	cmp.w	ip, #1
 8004b42:	f47f af0b 	bne.w	800495c <D80_GENERIC+0x40>
 8004b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b48:	6884      	ldr	r4, [r0, #8]
 8004b4a:	069b      	lsls	r3, r3, #26
 8004b4c:	e890 0082 	ldmia.w	r0, {r1, r7}
 8004b50:	f100 000a 	add.w	r0, r0, #10
 8004b54:	f57f af3a 	bpl.w	80049cc <D80_GENERIC+0xb0>
 8004b58:	ba49      	rev16	r1, r1
 8004b5a:	ba7f      	rev16	r7, r7
 8004b5c:	ba64      	rev16	r4, r4
 8004b5e:	e735      	b.n	80049cc <D80_GENERIC+0xb0>
 8004b60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004b64:	4632      	mov	r2, r6
 8004b66:	9b02      	ldr	r3, [sp, #8]
 8004b68:	6093      	str	r3, [r2, #8]
 8004b6a:	9b01      	ldr	r3, [sp, #4]
 8004b6c:	60d3      	str	r3, [r2, #12]
 8004b6e:	9b04      	ldr	r3, [sp, #16]
 8004b70:	6113      	str	r3, [r2, #16]
 8004b72:	9b05      	ldr	r3, [sp, #20]
 8004b74:	6153      	str	r3, [r2, #20]
 8004b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b78:	f8c2 b01c 	str.w	fp, [r2, #28]
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	6193      	str	r3, [r2, #24]
 8004b80:	b00b      	add	sp, #44	; 0x2c
 8004b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b86:	bf00      	nop
 8004b88:	002d0024 	.word	0x002d0024
 8004b8c:	001c0015 	.word	0x001c0015
 8004b90:	000f000a 	.word	0x000f000a
 8004b94:	00060003 	.word	0x00060003
 8004b98:	0037003f 	.word	0x0037003f
 8004b9c:	00450049 	.word	0x00450049
 8004ba0:	00490045 	.word	0x00490045
 8004ba4:	003f0037 	.word	0x003f0037
 8004ba8:	00030006 	.word	0x00030006
 8004bac:	000a000f 	.word	0x000a000f
 8004bb0:	0015001c 	.word	0x0015001c
 8004bb4:	0024002d 	.word	0x0024002d
 8004bb8:	20000154 	.word	0x20000154

08004bbc <D128_GENERIC>:
 8004bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc0:	b093      	sub	sp, #76	; 0x4c
 8004bc2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004bc4:	9005      	str	r0, [sp, #20]
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	9201      	str	r2, [sp, #4]
 8004bca:	6912      	ldr	r2, [r2, #16]
 8004bcc:	920c      	str	r2, [sp, #48]	; 0x30
 8004bce:	4602      	mov	r2, r0
 8004bd0:	6940      	ldr	r0, [r0, #20]
 8004bd2:	900d      	str	r0, [sp, #52]	; 0x34
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4614      	mov	r4, r2
 8004bd8:	6992      	ldr	r2, [r2, #24]
 8004bda:	9211      	str	r2, [sp, #68]	; 0x44
 8004bdc:	69c2      	ldr	r2, [r0, #28]
 8004bde:	9202      	str	r2, [sp, #8]
 8004be0:	68e2      	ldr	r2, [r4, #12]
 8004be2:	6880      	ldr	r0, [r0, #8]
 8004be4:	9203      	str	r2, [sp, #12]
 8004be6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004be8:	9004      	str	r0, [sp, #16]
 8004bea:	920e      	str	r2, [sp, #56]	; 0x38
 8004bec:	910f      	str	r1, [sp, #60]	; 0x3c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 819b 	beq.w	8004f2a <D128_GENERIC+0x36e>
 8004bf4:	6a23      	ldr	r3, [r4, #32]
 8004bf6:	9310      	str	r3, [sp, #64]	; 0x40
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8004fa4 <D128_GENERIC+0x3e8>
 8004bfe:	9306      	str	r3, [sp, #24]
 8004c00:	e17a      	b.n	8004ef8 <D128_GENERIC+0x33c>
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	9d05      	ldr	r5, [sp, #20]
 8004c06:	b214      	sxth	r4, r2
 8004c08:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8004c0c:	4250      	negs	r0, r2
 8004c0e:	eb05 010a 	add.w	r1, r5, sl
 8004c12:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c16:	eb01 0800 	add.w	r8, r1, r0
 8004c1a:	eb0b 0c04 	add.w	ip, fp, r4
 8004c1e:	eb08 070c 	add.w	r7, r8, ip
 8004c22:	183b      	adds	r3, r7, r0
 8004c24:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8004c28:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8004c2c:	eb0e 0604 	add.w	r6, lr, r4
 8004c30:	9307      	str	r3, [sp, #28]
 8004c32:	1833      	adds	r3, r6, r0
 8004c34:	9305      	str	r3, [sp, #20]
 8004c36:	462b      	mov	r3, r5
 8004c38:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8004c3c:	f8cd a020 	str.w	sl, [sp, #32]
 8004c40:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8004c44:	f813 c002 	ldrb.w	ip, [r3, r2]
 8004c48:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8004c4c:	5c3a      	ldrb	r2, [r7, r0]
 8004c4e:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8004c52:	781f      	ldrb	r7, [r3, #0]
 8004c54:	9b07      	ldr	r3, [sp, #28]
 8004c56:	9d05      	ldr	r5, [sp, #20]
 8004c58:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8004c5c:	5c09      	ldrb	r1, [r1, r0]
 8004c5e:	9709      	str	r7, [sp, #36]	; 0x24
 8004c60:	9307      	str	r3, [sp, #28]
 8004c62:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8004c66:	5c33      	ldrb	r3, [r6, r0]
 8004c68:	0412      	lsls	r2, r2, #16
 8004c6a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8004c6e:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8004c72:	9d08      	ldr	r5, [sp, #32]
 8004c74:	eb06 0a04 	add.w	sl, r6, r4
 8004c78:	0409      	lsls	r1, r1, #16
 8004c7a:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8004c7e:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8004c82:	5d36      	ldrb	r6, [r6, r4]
 8004c84:	9c05      	ldr	r4, [sp, #20]
 8004c86:	042d      	lsls	r5, r5, #16
 8004c88:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8004c8c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8004c90:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8004c94:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8004c98:	eb0a 0c00 	add.w	ip, sl, r0
 8004c9c:	041b      	lsls	r3, r3, #16
 8004c9e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8004ca2:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8004ca6:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8004caa:	9d07      	ldr	r5, [sp, #28]
 8004cac:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8004cb0:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8004cb4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004cb6:	4458      	add	r0, fp
 8004cb8:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8004cbc:	9005      	str	r0, [sp, #20]
 8004cbe:	4439      	add	r1, r7
 8004cc0:	442a      	add	r2, r5
 8004cc2:	44b2      	add	sl, r6
 8004cc4:	1918      	adds	r0, r3, r4
 8004cc6:	b2cb      	uxtb	r3, r1
 8004cc8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8004ccc:	9e02      	ldr	r6, [sp, #8]
 8004cce:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004cd2:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8004cd6:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8004cda:	441e      	add	r6, r3
 8004cdc:	0e09      	lsrs	r1, r1, #24
 8004cde:	4633      	mov	r3, r6
 8004ce0:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004ce4:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8004ce8:	b2d4      	uxtb	r4, r2
 8004cea:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004cee:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004cf2:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8004cf6:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004cfa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004cfe:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004d02:	0e12      	lsrs	r2, r2, #24
 8004d04:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8004d08:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8004d0c:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004d10:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8004d14:	9702      	str	r7, [sp, #8]
 8004d16:	b2c2      	uxtb	r2, r0
 8004d18:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8004d1c:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8004d20:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8004d24:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8004d28:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8004d2c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8004d30:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8004d34:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004d38:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8004d3c:	0e00      	lsrs	r0, r0, #24
 8004d3e:	fa5f f68a 	uxtb.w	r6, sl
 8004d42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d46:	9309      	str	r3, [sp, #36]	; 0x24
 8004d48:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8004d4c:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8004d50:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8004d54:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8004d58:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004d5c:	950a      	str	r5, [sp, #40]	; 0x28
 8004d5e:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8004d62:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8004d66:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8004d6a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004d6e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8004d72:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004d76:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d78:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8004d7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d7e:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8004d82:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004d86:	9307      	str	r3, [sp, #28]
 8004d88:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004d8c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8004d90:	9b02      	ldr	r3, [sp, #8]
 8004d92:	f8cd c008 	str.w	ip, [sp, #8]
 8004d96:	4694      	mov	ip, r2
 8004d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d9a:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8004d9e:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8004da2:	9a02      	ldr	r2, [sp, #8]
 8004da4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004da8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8004dac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004db0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004db2:	f8cd a020 	str.w	sl, [sp, #32]
 8004db6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004dba:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8004dbe:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004dc2:	9b07      	ldr	r3, [sp, #28]
 8004dc4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004dc8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8004dcc:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8004dd0:	9a08      	ldr	r2, [sp, #32]
 8004dd2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dda:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004dde:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004de2:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8004de6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004dea:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004dee:	0a96      	lsrs	r6, r2, #10
 8004df0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004df4:	9602      	str	r6, [sp, #8]
 8004df6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004dfa:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8004dfe:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8004e02:	4e53      	ldr	r6, [pc, #332]	; (8004f50 <D128_GENERIC+0x394>)
 8004e04:	9f03      	ldr	r7, [sp, #12]
 8004e06:	fb2c 7606 	smlad	r6, ip, r6, r7
 8004e0a:	4f52      	ldr	r7, [pc, #328]	; (8004f54 <D128_GENERIC+0x398>)
 8004e0c:	fb2a 6607 	smlad	r6, sl, r7, r6
 8004e10:	4f51      	ldr	r7, [pc, #324]	; (8004f58 <D128_GENERIC+0x39c>)
 8004e12:	fb21 6607 	smlad	r6, r1, r7, r6
 8004e16:	4f51      	ldr	r7, [pc, #324]	; (8004f5c <D128_GENERIC+0x3a0>)
 8004e18:	fb24 6607 	smlad	r6, r4, r7, r6
 8004e1c:	4f50      	ldr	r7, [pc, #320]	; (8004f60 <D128_GENERIC+0x3a4>)
 8004e1e:	fb28 6607 	smlad	r6, r8, r7, r6
 8004e22:	4f50      	ldr	r7, [pc, #320]	; (8004f64 <D128_GENERIC+0x3a8>)
 8004e24:	fb20 6607 	smlad	r6, r0, r7, r6
 8004e28:	4f4f      	ldr	r7, [pc, #316]	; (8004f68 <D128_GENERIC+0x3ac>)
 8004e2a:	fb23 6607 	smlad	r6, r3, r7, r6
 8004e2e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8004e32:	fb25 6607 	smlad	r6, r5, r7, r6
 8004e36:	4f4d      	ldr	r7, [pc, #308]	; (8004f6c <D128_GENERIC+0x3b0>)
 8004e38:	9a04      	ldr	r2, [sp, #16]
 8004e3a:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8004e3e:	4a4c      	ldr	r2, [pc, #304]	; (8004f70 <D128_GENERIC+0x3b4>)
 8004e40:	fb2a ee02 	smlad	lr, sl, r2, lr
 8004e44:	4f4b      	ldr	r7, [pc, #300]	; (8004f74 <D128_GENERIC+0x3b8>)
 8004e46:	fb21 ee07 	smlad	lr, r1, r7, lr
 8004e4a:	4f4b      	ldr	r7, [pc, #300]	; (8004f78 <D128_GENERIC+0x3bc>)
 8004e4c:	fb24 ee07 	smlad	lr, r4, r7, lr
 8004e50:	4f4a      	ldr	r7, [pc, #296]	; (8004f7c <D128_GENERIC+0x3c0>)
 8004e52:	fb28 ee07 	smlad	lr, r8, r7, lr
 8004e56:	4f4a      	ldr	r7, [pc, #296]	; (8004f80 <D128_GENERIC+0x3c4>)
 8004e58:	fb20 ee07 	smlad	lr, r0, r7, lr
 8004e5c:	4f49      	ldr	r7, [pc, #292]	; (8004f84 <D128_GENERIC+0x3c8>)
 8004e5e:	fb23 e707 	smlad	r7, r3, r7, lr
 8004e62:	f8df e144 	ldr.w	lr, [pc, #324]	; 8004fa8 <D128_GENERIC+0x3ec>
 8004e66:	fb25 720e 	smlad	r2, r5, lr, r7
 8004e6a:	f04f 0b01 	mov.w	fp, #1
 8004e6e:	9203      	str	r2, [sp, #12]
 8004e70:	fb2c fb0b 	smuad	fp, ip, fp
 8004e74:	4f44      	ldr	r7, [pc, #272]	; (8004f88 <D128_GENERIC+0x3cc>)
 8004e76:	fb2a ba07 	smlad	sl, sl, r7, fp
 8004e7a:	4f44      	ldr	r7, [pc, #272]	; (8004f8c <D128_GENERIC+0x3d0>)
 8004e7c:	fb21 aa07 	smlad	sl, r1, r7, sl
 8004e80:	4f43      	ldr	r7, [pc, #268]	; (8004f90 <D128_GENERIC+0x3d4>)
 8004e82:	fb24 aa07 	smlad	sl, r4, r7, sl
 8004e86:	4f43      	ldr	r7, [pc, #268]	; (8004f94 <D128_GENERIC+0x3d8>)
 8004e88:	fb28 a707 	smlad	r7, r8, r7, sl
 8004e8c:	4a42      	ldr	r2, [pc, #264]	; (8004f98 <D128_GENERIC+0x3dc>)
 8004e8e:	fb20 7702 	smlad	r7, r0, r2, r7
 8004e92:	4a42      	ldr	r2, [pc, #264]	; (8004f9c <D128_GENERIC+0x3e0>)
 8004e94:	fb23 7702 	smlad	r7, r3, r2, r7
 8004e98:	4b41      	ldr	r3, [pc, #260]	; (8004fa0 <D128_GENERIC+0x3e4>)
 8004e9a:	fb25 7303 	smlad	r3, r5, r3, r7
 8004e9e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004ea0:	9304      	str	r3, [sp, #16]
 8004ea2:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8004ea6:	b185      	cbz	r5, 8004eca <D128_GENERIC+0x30e>
 8004ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004eaa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004eac:	960d      	str	r6, [sp, #52]	; 0x34
 8004eae:	4432      	add	r2, r6
 8004eb0:	1a52      	subs	r2, r2, r1
 8004eb2:	17d1      	asrs	r1, r2, #31
 8004eb4:	fba2 2305 	umull	r2, r3, r2, r5
 8004eb8:	fb05 3301 	mla	r3, r5, r1, r3
 8004ebc:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004ec0:	f143 0300 	adc.w	r3, r3, #0
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8004ec8:	461e      	mov	r6, r3
 8004eca:	9801      	ldr	r0, [sp, #4]
 8004ecc:	9c06      	ldr	r4, [sp, #24]
 8004ece:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8004ed0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004ed2:	01f6      	lsls	r6, r6, #7
 8004ed4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ed8:	2300      	movs	r3, #0
 8004eda:	fbc5 2306 	smlal	r2, r3, r5, r6
 8004ede:	fb04 f101 	mul.w	r1, r4, r1
 8004ee2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ee4:	109b      	asrs	r3, r3, #2
 8004ee6:	f303 030f 	ssat	r3, #16, r3
 8004eea:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8004eee:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8004ef0:	1c62      	adds	r2, r4, #1
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	9206      	str	r2, [sp, #24]
 8004ef6:	dd18      	ble.n	8004f2a <D128_GENERIC+0x36e>
 8004ef8:	9b01      	ldr	r3, [sp, #4]
 8004efa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8004efc:	2a01      	cmp	r2, #1
 8004efe:	f47f ae80 	bne.w	8004c02 <D128_GENERIC+0x46>
 8004f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f04:	9d05      	ldr	r5, [sp, #20]
 8004f06:	069b      	lsls	r3, r3, #26
 8004f08:	6829      	ldr	r1, [r5, #0]
 8004f0a:	686a      	ldr	r2, [r5, #4]
 8004f0c:	68a8      	ldr	r0, [r5, #8]
 8004f0e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8004f12:	f105 0410 	add.w	r4, r5, #16
 8004f16:	d506      	bpl.n	8004f26 <D128_GENERIC+0x36a>
 8004f18:	ba49      	rev16	r1, r1
 8004f1a:	ba52      	rev16	r2, r2
 8004f1c:	ba40      	rev16	r0, r0
 8004f1e:	fa9a fa9a 	rev16.w	sl, sl
 8004f22:	9405      	str	r4, [sp, #20]
 8004f24:	e6cf      	b.n	8004cc6 <D128_GENERIC+0x10a>
 8004f26:	9405      	str	r4, [sp, #20]
 8004f28:	e6cd      	b.n	8004cc6 <D128_GENERIC+0x10a>
 8004f2a:	9a01      	ldr	r2, [sp, #4]
 8004f2c:	9904      	ldr	r1, [sp, #16]
 8004f2e:	6091      	str	r1, [r2, #8]
 8004f30:	9903      	ldr	r1, [sp, #12]
 8004f32:	60d1      	str	r1, [r2, #12]
 8004f34:	9b02      	ldr	r3, [sp, #8]
 8004f36:	61d3      	str	r3, [r2, #28]
 8004f38:	4611      	mov	r1, r2
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f3e:	610a      	str	r2, [r1, #16]
 8004f40:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f42:	6159      	str	r1, [r3, #20]
 8004f44:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004f46:	6199      	str	r1, [r3, #24]
 8004f48:	2000      	movs	r0, #0
 8004f4a:	b013      	add	sp, #76	; 0x4c
 8004f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f50:	00780069 	.word	0x00780069
 8004f54:	005b004e 	.word	0x005b004e
 8004f58:	00420037 	.word	0x00420037
 8004f5c:	002d0024 	.word	0x002d0024
 8004f60:	001c0015 	.word	0x001c0015
 8004f64:	000f000a 	.word	0x000f000a
 8004f68:	00060003 	.word	0x00060003
 8004f6c:	00880096 	.word	0x00880096
 8004f70:	00a200ac 	.word	0x00a200ac
 8004f74:	00b400ba 	.word	0x00b400ba
 8004f78:	00be00c0 	.word	0x00be00c0
 8004f7c:	00c000be 	.word	0x00c000be
 8004f80:	00ba00b4 	.word	0x00ba00b4
 8004f84:	00ac00a2 	.word	0x00ac00a2
 8004f88:	00030006 	.word	0x00030006
 8004f8c:	000a000f 	.word	0x000a000f
 8004f90:	0015001c 	.word	0x0015001c
 8004f94:	0024002d 	.word	0x0024002d
 8004f98:	00370042 	.word	0x00370042
 8004f9c:	004e005b 	.word	0x004e005b
 8004fa0:	00690078 	.word	0x00690078
 8004fa4:	20000154 	.word	0x20000154
 8004fa8:	00960088 	.word	0x00960088

08004fac <D16_1CH_HTONS_VOL_HP>:
 8004fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb0:	4691      	mov	r9, r2
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004fb6:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8004fba:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	4680      	mov	r8, r0
 8004fc2:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8004fc6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8004fca:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004fce:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8004fd2:	9401      	str	r4, [sp, #4]
 8004fd4:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8004fd8:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8004fdc:	2a00      	cmp	r2, #0
 8004fde:	d04e      	beq.n	800507e <D16_1CH_HTONS_VOL_HP+0xd2>
 8004fe0:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800508c <D16_1CH_HTONS_VOL_HP+0xe0>
 8004fe4:	1e8c      	subs	r4, r1, #2
 8004fe6:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8004fea:	f858 2b02 	ldr.w	r2, [r8], #2
 8004fee:	ba52      	rev16	r2, r2
 8004ff0:	b2d6      	uxtb	r6, r2
 8004ff2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004ff6:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8004ffa:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8004ffe:	4413      	add	r3, r2
 8005000:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8005004:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8005008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800500c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005010:	0a93      	lsrs	r3, r2, #10
 8005012:	4a1c      	ldr	r2, [pc, #112]	; (8005084 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8005014:	fb21 5202 	smlad	r2, r1, r2, r5
 8005018:	4d1b      	ldr	r5, [pc, #108]	; (8005088 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800501a:	fb21 f505 	smuad	r5, r1, r5
 800501e:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8005022:	4410      	add	r0, r2
 8005024:	1bc0      	subs	r0, r0, r7
 8005026:	17c7      	asrs	r7, r0, #31
 8005028:	fba0 010e 	umull	r0, r1, r0, lr
 800502c:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005030:	fb0e 1107 	mla	r1, lr, r7, r1
 8005034:	f141 0100 	adc.w	r1, r1, #0
 8005038:	0448      	lsls	r0, r1, #17
 800503a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800503e:	2700      	movs	r7, #0
 8005040:	fbc0 670a 	smlal	r6, r7, r0, sl
 8005044:	45d8      	cmp	r8, fp
 8005046:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800504a:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800504e:	4617      	mov	r7, r2
 8005050:	f301 010f 	ssat	r1, #16, r1
 8005054:	f824 1f02 	strh.w	r1, [r4, #2]!
 8005058:	d1c7      	bne.n	8004fea <D16_1CH_HTONS_VOL_HP+0x3e>
 800505a:	9901      	ldr	r1, [sp, #4]
 800505c:	f8c9 301c 	str.w	r3, [r9, #28]
 8005060:	9b00      	ldr	r3, [sp, #0]
 8005062:	f8c9 0010 	str.w	r0, [r9, #16]
 8005066:	2000      	movs	r0, #0
 8005068:	f8c9 5008 	str.w	r5, [r9, #8]
 800506c:	f8c9 100c 	str.w	r1, [r9, #12]
 8005070:	f8c9 2014 	str.w	r2, [r9, #20]
 8005074:	f8c9 3018 	str.w	r3, [r9, #24]
 8005078:	b003      	add	sp, #12
 800507a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800507e:	463a      	mov	r2, r7
 8005080:	4621      	mov	r1, r4
 8005082:	e7eb      	b.n	800505c <D16_1CH_HTONS_VOL_HP+0xb0>
 8005084:	00030001 	.word	0x00030001
 8005088:	00010003 	.word	0x00010003
 800508c:	20000154 	.word	0x20000154

08005090 <D24_1CH_HTONS_VOL_HP>:
 8005090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005094:	b089      	sub	sp, #36	; 0x24
 8005096:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005098:	6996      	ldr	r6, [r2, #24]
 800509a:	9304      	str	r3, [sp, #16]
 800509c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800509e:	9207      	str	r2, [sp, #28]
 80050a0:	6915      	ldr	r5, [r2, #16]
 80050a2:	6954      	ldr	r4, [r2, #20]
 80050a4:	9606      	str	r6, [sp, #24]
 80050a6:	6893      	ldr	r3, [r2, #8]
 80050a8:	69d6      	ldr	r6, [r2, #28]
 80050aa:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 80050ae:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80050b2:	9a04      	ldr	r2, [sp, #16]
 80050b4:	9705      	str	r7, [sp, #20]
 80050b6:	2a00      	cmp	r2, #0
 80050b8:	d07e      	beq.n	80051b8 <D24_1CH_HTONS_VOL_HP+0x128>
 80050ba:	f1a1 0b02 	sub.w	fp, r1, #2
 80050be:	2700      	movs	r7, #0
 80050c0:	46a8      	mov	r8, r5
 80050c2:	f8cd b004 	str.w	fp, [sp, #4]
 80050c6:	4655      	mov	r5, sl
 80050c8:	46e3      	mov	fp, ip
 80050ca:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 80051c4 <D24_1CH_HTONS_VOL_HP+0x134>
 80050ce:	46ba      	mov	sl, r7
 80050d0:	469c      	mov	ip, r3
 80050d2:	e055      	b.n	8005180 <D24_1CH_HTONS_VOL_HP+0xf0>
 80050d4:	7802      	ldrb	r2, [r0, #0]
 80050d6:	78c3      	ldrb	r3, [r0, #3]
 80050d8:	7841      	ldrb	r1, [r0, #1]
 80050da:	0212      	lsls	r2, r2, #8
 80050dc:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 80050e0:	440b      	add	r3, r1
 80050e2:	3002      	adds	r0, #2
 80050e4:	b2d9      	uxtb	r1, r3
 80050e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80050ea:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 80050ee:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 80050f2:	0c1b      	lsrs	r3, r3, #16
 80050f4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80050f8:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80050fc:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8005100:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8005104:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8005108:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800510c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8005110:	4a2a      	ldr	r2, [pc, #168]	; (80051bc <D24_1CH_HTONS_VOL_HP+0x12c>)
 8005112:	fb23 b102 	smlad	r1, r3, r2, fp
 8005116:	4a2a      	ldr	r2, [pc, #168]	; (80051c0 <D24_1CH_HTONS_VOL_HP+0x130>)
 8005118:	fb23 cb02 	smlad	fp, r3, r2, ip
 800511c:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8005120:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8005124:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8005128:	2201      	movs	r2, #1
 800512a:	fb23 f702 	smuad	r7, r3, r2
 800512e:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8005132:	eb01 0208 	add.w	r2, r1, r8
 8005136:	1b12      	subs	r2, r2, r4
 8005138:	17d4      	asrs	r4, r2, #31
 800513a:	fba2 2305 	umull	r2, r3, r2, r5
 800513e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005142:	fb05 3304 	mla	r3, r5, r4, r3
 8005146:	f143 0300 	adc.w	r3, r3, #0
 800514a:	9c05      	ldr	r4, [sp, #20]
 800514c:	03da      	lsls	r2, r3, #15
 800514e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005152:	f04f 0900 	mov.w	r9, #0
 8005156:	fbc4 8902 	smlal	r8, r9, r4, r2
 800515a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800515e:	9a01      	ldr	r2, [sp, #4]
 8005160:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005164:	9b03      	ldr	r3, [sp, #12]
 8005166:	109b      	asrs	r3, r3, #2
 8005168:	f303 030f 	ssat	r3, #16, r3
 800516c:	f822 3f02 	strh.w	r3, [r2, #2]!
 8005170:	9b04      	ldr	r3, [sp, #16]
 8005172:	9201      	str	r2, [sp, #4]
 8005174:	f10a 0a01 	add.w	sl, sl, #1
 8005178:	459a      	cmp	sl, r3
 800517a:	44bc      	add	ip, r7
 800517c:	460c      	mov	r4, r1
 800517e:	d00b      	beq.n	8005198 <D24_1CH_HTONS_VOL_HP+0x108>
 8005180:	f01a 0f01 	tst.w	sl, #1
 8005184:	d0a6      	beq.n	80050d4 <D24_1CH_HTONS_VOL_HP+0x44>
 8005186:	78c2      	ldrb	r2, [r0, #3]
 8005188:	7883      	ldrb	r3, [r0, #2]
 800518a:	f810 1b04 	ldrb.w	r1, [r0], #4
 800518e:	0212      	lsls	r2, r2, #8
 8005190:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005194:	440b      	add	r3, r1
 8005196:	e7a5      	b.n	80050e4 <D24_1CH_HTONS_VOL_HP+0x54>
 8005198:	4663      	mov	r3, ip
 800519a:	4645      	mov	r5, r8
 800519c:	46dc      	mov	ip, fp
 800519e:	9807      	ldr	r0, [sp, #28]
 80051a0:	6141      	str	r1, [r0, #20]
 80051a2:	9906      	ldr	r1, [sp, #24]
 80051a4:	6083      	str	r3, [r0, #8]
 80051a6:	f8c0 c00c 	str.w	ip, [r0, #12]
 80051aa:	61c6      	str	r6, [r0, #28]
 80051ac:	6105      	str	r5, [r0, #16]
 80051ae:	6181      	str	r1, [r0, #24]
 80051b0:	2000      	movs	r0, #0
 80051b2:	b009      	add	sp, #36	; 0x24
 80051b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b8:	4621      	mov	r1, r4
 80051ba:	e7f0      	b.n	800519e <D24_1CH_HTONS_VOL_HP+0x10e>
 80051bc:	00030001 	.word	0x00030001
 80051c0:	00060007 	.word	0x00060007
 80051c4:	20000154 	.word	0x20000154

080051c8 <D32_1CH_HTONS_VOL_HP>:
 80051c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051cc:	4692      	mov	sl, r2
 80051ce:	b087      	sub	sp, #28
 80051d0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80051d2:	f8da 3018 	ldr.w	r3, [sl, #24]
 80051d6:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 80051da:	9304      	str	r3, [sp, #16]
 80051dc:	f8da 4010 	ldr.w	r4, [sl, #16]
 80051e0:	f8da 8014 	ldr.w	r8, [sl, #20]
 80051e4:	f8da 601c 	ldr.w	r6, [sl, #28]
 80051e8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80051ec:	f8da e00c 	ldr.w	lr, [sl, #12]
 80051f0:	9501      	str	r5, [sp, #4]
 80051f2:	f8da c020 	ldr.w	ip, [sl, #32]
 80051f6:	2a00      	cmp	r2, #0
 80051f8:	d07b      	beq.n	80052f2 <D32_1CH_HTONS_VOL_HP+0x12a>
 80051fa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80051fe:	4f3e      	ldr	r7, [pc, #248]	; (80052f8 <D32_1CH_HTONS_VOL_HP+0x130>)
 8005200:	f8cd c00c 	str.w	ip, [sp, #12]
 8005204:	9202      	str	r2, [sp, #8]
 8005206:	460d      	mov	r5, r1
 8005208:	46a1      	mov	r9, r4
 800520a:	4684      	mov	ip, r0
 800520c:	f8cd a014 	str.w	sl, [sp, #20]
 8005210:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005214:	ba49      	rev16	r1, r1
 8005216:	b2c8      	uxtb	r0, r1
 8005218:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800521c:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8005220:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8005224:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005228:	0e09      	lsrs	r1, r1, #24
 800522a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800522e:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8005232:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8005236:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800523a:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800523e:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8005242:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005246:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800524a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800524e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005252:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8005256:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800525a:	4a28      	ldr	r2, [pc, #160]	; (80052fc <D32_1CH_HTONS_VOL_HP+0x134>)
 800525c:	fb20 e202 	smlad	r2, r0, r2, lr
 8005260:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005264:	fb2a 2101 	smlad	r1, sl, r1, r2
 8005268:	4a25      	ldr	r2, [pc, #148]	; (8005300 <D32_1CH_HTONS_VOL_HP+0x138>)
 800526a:	fb20 3302 	smlad	r3, r0, r2, r3
 800526e:	4a25      	ldr	r2, [pc, #148]	; (8005304 <D32_1CH_HTONS_VOL_HP+0x13c>)
 8005270:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8005274:	2301      	movs	r3, #1
 8005276:	fb20 f003 	smuad	r0, r0, r3
 800527a:	4b23      	ldr	r3, [pc, #140]	; (8005308 <D32_1CH_HTONS_VOL_HP+0x140>)
 800527c:	fb2a 0303 	smlad	r3, sl, r3, r0
 8005280:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8005284:	9c03      	ldr	r4, [sp, #12]
 8005286:	eb02 0009 	add.w	r0, r2, r9
 800528a:	eba0 0008 	sub.w	r0, r0, r8
 800528e:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8005292:	fba0 0104 	umull	r0, r1, r0, r4
 8005296:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800529a:	fb04 110b 	mla	r1, r4, fp, r1
 800529e:	f141 0100 	adc.w	r1, r1, #0
 80052a2:	9c01      	ldr	r4, [sp, #4]
 80052a4:	0388      	lsls	r0, r1, #14
 80052a6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80052aa:	f04f 0900 	mov.w	r9, #0
 80052ae:	fbc0 8904 	smlal	r8, r9, r0, r4
 80052b2:	ea4f 00a9 	mov.w	r0, r9, asr #2
 80052b6:	ea4f 0941 	mov.w	r9, r1, lsl #1
 80052ba:	f300 000f 	ssat	r0, #16, r0
 80052be:	9902      	ldr	r1, [sp, #8]
 80052c0:	f825 0b02 	strh.w	r0, [r5], #2
 80052c4:	428d      	cmp	r5, r1
 80052c6:	4690      	mov	r8, r2
 80052c8:	d1a2      	bne.n	8005210 <D32_1CH_HTONS_VOL_HP+0x48>
 80052ca:	f8dd a014 	ldr.w	sl, [sp, #20]
 80052ce:	464c      	mov	r4, r9
 80052d0:	f8ca 3008 	str.w	r3, [sl, #8]
 80052d4:	9b04      	ldr	r3, [sp, #16]
 80052d6:	f8ca e00c 	str.w	lr, [sl, #12]
 80052da:	2000      	movs	r0, #0
 80052dc:	f8ca 601c 	str.w	r6, [sl, #28]
 80052e0:	f8ca 4010 	str.w	r4, [sl, #16]
 80052e4:	f8ca 2014 	str.w	r2, [sl, #20]
 80052e8:	f8ca 3018 	str.w	r3, [sl, #24]
 80052ec:	b007      	add	sp, #28
 80052ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f2:	4642      	mov	r2, r8
 80052f4:	e7ec      	b.n	80052d0 <D32_1CH_HTONS_VOL_HP+0x108>
 80052f6:	bf00      	nop
 80052f8:	20000154 	.word	0x20000154
 80052fc:	00060003 	.word	0x00060003
 8005300:	000a000c 	.word	0x000a000c
 8005304:	000c000a 	.word	0x000c000a
 8005308:	00030006 	.word	0x00030006

0800530c <D48_1CH_HTONS_VOL_HP>:
 800530c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005310:	4613      	mov	r3, r2
 8005312:	461c      	mov	r4, r3
 8005314:	b087      	sub	sp, #28
 8005316:	4625      	mov	r5, r4
 8005318:	4626      	mov	r6, r4
 800531a:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800531c:	9205      	str	r2, [sp, #20]
 800531e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005320:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8005324:	9501      	str	r5, [sp, #4]
 8005326:	4680      	mov	r8, r0
 8005328:	6a35      	ldr	r5, [r6, #32]
 800532a:	6918      	ldr	r0, [r3, #16]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	9304      	str	r3, [sp, #16]
 8005330:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8005334:	68a3      	ldr	r3, [r4, #8]
 8005336:	9502      	str	r5, [sp, #8]
 8005338:	68e4      	ldr	r4, [r4, #12]
 800533a:	2a00      	cmp	r2, #0
 800533c:	f000 808c 	beq.w	8005458 <D48_1CH_HTONS_VOL_HP+0x14c>
 8005340:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005344:	4d45      	ldr	r5, [pc, #276]	; (800545c <D48_1CH_HTONS_VOL_HP+0x150>)
 8005346:	9203      	str	r2, [sp, #12]
 8005348:	468c      	mov	ip, r1
 800534a:	e898 0044 	ldmia.w	r8, {r2, r6}
 800534e:	f108 0806 	add.w	r8, r8, #6
 8005352:	ba52      	rev16	r2, r2
 8005354:	ba76      	rev16	r6, r6
 8005356:	b2d7      	uxtb	r7, r2
 8005358:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800535c:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8005360:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8005364:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8005368:	0e12      	lsrs	r2, r2, #24
 800536a:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800536e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8005372:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8005376:	fa5f fb86 	uxtb.w	fp, r6
 800537a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800537e:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8005382:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8005386:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800538a:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800538e:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005392:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8005396:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800539a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800539e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80053a2:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 80053a6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80053aa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80053ae:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80053b2:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80053b6:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 80053ba:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 80053be:	4a28      	ldr	r2, [pc, #160]	; (8005460 <D48_1CH_HTONS_VOL_HP+0x154>)
 80053c0:	fb2a 4202 	smlad	r2, sl, r2, r4
 80053c4:	4927      	ldr	r1, [pc, #156]	; (8005464 <D48_1CH_HTONS_VOL_HP+0x158>)
 80053c6:	fb27 2201 	smlad	r2, r7, r1, r2
 80053ca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80053ce:	fb26 2201 	smlad	r2, r6, r1, r2
 80053d2:	4925      	ldr	r1, [pc, #148]	; (8005468 <D48_1CH_HTONS_VOL_HP+0x15c>)
 80053d4:	fb2a 3401 	smlad	r4, sl, r1, r3
 80053d8:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 80053dc:	fb27 4403 	smlad	r4, r7, r3, r4
 80053e0:	4b22      	ldr	r3, [pc, #136]	; (800546c <D48_1CH_HTONS_VOL_HP+0x160>)
 80053e2:	fb26 4403 	smlad	r4, r6, r3, r4
 80053e6:	2101      	movs	r1, #1
 80053e8:	fb2a fa01 	smuad	sl, sl, r1
 80053ec:	4b20      	ldr	r3, [pc, #128]	; (8005470 <D48_1CH_HTONS_VOL_HP+0x164>)
 80053ee:	fb27 a703 	smlad	r7, r7, r3, sl
 80053f2:	4b20      	ldr	r3, [pc, #128]	; (8005474 <D48_1CH_HTONS_VOL_HP+0x168>)
 80053f4:	fb26 7303 	smlad	r3, r6, r3, r7
 80053f8:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 80053fc:	9e02      	ldr	r6, [sp, #8]
 80053fe:	9f01      	ldr	r7, [sp, #4]
 8005400:	4410      	add	r0, r2
 8005402:	eba0 0009 	sub.w	r0, r0, r9
 8005406:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800540a:	fba0 0106 	umull	r0, r1, r0, r6
 800540e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005412:	fb06 110a 	mla	r1, r6, sl, r1
 8005416:	f141 0100 	adc.w	r1, r1, #0
 800541a:	0308      	lsls	r0, r1, #12
 800541c:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8005420:	f04f 0a00 	mov.w	sl, #0
 8005424:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8005428:	4657      	mov	r7, sl
 800542a:	10b8      	asrs	r0, r7, #2
 800542c:	f300 000f 	ssat	r0, #16, r0
 8005430:	f82c 0b02 	strh.w	r0, [ip], #2
 8005434:	0048      	lsls	r0, r1, #1
 8005436:	9903      	ldr	r1, [sp, #12]
 8005438:	458c      	cmp	ip, r1
 800543a:	4691      	mov	r9, r2
 800543c:	d185      	bne.n	800534a <D48_1CH_HTONS_VOL_HP+0x3e>
 800543e:	9d05      	ldr	r5, [sp, #20]
 8005440:	616a      	str	r2, [r5, #20]
 8005442:	9a04      	ldr	r2, [sp, #16]
 8005444:	6128      	str	r0, [r5, #16]
 8005446:	2000      	movs	r0, #0
 8005448:	60ab      	str	r3, [r5, #8]
 800544a:	60ec      	str	r4, [r5, #12]
 800544c:	f8c5 e01c 	str.w	lr, [r5, #28]
 8005450:	61aa      	str	r2, [r5, #24]
 8005452:	b007      	add	sp, #28
 8005454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005458:	464a      	mov	r2, r9
 800545a:	e7f0      	b.n	800543e <D48_1CH_HTONS_VOL_HP+0x132>
 800545c:	20000154 	.word	0x20000154
 8005460:	000f000a 	.word	0x000f000a
 8005464:	00060003 	.word	0x00060003
 8005468:	00150019 	.word	0x00150019
 800546c:	00190015 	.word	0x00190015
 8005470:	00030006 	.word	0x00030006
 8005474:	000a000f 	.word	0x000a000f

08005478 <D64_1CH_HTONS_VOL_HP>:
 8005478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547c:	b089      	sub	sp, #36	; 0x24
 800547e:	4614      	mov	r4, r2
 8005480:	9207      	str	r2, [sp, #28]
 8005482:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005484:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8005488:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800548c:	6992      	ldr	r2, [r2, #24]
 800548e:	9206      	str	r2, [sp, #24]
 8005490:	68e2      	ldr	r2, [r4, #12]
 8005492:	9201      	str	r2, [sp, #4]
 8005494:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005496:	9203      	str	r2, [sp, #12]
 8005498:	6a22      	ldr	r2, [r4, #32]
 800549a:	69e5      	ldr	r5, [r4, #28]
 800549c:	68a6      	ldr	r6, [r4, #8]
 800549e:	9204      	str	r2, [sp, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80b0 	beq.w	8005606 <D64_1CH_HTONS_VOL_HP+0x18e>
 80054a6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80054aa:	4f58      	ldr	r7, [pc, #352]	; (800560c <D64_1CH_HTONS_VOL_HP+0x194>)
 80054ac:	9305      	str	r3, [sp, #20]
 80054ae:	9102      	str	r1, [sp, #8]
 80054b0:	f850 2b08 	ldr.w	r2, [r0], #8
 80054b4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80054b8:	ba52      	rev16	r2, r2
 80054ba:	fa93 f993 	rev16.w	r9, r3
 80054be:	b2d4      	uxtb	r4, r2
 80054c0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80054c4:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 80054c8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80054cc:	9901      	ldr	r1, [sp, #4]
 80054ce:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80054d2:	0e12      	lsrs	r2, r2, #24
 80054d4:	44ab      	add	fp, r5
 80054d6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80054da:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 80054de:	fa5f f289 	uxtb.w	r2, r9
 80054e2:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 80054e6:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80054ea:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 80054ee:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80054f2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80054f6:	f3c9 4507 	ubfx	r5, r9, #16, #8
 80054fa:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 80054fe:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8005502:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8005506:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800550a:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800550e:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8005512:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005516:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800551a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800551e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005522:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800552a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800552e:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8005532:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005536:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800553a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800553e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8005542:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8005546:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800554a:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800554e:	4b30      	ldr	r3, [pc, #192]	; (8005610 <D64_1CH_HTONS_VOL_HP+0x198>)
 8005550:	fb2b 1303 	smlad	r3, fp, r3, r1
 8005554:	492f      	ldr	r1, [pc, #188]	; (8005614 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8005556:	fb24 3301 	smlad	r3, r4, r1, r3
 800555a:	492f      	ldr	r1, [pc, #188]	; (8005618 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800555c:	fb22 3301 	smlad	r3, r2, r1, r3
 8005560:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8005564:	fb2e 390a 	smlad	r9, lr, sl, r3
 8005568:	4b2c      	ldr	r3, [pc, #176]	; (800561c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800556a:	fb2b 6603 	smlad	r6, fp, r3, r6
 800556e:	fb2e 6613 	smladx	r6, lr, r3, r6
 8005572:	4b2b      	ldr	r3, [pc, #172]	; (8005620 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8005574:	fb24 6603 	smlad	r6, r4, r3, r6
 8005578:	fb22 6313 	smladx	r3, r2, r3, r6
 800557c:	f04f 0a01 	mov.w	sl, #1
 8005580:	9301      	str	r3, [sp, #4]
 8005582:	fb2b fb0a 	smuad	fp, fp, sl
 8005586:	4b27      	ldr	r3, [pc, #156]	; (8005624 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8005588:	fb24 ba03 	smlad	sl, r4, r3, fp
 800558c:	4b26      	ldr	r3, [pc, #152]	; (8005628 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800558e:	fb22 a203 	smlad	r2, r2, r3, sl
 8005592:	4b26      	ldr	r3, [pc, #152]	; (800562c <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8005594:	fb2e 2603 	smlad	r6, lr, r3, r2
 8005598:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800559c:	eb0a 020c 	add.w	r2, sl, ip
 80055a0:	9c04      	ldr	r4, [sp, #16]
 80055a2:	9903      	ldr	r1, [sp, #12]
 80055a4:	eba2 0208 	sub.w	r2, r2, r8
 80055a8:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80055ac:	fba2 2304 	umull	r2, r3, r2, r4
 80055b0:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80055b4:	fb04 3309 	mla	r3, r4, r9, r3
 80055b8:	f143 0300 	adc.w	r3, r3, #0
 80055bc:	02da      	lsls	r2, r3, #11
 80055be:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80055c2:	f04f 0900 	mov.w	r9, #0
 80055c6:	fbc1 8902 	smlal	r8, r9, r1, r2
 80055ca:	9902      	ldr	r1, [sp, #8]
 80055cc:	ea4f 02a9 	mov.w	r2, r9, asr #2
 80055d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80055d4:	f302 020f 	ssat	r2, #16, r2
 80055d8:	9b05      	ldr	r3, [sp, #20]
 80055da:	f821 2b02 	strh.w	r2, [r1], #2
 80055de:	4299      	cmp	r1, r3
 80055e0:	9102      	str	r1, [sp, #8]
 80055e2:	46d0      	mov	r8, sl
 80055e4:	f47f af64 	bne.w	80054b0 <D64_1CH_HTONS_VOL_HP+0x38>
 80055e8:	9a07      	ldr	r2, [sp, #28]
 80055ea:	9901      	ldr	r1, [sp, #4]
 80055ec:	60d1      	str	r1, [r2, #12]
 80055ee:	9906      	ldr	r1, [sp, #24]
 80055f0:	6096      	str	r6, [r2, #8]
 80055f2:	2000      	movs	r0, #0
 80055f4:	61d5      	str	r5, [r2, #28]
 80055f6:	f8c2 c010 	str.w	ip, [r2, #16]
 80055fa:	f8c2 a014 	str.w	sl, [r2, #20]
 80055fe:	6191      	str	r1, [r2, #24]
 8005600:	b009      	add	sp, #36	; 0x24
 8005602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005606:	46c2      	mov	sl, r8
 8005608:	4622      	mov	r2, r4
 800560a:	e7ee      	b.n	80055ea <D64_1CH_HTONS_VOL_HP+0x172>
 800560c:	20000154 	.word	0x20000154
 8005610:	001c0015 	.word	0x001c0015
 8005614:	000f000a 	.word	0x000f000a
 8005618:	00060003 	.word	0x00060003
 800561c:	0024002a 	.word	0x0024002a
 8005620:	002e0030 	.word	0x002e0030
 8005624:	00030006 	.word	0x00030006
 8005628:	000a000f 	.word	0x000a000f
 800562c:	0015001c 	.word	0x0015001c

08005630 <D80_1CH_HTONS_VOL_HP>:
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	4613      	mov	r3, r2
 8005636:	b089      	sub	sp, #36	; 0x24
 8005638:	4686      	mov	lr, r0
 800563a:	6918      	ldr	r0, [r3, #16]
 800563c:	9000      	str	r0, [sp, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	461c      	mov	r4, r3
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	9302      	str	r3, [sp, #8]
 8005646:	6983      	ldr	r3, [r0, #24]
 8005648:	9306      	str	r3, [sp, #24]
 800564a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800564e:	69c3      	ldr	r3, [r0, #28]
 8005650:	68c0      	ldr	r0, [r0, #12]
 8005652:	9207      	str	r2, [sp, #28]
 8005654:	9001      	str	r0, [sp, #4]
 8005656:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005658:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800565a:	9003      	str	r0, [sp, #12]
 800565c:	6a20      	ldr	r0, [r4, #32]
 800565e:	9004      	str	r0, [sp, #16]
 8005660:	2a00      	cmp	r2, #0
 8005662:	f000 80d2 	beq.w	800580a <D80_1CH_HTONS_VOL_HP+0x1da>
 8005666:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800566a:	4869      	ldr	r0, [pc, #420]	; (8005810 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800566c:	9205      	str	r2, [sp, #20]
 800566e:	461c      	mov	r4, r3
 8005670:	f8de 5000 	ldr.w	r5, [lr]
 8005674:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005678:	f8de 3008 	ldr.w	r3, [lr, #8]
 800567c:	f10e 0e0a 	add.w	lr, lr, #10
 8005680:	ba6d      	rev16	r5, r5
 8005682:	ba52      	rev16	r2, r2
 8005684:	fa93 fb93 	rev16.w	fp, r3
 8005688:	b2ee      	uxtb	r6, r5
 800568a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800568e:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8005692:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005696:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800569a:	eb04 0a07 	add.w	sl, r4, r7
 800569e:	0e2d      	lsrs	r5, r5, #24
 80056a0:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80056a4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80056a8:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 80056ac:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 80056b0:	b2d5      	uxtb	r5, r2
 80056b2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80056b6:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 80056ba:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 80056be:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80056c2:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 80056c6:	0e12      	lsrs	r2, r2, #24
 80056c8:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 80056cc:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 80056d0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80056d4:	fa5f f48b 	uxtb.w	r4, fp
 80056d8:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80056dc:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80056e0:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80056e4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80056e8:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 80056ec:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80056f0:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 80056f4:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 80056f8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80056fc:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8005700:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005704:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005708:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800570c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005710:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8005714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005718:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800571c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005720:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005724:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8005728:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800572c:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8005730:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005734:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8005738:	4d36      	ldr	r5, [pc, #216]	; (8005814 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800573a:	9f01      	ldr	r7, [sp, #4]
 800573c:	fb23 7505 	smlad	r5, r3, r5, r7
 8005740:	4f35      	ldr	r7, [pc, #212]	; (8005818 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8005742:	fb29 5507 	smlad	r5, r9, r7, r5
 8005746:	4f35      	ldr	r7, [pc, #212]	; (800581c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8005748:	fb28 5507 	smlad	r5, r8, r7, r5
 800574c:	4f34      	ldr	r7, [pc, #208]	; (8005820 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800574e:	fb22 5507 	smlad	r5, r2, r7, r5
 8005752:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8005756:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800575a:	4d32      	ldr	r5, [pc, #200]	; (8005824 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800575c:	fb23 cc05 	smlad	ip, r3, r5, ip
 8005760:	4d31      	ldr	r5, [pc, #196]	; (8005828 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8005762:	fb29 cc05 	smlad	ip, r9, r5, ip
 8005766:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800576a:	fb28 c505 	smlad	r5, r8, r5, ip
 800576e:	4f2f      	ldr	r7, [pc, #188]	; (800582c <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8005770:	fb22 5507 	smlad	r5, r2, r7, r5
 8005774:	4f2e      	ldr	r7, [pc, #184]	; (8005830 <D80_1CH_HTONS_VOL_HP+0x200>)
 8005776:	fb26 5507 	smlad	r5, r6, r7, r5
 800577a:	f04f 0a01 	mov.w	sl, #1
 800577e:	9501      	str	r5, [sp, #4]
 8005780:	fb23 fa0a 	smuad	sl, r3, sl
 8005784:	4b2b      	ldr	r3, [pc, #172]	; (8005834 <D80_1CH_HTONS_VOL_HP+0x204>)
 8005786:	fb29 a903 	smlad	r9, r9, r3, sl
 800578a:	4d2b      	ldr	r5, [pc, #172]	; (8005838 <D80_1CH_HTONS_VOL_HP+0x208>)
 800578c:	fb28 9805 	smlad	r8, r8, r5, r9
 8005790:	4d2a      	ldr	r5, [pc, #168]	; (800583c <D80_1CH_HTONS_VOL_HP+0x20c>)
 8005792:	fb22 8205 	smlad	r2, r2, r5, r8
 8005796:	4b2a      	ldr	r3, [pc, #168]	; (8005840 <D80_1CH_HTONS_VOL_HP+0x210>)
 8005798:	fb26 2c03 	smlad	ip, r6, r3, r2
 800579c:	9b00      	ldr	r3, [sp, #0]
 800579e:	9d04      	ldr	r5, [sp, #16]
 80057a0:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 80057a4:	4453      	add	r3, sl
 80057a6:	461a      	mov	r2, r3
 80057a8:	9b02      	ldr	r3, [sp, #8]
 80057aa:	f8cd a008 	str.w	sl, [sp, #8]
 80057ae:	1ad2      	subs	r2, r2, r3
 80057b0:	17d7      	asrs	r7, r2, #31
 80057b2:	fba2 2305 	umull	r2, r3, r2, r5
 80057b6:	fb05 3307 	mla	r3, r5, r7, r3
 80057ba:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80057be:	f143 0300 	adc.w	r3, r3, #0
 80057c2:	9d03      	ldr	r5, [sp, #12]
 80057c4:	029a      	lsls	r2, r3, #10
 80057c6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80057ca:	2700      	movs	r7, #0
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	fbc5 6702 	smlal	r6, r7, r5, r2
 80057d2:	10ba      	asrs	r2, r7, #2
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	f302 020f 	ssat	r2, #16, r2
 80057da:	9b05      	ldr	r3, [sp, #20]
 80057dc:	f821 2b02 	strh.w	r2, [r1], #2
 80057e0:	4299      	cmp	r1, r3
 80057e2:	f47f af45 	bne.w	8005670 <D80_1CH_HTONS_VOL_HP+0x40>
 80057e6:	4623      	mov	r3, r4
 80057e8:	9907      	ldr	r1, [sp, #28]
 80057ea:	9801      	ldr	r0, [sp, #4]
 80057ec:	60c8      	str	r0, [r1, #12]
 80057ee:	9a00      	ldr	r2, [sp, #0]
 80057f0:	f8c1 c008 	str.w	ip, [r1, #8]
 80057f4:	4608      	mov	r0, r1
 80057f6:	61cb      	str	r3, [r1, #28]
 80057f8:	610a      	str	r2, [r1, #16]
 80057fa:	f8c1 a014 	str.w	sl, [r1, #20]
 80057fe:	9906      	ldr	r1, [sp, #24]
 8005800:	6181      	str	r1, [r0, #24]
 8005802:	2000      	movs	r0, #0
 8005804:	b009      	add	sp, #36	; 0x24
 8005806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800580e:	e7eb      	b.n	80057e8 <D80_1CH_HTONS_VOL_HP+0x1b8>
 8005810:	20000154 	.word	0x20000154
 8005814:	002d0024 	.word	0x002d0024
 8005818:	001c0015 	.word	0x001c0015
 800581c:	000f000a 	.word	0x000f000a
 8005820:	00060003 	.word	0x00060003
 8005824:	0037003f 	.word	0x0037003f
 8005828:	00450049 	.word	0x00450049
 800582c:	00490045 	.word	0x00490045
 8005830:	003f0037 	.word	0x003f0037
 8005834:	00030006 	.word	0x00030006
 8005838:	000a000f 	.word	0x000a000f
 800583c:	0015001c 	.word	0x0015001c
 8005840:	0024002d 	.word	0x0024002d

08005844 <D128_1CH_HTONS_VOL_HP>:
 8005844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005848:	b093      	sub	sp, #76	; 0x4c
 800584a:	4614      	mov	r4, r2
 800584c:	9211      	str	r2, [sp, #68]	; 0x44
 800584e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005850:	6912      	ldr	r2, [r2, #16]
 8005852:	9203      	str	r2, [sp, #12]
 8005854:	4622      	mov	r2, r4
 8005856:	4615      	mov	r5, r2
 8005858:	6964      	ldr	r4, [r4, #20]
 800585a:	9406      	str	r4, [sp, #24]
 800585c:	4614      	mov	r4, r2
 800585e:	6992      	ldr	r2, [r2, #24]
 8005860:	9210      	str	r2, [sp, #64]	; 0x40
 8005862:	68ea      	ldr	r2, [r5, #12]
 8005864:	9204      	str	r2, [sp, #16]
 8005866:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005868:	69e6      	ldr	r6, [r4, #28]
 800586a:	920d      	str	r2, [sp, #52]	; 0x34
 800586c:	68a4      	ldr	r4, [r4, #8]
 800586e:	6a2a      	ldr	r2, [r5, #32]
 8005870:	9405      	str	r4, [sp, #20]
 8005872:	920e      	str	r2, [sp, #56]	; 0x38
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 8145 	beq.w	8005b04 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800587a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800587e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005880:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8005b60 <D128_1CH_HTONS_VOL_HP+0x31c>
 8005884:	9107      	str	r1, [sp, #28]
 8005886:	f100 0310 	add.w	r3, r0, #16
 800588a:	4699      	mov	r9, r3
 800588c:	f1a9 0110 	sub.w	r1, r9, #16
 8005890:	c90e      	ldmia	r1, {r1, r2, r3}
 8005892:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8005896:	ba49      	rev16	r1, r1
 8005898:	ba52      	rev16	r2, r2
 800589a:	ba5b      	rev16	r3, r3
 800589c:	fa90 fa90 	rev16.w	sl, r0
 80058a0:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80058a4:	b2cc      	uxtb	r4, r1
 80058a6:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 80058aa:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80058ae:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80058b2:	0e09      	lsrs	r1, r1, #24
 80058b4:	4426      	add	r6, r4
 80058b6:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 80058ba:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 80058be:	b2d0      	uxtb	r0, r2
 80058c0:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80058c4:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 80058c8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80058cc:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 80058d0:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80058d4:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80058d8:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80058dc:	0e12      	lsrs	r2, r2, #24
 80058de:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 80058e2:	9701      	str	r7, [sp, #4]
 80058e4:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80058e8:	4627      	mov	r7, r4
 80058ea:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 80058ee:	9702      	str	r7, [sp, #8]
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80058f6:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 80058fa:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 80058fe:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8005902:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 8005906:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800590a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800590e:	0e1b      	lsrs	r3, r3, #24
 8005910:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8005914:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8005918:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800591c:	fa5f f38a 	uxtb.w	r3, sl
 8005920:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005924:	960a      	str	r6, [sp, #40]	; 0x28
 8005926:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800592a:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800592e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005932:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8005936:	950b      	str	r5, [sp, #44]	; 0x2c
 8005938:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800593c:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8005940:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005944:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8005948:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800594c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8005950:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8005954:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8005958:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800595c:	9308      	str	r3, [sp, #32]
 800595e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005962:	9b01      	ldr	r3, [sp, #4]
 8005964:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8005968:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800596c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8005970:	9b02      	ldr	r3, [sp, #8]
 8005972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005976:	9302      	str	r3, [sp, #8]
 8005978:	9b08      	ldr	r3, [sp, #32]
 800597a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800597e:	9308      	str	r3, [sp, #32]
 8005980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005982:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005986:	950c      	str	r5, [sp, #48]	; 0x30
 8005988:	461d      	mov	r5, r3
 800598a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800598c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005990:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005994:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8005998:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	9b02      	ldr	r3, [sp, #8]
 80059a0:	9202      	str	r2, [sp, #8]
 80059a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059a6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80059aa:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80059ae:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80059b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80059b6:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80059ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80059be:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 80059c2:	9b08      	ldr	r3, [sp, #32]
 80059c4:	9f01      	ldr	r7, [sp, #4]
 80059c6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80059ca:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80059ce:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80059d2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80059d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80059da:	46be      	mov	lr, r7
 80059dc:	0a96      	lsrs	r6, r2, #10
 80059de:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80059e2:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 80059e6:	4f49      	ldr	r7, [pc, #292]	; (8005b0c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 80059e8:	9a04      	ldr	r2, [sp, #16]
 80059ea:	fb2e 2e07 	smlad	lr, lr, r7, r2
 80059ee:	4a48      	ldr	r2, [pc, #288]	; (8005b10 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 80059f0:	fb2a ee02 	smlad	lr, sl, r2, lr
 80059f4:	4a47      	ldr	r2, [pc, #284]	; (8005b14 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 80059f6:	fb21 ee02 	smlad	lr, r1, r2, lr
 80059fa:	4a47      	ldr	r2, [pc, #284]	; (8005b18 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 80059fc:	fb24 ee02 	smlad	lr, r4, r2, lr
 8005a00:	4a46      	ldr	r2, [pc, #280]	; (8005b1c <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8005a02:	9f02      	ldr	r7, [sp, #8]
 8005a04:	fb27 ee02 	smlad	lr, r7, r2, lr
 8005a08:	4a45      	ldr	r2, [pc, #276]	; (8005b20 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8005a0a:	fb20 ee02 	smlad	lr, r0, r2, lr
 8005a0e:	4a45      	ldr	r2, [pc, #276]	; (8005b24 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8005a10:	fb23 e702 	smlad	r7, r3, r2, lr
 8005a14:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8005a18:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8005a1c:	9f01      	ldr	r7, [sp, #4]
 8005a1e:	4a42      	ldr	r2, [pc, #264]	; (8005b28 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8005a20:	46bc      	mov	ip, r7
 8005a22:	9f05      	ldr	r7, [sp, #20]
 8005a24:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8005a28:	4a40      	ldr	r2, [pc, #256]	; (8005b2c <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8005a2a:	fb2a cc02 	smlad	ip, sl, r2, ip
 8005a2e:	4f40      	ldr	r7, [pc, #256]	; (8005b30 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8005a30:	fb21 cc07 	smlad	ip, r1, r7, ip
 8005a34:	4f3f      	ldr	r7, [pc, #252]	; (8005b34 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8005a36:	fb24 cc07 	smlad	ip, r4, r7, ip
 8005a3a:	4f3f      	ldr	r7, [pc, #252]	; (8005b38 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8005a3c:	9a02      	ldr	r2, [sp, #8]
 8005a3e:	fb22 cc07 	smlad	ip, r2, r7, ip
 8005a42:	4f3e      	ldr	r7, [pc, #248]	; (8005b3c <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8005a44:	fb20 cc07 	smlad	ip, r0, r7, ip
 8005a48:	4f3d      	ldr	r7, [pc, #244]	; (8005b40 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8005a4a:	fb23 c707 	smlad	r7, r3, r7, ip
 8005a4e:	f8df c114 	ldr.w	ip, [pc, #276]	; 8005b64 <D128_1CH_HTONS_VOL_HP+0x320>
 8005a52:	fb25 720c 	smlad	r2, r5, ip, r7
 8005a56:	f04f 0b01 	mov.w	fp, #1
 8005a5a:	9204      	str	r2, [sp, #16]
 8005a5c:	9f01      	ldr	r7, [sp, #4]
 8005a5e:	fb27 fb0b 	smuad	fp, r7, fp
 8005a62:	4f38      	ldr	r7, [pc, #224]	; (8005b44 <D128_1CH_HTONS_VOL_HP+0x300>)
 8005a64:	fb2a ba07 	smlad	sl, sl, r7, fp
 8005a68:	4f37      	ldr	r7, [pc, #220]	; (8005b48 <D128_1CH_HTONS_VOL_HP+0x304>)
 8005a6a:	fb21 aa07 	smlad	sl, r1, r7, sl
 8005a6e:	4f37      	ldr	r7, [pc, #220]	; (8005b4c <D128_1CH_HTONS_VOL_HP+0x308>)
 8005a70:	fb24 aa07 	smlad	sl, r4, r7, sl
 8005a74:	4f36      	ldr	r7, [pc, #216]	; (8005b50 <D128_1CH_HTONS_VOL_HP+0x30c>)
 8005a76:	9a02      	ldr	r2, [sp, #8]
 8005a78:	fb22 a707 	smlad	r7, r2, r7, sl
 8005a7c:	4a35      	ldr	r2, [pc, #212]	; (8005b54 <D128_1CH_HTONS_VOL_HP+0x310>)
 8005a7e:	fb20 7702 	smlad	r7, r0, r2, r7
 8005a82:	4a35      	ldr	r2, [pc, #212]	; (8005b58 <D128_1CH_HTONS_VOL_HP+0x314>)
 8005a84:	fb23 7702 	smlad	r7, r3, r2, r7
 8005a88:	4b34      	ldr	r3, [pc, #208]	; (8005b5c <D128_1CH_HTONS_VOL_HP+0x318>)
 8005a8a:	fb25 7303 	smlad	r3, r5, r3, r7
 8005a8e:	9305      	str	r3, [sp, #20]
 8005a90:	9b03      	ldr	r3, [sp, #12]
 8005a92:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005a94:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8005a98:	4473      	add	r3, lr
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	9b06      	ldr	r3, [sp, #24]
 8005a9e:	f8cd e018 	str.w	lr, [sp, #24]
 8005aa2:	1ad2      	subs	r2, r2, r3
 8005aa4:	17d1      	asrs	r1, r2, #31
 8005aa6:	fba2 2304 	umull	r2, r3, r2, r4
 8005aaa:	fb04 3301 	mla	r3, r4, r1, r3
 8005aae:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005ab2:	f143 0300 	adc.w	r3, r3, #0
 8005ab6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005ab8:	021a      	lsls	r2, r3, #8
 8005aba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005abe:	2100      	movs	r1, #0
 8005ac0:	fbc4 0102 	smlal	r0, r1, r4, r2
 8005ac4:	108a      	asrs	r2, r1, #2
 8005ac6:	9907      	ldr	r1, [sp, #28]
 8005ac8:	f302 020f 	ssat	r2, #16, r2
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	f821 2b02 	strh.w	r2, [r1], #2
 8005ad2:	9303      	str	r3, [sp, #12]
 8005ad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ad6:	9107      	str	r1, [sp, #28]
 8005ad8:	4299      	cmp	r1, r3
 8005ada:	f109 0910 	add.w	r9, r9, #16
 8005ade:	f47f aed5 	bne.w	800588c <D128_1CH_HTONS_VOL_HP+0x48>
 8005ae2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ae4:	9905      	ldr	r1, [sp, #20]
 8005ae6:	6091      	str	r1, [r2, #8]
 8005ae8:	9904      	ldr	r1, [sp, #16]
 8005aea:	60d1      	str	r1, [r2, #12]
 8005aec:	4613      	mov	r3, r2
 8005aee:	61d6      	str	r6, [r2, #28]
 8005af0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005af2:	9a03      	ldr	r2, [sp, #12]
 8005af4:	611a      	str	r2, [r3, #16]
 8005af6:	2000      	movs	r0, #0
 8005af8:	f8c3 e014 	str.w	lr, [r3, #20]
 8005afc:	6199      	str	r1, [r3, #24]
 8005afe:	b013      	add	sp, #76	; 0x4c
 8005b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b04:	f8dd e018 	ldr.w	lr, [sp, #24]
 8005b08:	e7eb      	b.n	8005ae2 <D128_1CH_HTONS_VOL_HP+0x29e>
 8005b0a:	bf00      	nop
 8005b0c:	00780069 	.word	0x00780069
 8005b10:	005b004e 	.word	0x005b004e
 8005b14:	00420037 	.word	0x00420037
 8005b18:	002d0024 	.word	0x002d0024
 8005b1c:	001c0015 	.word	0x001c0015
 8005b20:	000f000a 	.word	0x000f000a
 8005b24:	00060003 	.word	0x00060003
 8005b28:	00880096 	.word	0x00880096
 8005b2c:	00a200ac 	.word	0x00a200ac
 8005b30:	00b400ba 	.word	0x00b400ba
 8005b34:	00be00c0 	.word	0x00be00c0
 8005b38:	00c000be 	.word	0x00c000be
 8005b3c:	00ba00b4 	.word	0x00ba00b4
 8005b40:	00ac00a2 	.word	0x00ac00a2
 8005b44:	00030006 	.word	0x00030006
 8005b48:	000a000f 	.word	0x000a000f
 8005b4c:	0015001c 	.word	0x0015001c
 8005b50:	0024002d 	.word	0x0024002d
 8005b54:	00370042 	.word	0x00370042
 8005b58:	004e005b 	.word	0x004e005b
 8005b5c:	00690078 	.word	0x00690078
 8005b60:	20000154 	.word	0x20000154
 8005b64:	00960088 	.word	0x00960088

08005b68 <PDM_Filter_Init>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	2240      	movs	r2, #64	; 0x40
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	2100      	movs	r1, #0
 8005b70:	300c      	adds	r0, #12
 8005b72:	f000 f9f9 	bl	8005f68 <memset>
 8005b76:	493b      	ldr	r1, [pc, #236]	; (8005c64 <PDM_Filter_Init+0xfc>)
 8005b78:	483b      	ldr	r0, [pc, #236]	; (8005c68 <PDM_Filter_Init+0x100>)
 8005b7a:	f000 f98d 	bl	8005e98 <CRC_Lock>
 8005b7e:	8822      	ldrh	r2, [r4, #0]
 8005b80:	8963      	ldrh	r3, [r4, #10]
 8005b82:	4938      	ldr	r1, [pc, #224]	; (8005c64 <PDM_Filter_Init+0xfc>)
 8005b84:	8925      	ldrh	r5, [r4, #8]
 8005b86:	86a3      	strh	r3, [r4, #52]	; 0x34
 8005b88:	2801      	cmp	r0, #1
 8005b8a:	f04f 0300 	mov.w	r3, #0
 8005b8e:	bf18      	it	ne
 8005b90:	2100      	movne	r1, #0
 8005b92:	2a01      	cmp	r2, #1
 8005b94:	6461      	str	r1, [r4, #68]	; 0x44
 8005b96:	86e5      	strh	r5, [r4, #54]	; 0x36
 8005b98:	61a3      	str	r3, [r4, #24]
 8005b9a:	6123      	str	r3, [r4, #16]
 8005b9c:	6163      	str	r3, [r4, #20]
 8005b9e:	60e3      	str	r3, [r4, #12]
 8005ba0:	6263      	str	r3, [r4, #36]	; 0x24
 8005ba2:	61e3      	str	r3, [r4, #28]
 8005ba4:	6223      	str	r3, [r4, #32]
 8005ba6:	6423      	str	r3, [r4, #64]	; 0x40
 8005ba8:	d918      	bls.n	8005bdc <PDM_Filter_Init+0x74>
 8005baa:	2003      	movs	r0, #3
 8005bac:	2302      	movs	r3, #2
 8005bae:	8862      	ldrh	r2, [r4, #2]
 8005bb0:	2a01      	cmp	r2, #1
 8005bb2:	d91d      	bls.n	8005bf0 <PDM_Filter_Init+0x88>
 8005bb4:	2140      	movs	r1, #64	; 0x40
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005bba:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8005bbe:	6862      	ldr	r2, [r4, #4]
 8005bc0:	bf04      	itt	eq
 8005bc2:	6421      	streq	r1, [r4, #64]	; 0x40
 8005bc4:	460b      	moveq	r3, r1
 8005bc6:	b11a      	cbz	r2, 8005bd0 <PDM_Filter_Init+0x68>
 8005bc8:	f043 0310 	orr.w	r3, r3, #16
 8005bcc:	6423      	str	r3, [r4, #64]	; 0x40
 8005bce:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	8722      	strh	r2, [r4, #56]	; 0x38
 8005bd4:	b908      	cbnz	r0, 8005bda <PDM_Filter_Init+0x72>
 8005bd6:	3380      	adds	r3, #128	; 0x80
 8005bd8:	6423      	str	r3, [r4, #64]	; 0x40
 8005bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bdc:	4d23      	ldr	r5, [pc, #140]	; (8005c6c <PDM_Filter_Init+0x104>)
 8005bde:	d010      	beq.n	8005c02 <PDM_Filter_Init+0x9a>
 8005be0:	782a      	ldrb	r2, [r5, #0]
 8005be2:	2a01      	cmp	r2, #1
 8005be4:	d027      	beq.n	8005c36 <PDM_Filter_Init+0xce>
 8005be6:	8862      	ldrh	r2, [r4, #2]
 8005be8:	2a01      	cmp	r2, #1
 8005bea:	f04f 0001 	mov.w	r0, #1
 8005bee:	d8e1      	bhi.n	8005bb4 <PDM_Filter_Init+0x4c>
 8005bf0:	d001      	beq.n	8005bf6 <PDM_Filter_Init+0x8e>
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	e7de      	b.n	8005bb4 <PDM_Filter_Init+0x4c>
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	6422      	str	r2, [r4, #64]	; 0x40
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	2160      	movs	r1, #96	; 0x60
 8005c00:	e7da      	b.n	8005bb8 <PDM_Filter_Init+0x50>
 8005c02:	7829      	ldrb	r1, [r5, #0]
 8005c04:	2900      	cmp	r1, #0
 8005c06:	d1ee      	bne.n	8005be6 <PDM_Filter_Init+0x7e>
 8005c08:	4919      	ldr	r1, [pc, #100]	; (8005c70 <PDM_Filter_Init+0x108>)
 8005c0a:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8005c78 <PDM_Filter_Init+0x110>
 8005c0e:	4f19      	ldr	r7, [pc, #100]	; (8005c74 <PDM_Filter_Init+0x10c>)
 8005c10:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8005c14:	684a      	ldr	r2, [r1, #4]
 8005c16:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8005c1a:	ea02 0007 	and.w	r0, r2, r7
 8005c1e:	4303      	orrs	r3, r0
 8005c20:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8005c24:	4413      	add	r3, r2
 8005c26:	f841 3f04 	str.w	r3, [r1, #4]!
 8005c2a:	428e      	cmp	r6, r1
 8005c2c:	d1f2      	bne.n	8005c14 <PDM_Filter_Init+0xac>
 8005c2e:	2001      	movs	r0, #1
 8005c30:	7028      	strb	r0, [r5, #0]
 8005c32:	2300      	movs	r3, #0
 8005c34:	e7bb      	b.n	8005bae <PDM_Filter_Init+0x46>
 8005c36:	490e      	ldr	r1, [pc, #56]	; (8005c70 <PDM_Filter_Init+0x108>)
 8005c38:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8005c78 <PDM_Filter_Init+0x110>
 8005c3c:	4f0d      	ldr	r7, [pc, #52]	; (8005c74 <PDM_Filter_Init+0x10c>)
 8005c3e:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8005c42:	684a      	ldr	r2, [r1, #4]
 8005c44:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8005c48:	ea02 0007 	and.w	r0, r2, r7
 8005c4c:	4303      	orrs	r3, r0
 8005c4e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8005c52:	4413      	add	r3, r2
 8005c54:	f841 3f04 	str.w	r3, [r1, #4]!
 8005c58:	428e      	cmp	r6, r1
 8005c5a:	d1f2      	bne.n	8005c42 <PDM_Filter_Init+0xda>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	702b      	strb	r3, [r5, #0]
 8005c60:	e7c1      	b.n	8005be6 <PDM_Filter_Init+0x7e>
 8005c62:	bf00      	nop
 8005c64:	b5e8b5cd 	.word	0xb5e8b5cd
 8005c68:	f407a5c2 	.word	0xf407a5c2
 8005c6c:	200008ad 	.word	0x200008ad
 8005c70:	20000150 	.word	0x20000150
 8005c74:	000ffc00 	.word	0x000ffc00
 8005c78:	3ff00000 	.word	0x3ff00000

08005c7c <PDM_Filter_setConfig>:
 8005c7c:	4b66      	ldr	r3, [pc, #408]	; (8005e18 <PDM_Filter_setConfig+0x19c>)
 8005c7e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d001      	beq.n	8005c88 <PDM_Filter_setConfig+0xc>
 8005c84:	2004      	movs	r0, #4
 8005c86:	4770      	bx	lr
 8005c88:	b530      	push	{r4, r5, lr}
 8005c8a:	880a      	ldrh	r2, [r1, #0]
 8005c8c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005c8e:	ed2d 8b04 	vpush	{d8-d9}
 8005c92:	4604      	mov	r4, r0
 8005c94:	460d      	mov	r5, r1
 8005c96:	1e51      	subs	r1, r2, #1
 8005c98:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8005c9c:	2906      	cmp	r1, #6
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	6420      	str	r0, [r4, #64]	; 0x40
 8005ca2:	d91a      	bls.n	8005cda <PDM_Filter_setConfig+0x5e>
 8005ca4:	2008      	movs	r0, #8
 8005ca6:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8005caa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005cae:	4299      	cmp	r1, r3
 8005cb0:	d07e      	beq.n	8005db0 <PDM_Filter_setConfig+0x134>
 8005cb2:	f113 0f0c 	cmn.w	r3, #12
 8005cb6:	da2a      	bge.n	8005d0e <PDM_Filter_setConfig+0x92>
 8005cb8:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8005cbc:	3040      	adds	r0, #64	; 0x40
 8005cbe:	80ab      	strh	r3, [r5, #4]
 8005cc0:	8622      	strh	r2, [r4, #48]	; 0x30
 8005cc2:	886b      	ldrh	r3, [r5, #2]
 8005cc4:	8663      	strh	r3, [r4, #50]	; 0x32
 8005cc6:	b920      	cbnz	r0, 8005cd2 <PDM_Filter_setConfig+0x56>
 8005cc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cce:	6423      	str	r3, [r4, #64]	; 0x40
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	b003      	add	sp, #12
 8005cd4:	ecbd 8b04 	vpop	{d8-d9}
 8005cd8:	bd30      	pop	{r4, r5, pc}
 8005cda:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8005cdc:	4291      	cmp	r1, r2
 8005cde:	d06c      	beq.n	8005dba <PDM_Filter_setConfig+0x13e>
 8005ce0:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8005ce4:	f023 0301 	bic.w	r3, r3, #1
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8005cee:	6423      	str	r3, [r4, #64]	; 0x40
 8005cf0:	2970      	cmp	r1, #112	; 0x70
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005cfa:	d066      	beq.n	8005dca <PDM_Filter_setConfig+0x14e>
 8005cfc:	2b06      	cmp	r3, #6
 8005cfe:	f200 8089 	bhi.w	8005e14 <PDM_Filter_setConfig+0x198>
 8005d02:	e8df f003 	tbb	[pc, r3]
 8005d06:	4f52      	.short	0x4f52
 8005d08:	3d43494c 	.word	0x3d43494c
 8005d0c:	46          	.byte	0x46
 8005d0d:	00          	.byte	0x00
 8005d0e:	2b33      	cmp	r3, #51	; 0x33
 8005d10:	dc32      	bgt.n	8005d78 <PDM_Filter_setConfig+0xfc>
 8005d12:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005d14:	f002 020f 	and.w	r2, r2, #15
 8005d18:	3a01      	subs	r2, #1
 8005d1a:	2a06      	cmp	r2, #6
 8005d1c:	d872      	bhi.n	8005e04 <PDM_Filter_setConfig+0x188>
 8005d1e:	493f      	ldr	r1, [pc, #252]	; (8005e1c <PDM_Filter_setConfig+0x1a0>)
 8005d20:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005d24:	ed92 9a00 	vldr	s18, [r2]
 8005d28:	ed92 8a07 	vldr	s16, [r2, #28]
 8005d2c:	9001      	str	r0, [sp, #4]
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d36:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8005d3a:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8005d3e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8005d42:	f000 f93f 	bl	8005fc4 <powf>
 8005d46:	eddf 0a36 	vldr	s1, [pc, #216]	; 8005e20 <PDM_Filter_setConfig+0x1a4>
 8005d4a:	eef0 8a40 	vmov.f32	s17, s0
 8005d4e:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8005d52:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005d56:	f000 f935 	bl	8005fc4 <powf>
 8005d5a:	ee28 8a28 	vmul.f32	s16, s16, s17
 8005d5e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005d62:	f000 f909 	bl	8005f78 <roundf>
 8005d66:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8005d6a:	88ab      	ldrh	r3, [r5, #4]
 8005d6c:	882a      	ldrh	r2, [r5, #0]
 8005d6e:	9801      	ldr	r0, [sp, #4]
 8005d70:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8005d74:	8723      	strh	r3, [r4, #56]	; 0x38
 8005d76:	e7a3      	b.n	8005cc0 <PDM_Filter_setConfig+0x44>
 8005d78:	2333      	movs	r3, #51	; 0x33
 8005d7a:	3040      	adds	r0, #64	; 0x40
 8005d7c:	80ab      	strh	r3, [r5, #4]
 8005d7e:	e79f      	b.n	8005cc0 <PDM_Filter_setConfig+0x44>
 8005d80:	4b28      	ldr	r3, [pc, #160]	; (8005e24 <PDM_Filter_setConfig+0x1a8>)
 8005d82:	64a3      	str	r3, [r4, #72]	; 0x48
 8005d84:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005d88:	2000      	movs	r0, #0
 8005d8a:	e792      	b.n	8005cb2 <PDM_Filter_setConfig+0x36>
 8005d8c:	4b26      	ldr	r3, [pc, #152]	; (8005e28 <PDM_Filter_setConfig+0x1ac>)
 8005d8e:	64a3      	str	r3, [r4, #72]	; 0x48
 8005d90:	e7f8      	b.n	8005d84 <PDM_Filter_setConfig+0x108>
 8005d92:	4b26      	ldr	r3, [pc, #152]	; (8005e2c <PDM_Filter_setConfig+0x1b0>)
 8005d94:	64a3      	str	r3, [r4, #72]	; 0x48
 8005d96:	e7f5      	b.n	8005d84 <PDM_Filter_setConfig+0x108>
 8005d98:	4b25      	ldr	r3, [pc, #148]	; (8005e30 <PDM_Filter_setConfig+0x1b4>)
 8005d9a:	64a3      	str	r3, [r4, #72]	; 0x48
 8005d9c:	e7f2      	b.n	8005d84 <PDM_Filter_setConfig+0x108>
 8005d9e:	4b25      	ldr	r3, [pc, #148]	; (8005e34 <PDM_Filter_setConfig+0x1b8>)
 8005da0:	64a3      	str	r3, [r4, #72]	; 0x48
 8005da2:	e7ef      	b.n	8005d84 <PDM_Filter_setConfig+0x108>
 8005da4:	4b24      	ldr	r3, [pc, #144]	; (8005e38 <PDM_Filter_setConfig+0x1bc>)
 8005da6:	64a3      	str	r3, [r4, #72]	; 0x48
 8005da8:	e7ec      	b.n	8005d84 <PDM_Filter_setConfig+0x108>
 8005daa:	4b24      	ldr	r3, [pc, #144]	; (8005e3c <PDM_Filter_setConfig+0x1c0>)
 8005dac:	64a3      	str	r3, [r4, #72]	; 0x48
 8005dae:	e7e9      	b.n	8005d84 <PDM_Filter_setConfig+0x108>
 8005db0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8005db2:	4291      	cmp	r1, r2
 8005db4:	f47f af7d 	bne.w	8005cb2 <PDM_Filter_setConfig+0x36>
 8005db8:	e783      	b.n	8005cc2 <PDM_Filter_setConfig+0x46>
 8005dba:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005dbe:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8005dc2:	4299      	cmp	r1, r3
 8005dc4:	d023      	beq.n	8005e0e <PDM_Filter_setConfig+0x192>
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	e773      	b.n	8005cb2 <PDM_Filter_setConfig+0x36>
 8005dca:	2b06      	cmp	r3, #6
 8005dcc:	d822      	bhi.n	8005e14 <PDM_Filter_setConfig+0x198>
 8005dce:	e8df f003 	tbb	[pc, r3]
 8005dd2:	1316      	.short	0x1316
 8005dd4:	070a0d10 	.word	0x070a0d10
 8005dd8:	04          	.byte	0x04
 8005dd9:	00          	.byte	0x00
 8005dda:	4b19      	ldr	r3, [pc, #100]	; (8005e40 <PDM_Filter_setConfig+0x1c4>)
 8005ddc:	64a3      	str	r3, [r4, #72]	; 0x48
 8005dde:	e7d1      	b.n	8005d84 <PDM_Filter_setConfig+0x108>
 8005de0:	4b18      	ldr	r3, [pc, #96]	; (8005e44 <PDM_Filter_setConfig+0x1c8>)
 8005de2:	64a3      	str	r3, [r4, #72]	; 0x48
 8005de4:	e7ce      	b.n	8005d84 <PDM_Filter_setConfig+0x108>
 8005de6:	4b18      	ldr	r3, [pc, #96]	; (8005e48 <PDM_Filter_setConfig+0x1cc>)
 8005de8:	64a3      	str	r3, [r4, #72]	; 0x48
 8005dea:	e7cb      	b.n	8005d84 <PDM_Filter_setConfig+0x108>
 8005dec:	4b17      	ldr	r3, [pc, #92]	; (8005e4c <PDM_Filter_setConfig+0x1d0>)
 8005dee:	64a3      	str	r3, [r4, #72]	; 0x48
 8005df0:	e7c8      	b.n	8005d84 <PDM_Filter_setConfig+0x108>
 8005df2:	4b17      	ldr	r3, [pc, #92]	; (8005e50 <PDM_Filter_setConfig+0x1d4>)
 8005df4:	64a3      	str	r3, [r4, #72]	; 0x48
 8005df6:	e7c5      	b.n	8005d84 <PDM_Filter_setConfig+0x108>
 8005df8:	4b16      	ldr	r3, [pc, #88]	; (8005e54 <PDM_Filter_setConfig+0x1d8>)
 8005dfa:	64a3      	str	r3, [r4, #72]	; 0x48
 8005dfc:	e7c2      	b.n	8005d84 <PDM_Filter_setConfig+0x108>
 8005dfe:	4b16      	ldr	r3, [pc, #88]	; (8005e58 <PDM_Filter_setConfig+0x1dc>)
 8005e00:	64a3      	str	r3, [r4, #72]	; 0x48
 8005e02:	e7bf      	b.n	8005d84 <PDM_Filter_setConfig+0x108>
 8005e04:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8005e5c <PDM_Filter_setConfig+0x1e0>
 8005e08:	eeb0 9a48 	vmov.f32	s18, s16
 8005e0c:	e78e      	b.n	8005d2c <PDM_Filter_setConfig+0xb0>
 8005e0e:	886b      	ldrh	r3, [r5, #2]
 8005e10:	8663      	strh	r3, [r4, #50]	; 0x32
 8005e12:	e759      	b.n	8005cc8 <PDM_Filter_setConfig+0x4c>
 8005e14:	2000      	movs	r0, #0
 8005e16:	e746      	b.n	8005ca6 <PDM_Filter_setConfig+0x2a>
 8005e18:	b5e8b5cd 	.word	0xb5e8b5cd
 8005e1c:	080068f0 	.word	0x080068f0
 8005e20:	42000000 	.word	0x42000000
 8005e24:	080041e9 	.word	0x080041e9
 8005e28:	080040c9 	.word	0x080040c9
 8005e2c:	08004379 	.word	0x08004379
 8005e30:	08004bbd 	.word	0x08004bbd
 8005e34:	0800491d 	.word	0x0800491d
 8005e38:	080046fd 	.word	0x080046fd
 8005e3c:	08004511 	.word	0x08004511
 8005e40:	080051c9 	.word	0x080051c9
 8005e44:	08005091 	.word	0x08005091
 8005e48:	08004fad 	.word	0x08004fad
 8005e4c:	08005845 	.word	0x08005845
 8005e50:	08005631 	.word	0x08005631
 8005e54:	08005479 	.word	0x08005479
 8005e58:	0800530d 	.word	0x0800530d
 8005e5c:	00000000 	.word	0x00000000

08005e60 <PDM_Filter>:
 8005e60:	b410      	push	{r4}
 8005e62:	4b0c      	ldr	r3, [pc, #48]	; (8005e94 <PDM_Filter+0x34>)
 8005e64:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005e66:	429c      	cmp	r4, r3
 8005e68:	d003      	beq.n	8005e72 <PDM_Filter+0x12>
 8005e6a:	2004      	movs	r0, #4
 8005e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005e74:	05dc      	lsls	r4, r3, #23
 8005e76:	d407      	bmi.n	8005e88 <PDM_Filter+0x28>
 8005e78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e7c:	bf14      	ite	ne
 8005e7e:	2020      	movne	r0, #32
 8005e80:	2030      	moveq	r0, #48	; 0x30
 8005e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8005e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e8e:	320c      	adds	r2, #12
 8005e90:	4718      	bx	r3
 8005e92:	bf00      	nop
 8005e94:	b5e8b5cd 	.word	0xb5e8b5cd

08005e98 <CRC_Lock>:
 8005e98:	4a17      	ldr	r2, [pc, #92]	; (8005ef8 <CRC_Lock+0x60>)
 8005e9a:	6813      	ldr	r3, [r2, #0]
 8005e9c:	b410      	push	{r4}
 8005e9e:	f023 0301 	bic.w	r3, r3, #1
 8005ea2:	4c16      	ldr	r4, [pc, #88]	; (8005efc <CRC_Lock+0x64>)
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	b933      	cbnz	r3, 8005eb8 <CRC_Lock+0x20>
 8005eaa:	4b15      	ldr	r3, [pc, #84]	; (8005f00 <CRC_Lock+0x68>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005eb6:	d00f      	beq.n	8005ed8 <CRC_Lock+0x40>
 8005eb8:	4a12      	ldr	r2, [pc, #72]	; (8005f04 <CRC_Lock+0x6c>)
 8005eba:	2301      	movs	r3, #1
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	6813      	ldr	r3, [r2, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1fc      	bne.n	8005ebe <CRC_Lock+0x26>
 8005ec4:	4b10      	ldr	r3, [pc, #64]	; (8005f08 <CRC_Lock+0x70>)
 8005ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eca:	6018      	str	r0, [r3, #0]
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	1a08      	subs	r0, r1, r0
 8005ed0:	fab0 f080 	clz	r0, r0
 8005ed4:	0940      	lsrs	r0, r0, #5
 8005ed6:	4770      	bx	lr
 8005ed8:	4a0c      	ldr	r2, [pc, #48]	; (8005f0c <CRC_Lock+0x74>)
 8005eda:	2301      	movs	r3, #1
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	6813      	ldr	r3, [r2, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1fc      	bne.n	8005ede <CRC_Lock+0x46>
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <CRC_Lock+0x78>)
 8005ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eea:	6018      	str	r0, [r3, #0]
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	1a40      	subs	r0, r0, r1
 8005ef0:	fab0 f080 	clz	r0, r0
 8005ef4:	0940      	lsrs	r0, r0, #5
 8005ef6:	4770      	bx	lr
 8005ef8:	e0002000 	.word	0xe0002000
 8005efc:	e0042000 	.word	0xe0042000
 8005f00:	5c001000 	.word	0x5c001000
 8005f04:	40023008 	.word	0x40023008
 8005f08:	40023000 	.word	0x40023000
 8005f0c:	58024c08 	.word	0x58024c08
 8005f10:	58024c00 	.word	0x58024c00

08005f14 <__errno>:
 8005f14:	4b01      	ldr	r3, [pc, #4]	; (8005f1c <__errno+0x8>)
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20000554 	.word	0x20000554

08005f20 <__libc_init_array>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	4d0d      	ldr	r5, [pc, #52]	; (8005f58 <__libc_init_array+0x38>)
 8005f24:	4c0d      	ldr	r4, [pc, #52]	; (8005f5c <__libc_init_array+0x3c>)
 8005f26:	1b64      	subs	r4, r4, r5
 8005f28:	10a4      	asrs	r4, r4, #2
 8005f2a:	2600      	movs	r6, #0
 8005f2c:	42a6      	cmp	r6, r4
 8005f2e:	d109      	bne.n	8005f44 <__libc_init_array+0x24>
 8005f30:	4d0b      	ldr	r5, [pc, #44]	; (8005f60 <__libc_init_array+0x40>)
 8005f32:	4c0c      	ldr	r4, [pc, #48]	; (8005f64 <__libc_init_array+0x44>)
 8005f34:	f000 fc8a 	bl	800684c <_init>
 8005f38:	1b64      	subs	r4, r4, r5
 8005f3a:	10a4      	asrs	r4, r4, #2
 8005f3c:	2600      	movs	r6, #0
 8005f3e:	42a6      	cmp	r6, r4
 8005f40:	d105      	bne.n	8005f4e <__libc_init_array+0x2e>
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
 8005f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f48:	4798      	blx	r3
 8005f4a:	3601      	adds	r6, #1
 8005f4c:	e7ee      	b.n	8005f2c <__libc_init_array+0xc>
 8005f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f52:	4798      	blx	r3
 8005f54:	3601      	adds	r6, #1
 8005f56:	e7f2      	b.n	8005f3e <__libc_init_array+0x1e>
 8005f58:	08006954 	.word	0x08006954
 8005f5c:	08006954 	.word	0x08006954
 8005f60:	08006954 	.word	0x08006954
 8005f64:	08006958 	.word	0x08006958

08005f68 <memset>:
 8005f68:	4402      	add	r2, r0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d100      	bne.n	8005f72 <memset+0xa>
 8005f70:	4770      	bx	lr
 8005f72:	f803 1b01 	strb.w	r1, [r3], #1
 8005f76:	e7f9      	b.n	8005f6c <memset+0x4>

08005f78 <roundf>:
 8005f78:	ee10 0a10 	vmov	r0, s0
 8005f7c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005f80:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8005f84:	2a16      	cmp	r2, #22
 8005f86:	dc15      	bgt.n	8005fb4 <roundf+0x3c>
 8005f88:	2a00      	cmp	r2, #0
 8005f8a:	da08      	bge.n	8005f9e <roundf+0x26>
 8005f8c:	3201      	adds	r2, #1
 8005f8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005f92:	d101      	bne.n	8005f98 <roundf+0x20>
 8005f94:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8005f98:	ee00 3a10 	vmov	s0, r3
 8005f9c:	4770      	bx	lr
 8005f9e:	4908      	ldr	r1, [pc, #32]	; (8005fc0 <roundf+0x48>)
 8005fa0:	4111      	asrs	r1, r2
 8005fa2:	4208      	tst	r0, r1
 8005fa4:	d0fa      	beq.n	8005f9c <roundf+0x24>
 8005fa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005faa:	4113      	asrs	r3, r2
 8005fac:	4403      	add	r3, r0
 8005fae:	ea23 0301 	bic.w	r3, r3, r1
 8005fb2:	e7f1      	b.n	8005f98 <roundf+0x20>
 8005fb4:	2a80      	cmp	r2, #128	; 0x80
 8005fb6:	d1f1      	bne.n	8005f9c <roundf+0x24>
 8005fb8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	007fffff 	.word	0x007fffff

08005fc4 <powf>:
 8005fc4:	b508      	push	{r3, lr}
 8005fc6:	ed2d 8b04 	vpush	{d8-d9}
 8005fca:	eeb0 9a40 	vmov.f32	s18, s0
 8005fce:	eef0 8a60 	vmov.f32	s17, s1
 8005fd2:	f000 f88f 	bl	80060f4 <__ieee754_powf>
 8005fd6:	4b43      	ldr	r3, [pc, #268]	; (80060e4 <powf+0x120>)
 8005fd8:	f993 3000 	ldrsb.w	r3, [r3]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	eeb0 8a40 	vmov.f32	s16, s0
 8005fe2:	d012      	beq.n	800600a <powf+0x46>
 8005fe4:	eef4 8a68 	vcmp.f32	s17, s17
 8005fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fec:	d60d      	bvs.n	800600a <powf+0x46>
 8005fee:	eeb4 9a49 	vcmp.f32	s18, s18
 8005ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff6:	d70d      	bvc.n	8006014 <powf+0x50>
 8005ff8:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006000:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006004:	bf08      	it	eq
 8006006:	eeb0 8a67 	vmoveq.f32	s16, s15
 800600a:	eeb0 0a48 	vmov.f32	s0, s16
 800600e:	ecbd 8b04 	vpop	{d8-d9}
 8006012:	bd08      	pop	{r3, pc}
 8006014:	eddf 9a34 	vldr	s19, [pc, #208]	; 80060e8 <powf+0x124>
 8006018:	eeb4 9a69 	vcmp.f32	s18, s19
 800601c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006020:	d116      	bne.n	8006050 <powf+0x8c>
 8006022:	eef4 8a69 	vcmp.f32	s17, s19
 8006026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800602a:	d057      	beq.n	80060dc <powf+0x118>
 800602c:	eeb0 0a68 	vmov.f32	s0, s17
 8006030:	f000 fb2a 	bl	8006688 <finitef>
 8006034:	2800      	cmp	r0, #0
 8006036:	d0e8      	beq.n	800600a <powf+0x46>
 8006038:	eef4 8ae9 	vcmpe.f32	s17, s19
 800603c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006040:	d5e3      	bpl.n	800600a <powf+0x46>
 8006042:	f7ff ff67 	bl	8005f14 <__errno>
 8006046:	2321      	movs	r3, #33	; 0x21
 8006048:	6003      	str	r3, [r0, #0]
 800604a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 80060ec <powf+0x128>
 800604e:	e7dc      	b.n	800600a <powf+0x46>
 8006050:	f000 fb1a 	bl	8006688 <finitef>
 8006054:	bb50      	cbnz	r0, 80060ac <powf+0xe8>
 8006056:	eeb0 0a49 	vmov.f32	s0, s18
 800605a:	f000 fb15 	bl	8006688 <finitef>
 800605e:	b328      	cbz	r0, 80060ac <powf+0xe8>
 8006060:	eeb0 0a68 	vmov.f32	s0, s17
 8006064:	f000 fb10 	bl	8006688 <finitef>
 8006068:	b300      	cbz	r0, 80060ac <powf+0xe8>
 800606a:	eeb4 8a48 	vcmp.f32	s16, s16
 800606e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006072:	d706      	bvc.n	8006082 <powf+0xbe>
 8006074:	f7ff ff4e 	bl	8005f14 <__errno>
 8006078:	2321      	movs	r3, #33	; 0x21
 800607a:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800607e:	6003      	str	r3, [r0, #0]
 8006080:	e7c3      	b.n	800600a <powf+0x46>
 8006082:	f7ff ff47 	bl	8005f14 <__errno>
 8006086:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800608a:	2322      	movs	r3, #34	; 0x22
 800608c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006090:	6003      	str	r3, [r0, #0]
 8006092:	d508      	bpl.n	80060a6 <powf+0xe2>
 8006094:	eeb0 0a68 	vmov.f32	s0, s17
 8006098:	f000 fb0a 	bl	80066b0 <rintf>
 800609c:	eeb4 0a68 	vcmp.f32	s0, s17
 80060a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a4:	d1d1      	bne.n	800604a <powf+0x86>
 80060a6:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80060f0 <powf+0x12c>
 80060aa:	e7ae      	b.n	800600a <powf+0x46>
 80060ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80060b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b4:	d1a9      	bne.n	800600a <powf+0x46>
 80060b6:	eeb0 0a49 	vmov.f32	s0, s18
 80060ba:	f000 fae5 	bl	8006688 <finitef>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d0a3      	beq.n	800600a <powf+0x46>
 80060c2:	eeb0 0a68 	vmov.f32	s0, s17
 80060c6:	f000 fadf 	bl	8006688 <finitef>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d09d      	beq.n	800600a <powf+0x46>
 80060ce:	f7ff ff21 	bl	8005f14 <__errno>
 80060d2:	2322      	movs	r3, #34	; 0x22
 80060d4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80060e8 <powf+0x124>
 80060d8:	6003      	str	r3, [r0, #0]
 80060da:	e796      	b.n	800600a <powf+0x46>
 80060dc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80060e0:	e793      	b.n	800600a <powf+0x46>
 80060e2:	bf00      	nop
 80060e4:	200005b8 	.word	0x200005b8
 80060e8:	00000000 	.word	0x00000000
 80060ec:	ff800000 	.word	0xff800000
 80060f0:	7f800000 	.word	0x7f800000

080060f4 <__ieee754_powf>:
 80060f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f8:	ee10 5a90 	vmov	r5, s1
 80060fc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8006100:	ed2d 8b02 	vpush	{d8}
 8006104:	eeb0 8a40 	vmov.f32	s16, s0
 8006108:	eef0 8a60 	vmov.f32	s17, s1
 800610c:	f000 8291 	beq.w	8006632 <__ieee754_powf+0x53e>
 8006110:	ee10 8a10 	vmov	r8, s0
 8006114:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8006118:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800611c:	dc06      	bgt.n	800612c <__ieee754_powf+0x38>
 800611e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006122:	dd0a      	ble.n	800613a <__ieee754_powf+0x46>
 8006124:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006128:	f000 8283 	beq.w	8006632 <__ieee754_powf+0x53e>
 800612c:	ecbd 8b02 	vpop	{d8}
 8006130:	48d8      	ldr	r0, [pc, #864]	; (8006494 <__ieee754_powf+0x3a0>)
 8006132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006136:	f000 bab5 	b.w	80066a4 <nanf>
 800613a:	f1b8 0f00 	cmp.w	r8, #0
 800613e:	da1f      	bge.n	8006180 <__ieee754_powf+0x8c>
 8006140:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8006144:	da2e      	bge.n	80061a4 <__ieee754_powf+0xb0>
 8006146:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800614a:	f2c0 827b 	blt.w	8006644 <__ieee754_powf+0x550>
 800614e:	15fb      	asrs	r3, r7, #23
 8006150:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006154:	fa47 f603 	asr.w	r6, r7, r3
 8006158:	fa06 f303 	lsl.w	r3, r6, r3
 800615c:	42bb      	cmp	r3, r7
 800615e:	f040 8271 	bne.w	8006644 <__ieee754_powf+0x550>
 8006162:	f006 0601 	and.w	r6, r6, #1
 8006166:	f1c6 0602 	rsb	r6, r6, #2
 800616a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800616e:	d120      	bne.n	80061b2 <__ieee754_powf+0xbe>
 8006170:	2d00      	cmp	r5, #0
 8006172:	f280 8264 	bge.w	800663e <__ieee754_powf+0x54a>
 8006176:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800617a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800617e:	e00d      	b.n	800619c <__ieee754_powf+0xa8>
 8006180:	2600      	movs	r6, #0
 8006182:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006186:	d1f0      	bne.n	800616a <__ieee754_powf+0x76>
 8006188:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800618c:	f000 8251 	beq.w	8006632 <__ieee754_powf+0x53e>
 8006190:	dd0a      	ble.n	80061a8 <__ieee754_powf+0xb4>
 8006192:	2d00      	cmp	r5, #0
 8006194:	f280 8250 	bge.w	8006638 <__ieee754_powf+0x544>
 8006198:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8006498 <__ieee754_powf+0x3a4>
 800619c:	ecbd 8b02 	vpop	{d8}
 80061a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061a4:	2602      	movs	r6, #2
 80061a6:	e7ec      	b.n	8006182 <__ieee754_powf+0x8e>
 80061a8:	2d00      	cmp	r5, #0
 80061aa:	daf5      	bge.n	8006198 <__ieee754_powf+0xa4>
 80061ac:	eeb1 0a68 	vneg.f32	s0, s17
 80061b0:	e7f4      	b.n	800619c <__ieee754_powf+0xa8>
 80061b2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80061b6:	d102      	bne.n	80061be <__ieee754_powf+0xca>
 80061b8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80061bc:	e7ee      	b.n	800619c <__ieee754_powf+0xa8>
 80061be:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80061c2:	eeb0 0a48 	vmov.f32	s0, s16
 80061c6:	d108      	bne.n	80061da <__ieee754_powf+0xe6>
 80061c8:	f1b8 0f00 	cmp.w	r8, #0
 80061cc:	db05      	blt.n	80061da <__ieee754_powf+0xe6>
 80061ce:	ecbd 8b02 	vpop	{d8}
 80061d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061d6:	f000 ba4d 	b.w	8006674 <__ieee754_sqrtf>
 80061da:	f000 fa4e 	bl	800667a <fabsf>
 80061de:	b124      	cbz	r4, 80061ea <__ieee754_powf+0xf6>
 80061e0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80061e4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80061e8:	d117      	bne.n	800621a <__ieee754_powf+0x126>
 80061ea:	2d00      	cmp	r5, #0
 80061ec:	bfbc      	itt	lt
 80061ee:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80061f2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80061f6:	f1b8 0f00 	cmp.w	r8, #0
 80061fa:	dacf      	bge.n	800619c <__ieee754_powf+0xa8>
 80061fc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8006200:	ea54 0306 	orrs.w	r3, r4, r6
 8006204:	d104      	bne.n	8006210 <__ieee754_powf+0x11c>
 8006206:	ee70 7a40 	vsub.f32	s15, s0, s0
 800620a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800620e:	e7c5      	b.n	800619c <__ieee754_powf+0xa8>
 8006210:	2e01      	cmp	r6, #1
 8006212:	d1c3      	bne.n	800619c <__ieee754_powf+0xa8>
 8006214:	eeb1 0a40 	vneg.f32	s0, s0
 8006218:	e7c0      	b.n	800619c <__ieee754_powf+0xa8>
 800621a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800621e:	3801      	subs	r0, #1
 8006220:	ea56 0300 	orrs.w	r3, r6, r0
 8006224:	d104      	bne.n	8006230 <__ieee754_powf+0x13c>
 8006226:	ee38 8a48 	vsub.f32	s16, s16, s16
 800622a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800622e:	e7b5      	b.n	800619c <__ieee754_powf+0xa8>
 8006230:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8006234:	dd6b      	ble.n	800630e <__ieee754_powf+0x21a>
 8006236:	4b99      	ldr	r3, [pc, #612]	; (800649c <__ieee754_powf+0x3a8>)
 8006238:	429c      	cmp	r4, r3
 800623a:	dc06      	bgt.n	800624a <__ieee754_powf+0x156>
 800623c:	2d00      	cmp	r5, #0
 800623e:	daab      	bge.n	8006198 <__ieee754_powf+0xa4>
 8006240:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80064a0 <__ieee754_powf+0x3ac>
 8006244:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006248:	e7a8      	b.n	800619c <__ieee754_powf+0xa8>
 800624a:	4b96      	ldr	r3, [pc, #600]	; (80064a4 <__ieee754_powf+0x3b0>)
 800624c:	429c      	cmp	r4, r3
 800624e:	dd02      	ble.n	8006256 <__ieee754_powf+0x162>
 8006250:	2d00      	cmp	r5, #0
 8006252:	dcf5      	bgt.n	8006240 <__ieee754_powf+0x14c>
 8006254:	e7a0      	b.n	8006198 <__ieee754_powf+0xa4>
 8006256:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800625a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800625e:	eddf 6a92 	vldr	s13, [pc, #584]	; 80064a8 <__ieee754_powf+0x3b4>
 8006262:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006266:	eee0 6a67 	vfms.f32	s13, s0, s15
 800626a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800626e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8006272:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80064ac <__ieee754_powf+0x3b8>
 800627e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8006282:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80064b0 <__ieee754_powf+0x3bc>
 8006286:	eee0 7a07 	vfma.f32	s15, s0, s14
 800628a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80064b4 <__ieee754_powf+0x3c0>
 800628e:	eef0 6a67 	vmov.f32	s13, s15
 8006292:	eee0 6a07 	vfma.f32	s13, s0, s14
 8006296:	ee16 3a90 	vmov	r3, s13
 800629a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800629e:	f023 030f 	bic.w	r3, r3, #15
 80062a2:	ee00 3a90 	vmov	s1, r3
 80062a6:	eee0 0a47 	vfms.f32	s1, s0, s14
 80062aa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80062ae:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80062b2:	f025 050f 	bic.w	r5, r5, #15
 80062b6:	ee07 5a10 	vmov	s14, r5
 80062ba:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80062be:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eee7 0a27 	vfma.f32	s1, s14, s15
 80062ca:	3e01      	subs	r6, #1
 80062cc:	ea56 0200 	orrs.w	r2, r6, r0
 80062d0:	ee07 5a10 	vmov	s14, r5
 80062d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062d8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80062dc:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80062e0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80062e4:	ee17 4a10 	vmov	r4, s14
 80062e8:	bf08      	it	eq
 80062ea:	eeb0 8a40 	vmoveq.f32	s16, s0
 80062ee:	2c00      	cmp	r4, #0
 80062f0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80062f4:	f340 8184 	ble.w	8006600 <__ieee754_powf+0x50c>
 80062f8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80062fc:	f340 80fc 	ble.w	80064f8 <__ieee754_powf+0x404>
 8006300:	eddf 7a67 	vldr	s15, [pc, #412]	; 80064a0 <__ieee754_powf+0x3ac>
 8006304:	ee28 0a27 	vmul.f32	s0, s16, s15
 8006308:	ee20 0a27 	vmul.f32	s0, s0, s15
 800630c:	e746      	b.n	800619c <__ieee754_powf+0xa8>
 800630e:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8006312:	bf01      	itttt	eq
 8006314:	eddf 7a68 	vldreq	s15, [pc, #416]	; 80064b8 <__ieee754_powf+0x3c4>
 8006318:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800631c:	f06f 0217 	mvneq.w	r2, #23
 8006320:	ee17 4a90 	vmoveq	r4, s15
 8006324:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8006328:	bf18      	it	ne
 800632a:	2200      	movne	r2, #0
 800632c:	3b7f      	subs	r3, #127	; 0x7f
 800632e:	4413      	add	r3, r2
 8006330:	4a62      	ldr	r2, [pc, #392]	; (80064bc <__ieee754_powf+0x3c8>)
 8006332:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8006336:	4294      	cmp	r4, r2
 8006338:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800633c:	dd06      	ble.n	800634c <__ieee754_powf+0x258>
 800633e:	4a60      	ldr	r2, [pc, #384]	; (80064c0 <__ieee754_powf+0x3cc>)
 8006340:	4294      	cmp	r4, r2
 8006342:	f340 80a4 	ble.w	800648e <__ieee754_powf+0x39a>
 8006346:	3301      	adds	r3, #1
 8006348:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800634c:	2400      	movs	r4, #0
 800634e:	4a5d      	ldr	r2, [pc, #372]	; (80064c4 <__ieee754_powf+0x3d0>)
 8006350:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006354:	ee07 1a90 	vmov	s15, r1
 8006358:	ed92 7a00 	vldr	s14, [r2]
 800635c:	4a5a      	ldr	r2, [pc, #360]	; (80064c8 <__ieee754_powf+0x3d4>)
 800635e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006362:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006366:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800636a:	1049      	asrs	r1, r1, #1
 800636c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006370:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8006374:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8006378:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800637c:	ee06 1a10 	vmov	s12, r1
 8006380:	ee65 4a26 	vmul.f32	s9, s10, s13
 8006384:	ee36 7a47 	vsub.f32	s14, s12, s14
 8006388:	ee14 7a90 	vmov	r7, s9
 800638c:	4017      	ands	r7, r2
 800638e:	ee05 7a90 	vmov	s11, r7
 8006392:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8006396:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800639a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80064cc <__ieee754_powf+0x3d8>
 800639e:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80063a2:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80063a6:	ee25 6a26 	vmul.f32	s12, s10, s13
 80063aa:	eddf 6a49 	vldr	s13, [pc, #292]	; 80064d0 <__ieee754_powf+0x3dc>
 80063ae:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80063b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80064d4 <__ieee754_powf+0x3e0>
 80063b6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80063ba:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80064a8 <__ieee754_powf+0x3b4>
 80063be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063c2:	eddf 6a45 	vldr	s13, [pc, #276]	; 80064d8 <__ieee754_powf+0x3e4>
 80063c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80063ca:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80064dc <__ieee754_powf+0x3e8>
 80063ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063d2:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80063d6:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80063da:	ee66 6a86 	vmul.f32	s13, s13, s12
 80063de:	eee5 6a07 	vfma.f32	s13, s10, s14
 80063e2:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80063e6:	eef0 7a45 	vmov.f32	s15, s10
 80063ea:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80063ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063f2:	ee17 1a90 	vmov	r1, s15
 80063f6:	4011      	ands	r1, r2
 80063f8:	ee07 1a90 	vmov	s15, r1
 80063fc:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8006400:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8006404:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006408:	ee27 7a24 	vmul.f32	s14, s14, s9
 800640c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006410:	eeb0 6a47 	vmov.f32	s12, s14
 8006414:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8006418:	ee16 1a10 	vmov	r1, s12
 800641c:	4011      	ands	r1, r2
 800641e:	ee06 1a90 	vmov	s13, r1
 8006422:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8006426:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80064e0 <__ieee754_powf+0x3ec>
 800642a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80064e4 <__ieee754_powf+0x3f0>
 800642e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006432:	ee06 1a10 	vmov	s12, r1
 8006436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800643a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80064e8 <__ieee754_powf+0x3f4>
 800643e:	492b      	ldr	r1, [pc, #172]	; (80064ec <__ieee754_powf+0x3f8>)
 8006440:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006444:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006448:	edd1 7a00 	vldr	s15, [r1]
 800644c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006450:	ee07 3a90 	vmov	s15, r3
 8006454:	4b26      	ldr	r3, [pc, #152]	; (80064f0 <__ieee754_powf+0x3fc>)
 8006456:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800645a:	eef0 7a47 	vmov.f32	s15, s14
 800645e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006462:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006466:	edd4 0a00 	vldr	s1, [r4]
 800646a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800646e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006472:	ee17 3a90 	vmov	r3, s15
 8006476:	4013      	ands	r3, r2
 8006478:	ee07 3a90 	vmov	s15, r3
 800647c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8006480:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8006484:	eee6 6a65 	vfms.f32	s13, s12, s11
 8006488:	ee77 7a66 	vsub.f32	s15, s14, s13
 800648c:	e70f      	b.n	80062ae <__ieee754_powf+0x1ba>
 800648e:	2401      	movs	r4, #1
 8006490:	e75d      	b.n	800634e <__ieee754_powf+0x25a>
 8006492:	bf00      	nop
 8006494:	08006928 	.word	0x08006928
 8006498:	00000000 	.word	0x00000000
 800649c:	3f7ffff7 	.word	0x3f7ffff7
 80064a0:	7149f2ca 	.word	0x7149f2ca
 80064a4:	3f800007 	.word	0x3f800007
 80064a8:	3eaaaaab 	.word	0x3eaaaaab
 80064ac:	3fb8aa3b 	.word	0x3fb8aa3b
 80064b0:	36eca570 	.word	0x36eca570
 80064b4:	3fb8aa00 	.word	0x3fb8aa00
 80064b8:	4b800000 	.word	0x4b800000
 80064bc:	001cc471 	.word	0x001cc471
 80064c0:	005db3d6 	.word	0x005db3d6
 80064c4:	0800692c 	.word	0x0800692c
 80064c8:	fffff000 	.word	0xfffff000
 80064cc:	3e6c3255 	.word	0x3e6c3255
 80064d0:	3e53f142 	.word	0x3e53f142
 80064d4:	3e8ba305 	.word	0x3e8ba305
 80064d8:	3edb6db7 	.word	0x3edb6db7
 80064dc:	3f19999a 	.word	0x3f19999a
 80064e0:	3f76384f 	.word	0x3f76384f
 80064e4:	3f763800 	.word	0x3f763800
 80064e8:	369dc3a0 	.word	0x369dc3a0
 80064ec:	0800693c 	.word	0x0800693c
 80064f0:	08006934 	.word	0x08006934
 80064f4:	3338aa3c 	.word	0x3338aa3c
 80064f8:	f040 8092 	bne.w	8006620 <__ieee754_powf+0x52c>
 80064fc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80064f4 <__ieee754_powf+0x400>
 8006500:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006504:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006508:	eef4 6ac7 	vcmpe.f32	s13, s14
 800650c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006510:	f73f aef6 	bgt.w	8006300 <__ieee754_powf+0x20c>
 8006514:	15db      	asrs	r3, r3, #23
 8006516:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800651a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800651e:	4103      	asrs	r3, r0
 8006520:	4423      	add	r3, r4
 8006522:	4949      	ldr	r1, [pc, #292]	; (8006648 <__ieee754_powf+0x554>)
 8006524:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006528:	3a7f      	subs	r2, #127	; 0x7f
 800652a:	4111      	asrs	r1, r2
 800652c:	ea23 0101 	bic.w	r1, r3, r1
 8006530:	ee07 1a10 	vmov	s14, r1
 8006534:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006538:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800653c:	f1c2 0217 	rsb	r2, r2, #23
 8006540:	4110      	asrs	r0, r2
 8006542:	2c00      	cmp	r4, #0
 8006544:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006548:	bfb8      	it	lt
 800654a:	4240      	neglt	r0, r0
 800654c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006550:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800664c <__ieee754_powf+0x558>
 8006554:	ee17 3a10 	vmov	r3, s14
 8006558:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800655c:	f023 030f 	bic.w	r3, r3, #15
 8006560:	ee07 3a10 	vmov	s14, r3
 8006564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006568:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800656c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8006650 <__ieee754_powf+0x55c>
 8006570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006574:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8006578:	eddf 6a36 	vldr	s13, [pc, #216]	; 8006654 <__ieee754_powf+0x560>
 800657c:	eeb0 0a67 	vmov.f32	s0, s15
 8006580:	eea7 0a26 	vfma.f32	s0, s14, s13
 8006584:	eeb0 6a40 	vmov.f32	s12, s0
 8006588:	eea7 6a66 	vfms.f32	s12, s14, s13
 800658c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006590:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006594:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006658 <__ieee754_powf+0x564>
 8006598:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800665c <__ieee754_powf+0x568>
 800659c:	eea7 6a26 	vfma.f32	s12, s14, s13
 80065a0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8006660 <__ieee754_powf+0x56c>
 80065a4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80065a8:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8006664 <__ieee754_powf+0x570>
 80065ac:	eea6 6a87 	vfma.f32	s12, s13, s14
 80065b0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8006668 <__ieee754_powf+0x574>
 80065b4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80065b8:	eeb0 6a40 	vmov.f32	s12, s0
 80065bc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80065c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80065c4:	eeb0 7a46 	vmov.f32	s14, s12
 80065c8:	ee77 6a66 	vsub.f32	s13, s14, s13
 80065cc:	ee20 6a06 	vmul.f32	s12, s0, s12
 80065d0:	eee0 7a27 	vfma.f32	s15, s0, s15
 80065d4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80065d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065dc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80065e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80065e4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80065e8:	ee10 3a10 	vmov	r3, s0
 80065ec:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80065f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065f4:	da1a      	bge.n	800662c <__ieee754_powf+0x538>
 80065f6:	f000 f8b7 	bl	8006768 <scalbnf>
 80065fa:	ee20 0a08 	vmul.f32	s0, s0, s16
 80065fe:	e5cd      	b.n	800619c <__ieee754_powf+0xa8>
 8006600:	4a1a      	ldr	r2, [pc, #104]	; (800666c <__ieee754_powf+0x578>)
 8006602:	4293      	cmp	r3, r2
 8006604:	dd02      	ble.n	800660c <__ieee754_powf+0x518>
 8006606:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8006670 <__ieee754_powf+0x57c>
 800660a:	e67b      	b.n	8006304 <__ieee754_powf+0x210>
 800660c:	d108      	bne.n	8006620 <__ieee754_powf+0x52c>
 800660e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006612:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800661a:	f6ff af7b 	blt.w	8006514 <__ieee754_powf+0x420>
 800661e:	e7f2      	b.n	8006606 <__ieee754_powf+0x512>
 8006620:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006624:	f73f af76 	bgt.w	8006514 <__ieee754_powf+0x420>
 8006628:	2000      	movs	r0, #0
 800662a:	e78f      	b.n	800654c <__ieee754_powf+0x458>
 800662c:	ee00 3a10 	vmov	s0, r3
 8006630:	e7e3      	b.n	80065fa <__ieee754_powf+0x506>
 8006632:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006636:	e5b1      	b.n	800619c <__ieee754_powf+0xa8>
 8006638:	eeb0 0a68 	vmov.f32	s0, s17
 800663c:	e5ae      	b.n	800619c <__ieee754_powf+0xa8>
 800663e:	eeb0 0a48 	vmov.f32	s0, s16
 8006642:	e5ab      	b.n	800619c <__ieee754_powf+0xa8>
 8006644:	2600      	movs	r6, #0
 8006646:	e590      	b.n	800616a <__ieee754_powf+0x76>
 8006648:	007fffff 	.word	0x007fffff
 800664c:	3f317218 	.word	0x3f317218
 8006650:	35bfbe8c 	.word	0x35bfbe8c
 8006654:	3f317200 	.word	0x3f317200
 8006658:	3331bb4c 	.word	0x3331bb4c
 800665c:	b5ddea0e 	.word	0xb5ddea0e
 8006660:	388ab355 	.word	0x388ab355
 8006664:	bb360b61 	.word	0xbb360b61
 8006668:	3e2aaaab 	.word	0x3e2aaaab
 800666c:	43160000 	.word	0x43160000
 8006670:	0da24260 	.word	0x0da24260

08006674 <__ieee754_sqrtf>:
 8006674:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006678:	4770      	bx	lr

0800667a <fabsf>:
 800667a:	ee10 3a10 	vmov	r3, s0
 800667e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006682:	ee00 3a10 	vmov	s0, r3
 8006686:	4770      	bx	lr

08006688 <finitef>:
 8006688:	b082      	sub	sp, #8
 800668a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800668e:	9801      	ldr	r0, [sp, #4]
 8006690:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006694:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006698:	bfac      	ite	ge
 800669a:	2000      	movge	r0, #0
 800669c:	2001      	movlt	r0, #1
 800669e:	b002      	add	sp, #8
 80066a0:	4770      	bx	lr
	...

080066a4 <nanf>:
 80066a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80066ac <nanf+0x8>
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	7fc00000 	.word	0x7fc00000

080066b0 <rintf>:
 80066b0:	ee10 2a10 	vmov	r2, s0
 80066b4:	b513      	push	{r0, r1, r4, lr}
 80066b6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80066ba:	397f      	subs	r1, #127	; 0x7f
 80066bc:	2916      	cmp	r1, #22
 80066be:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80066c2:	dc47      	bgt.n	8006754 <rintf+0xa4>
 80066c4:	b32b      	cbz	r3, 8006712 <rintf+0x62>
 80066c6:	2900      	cmp	r1, #0
 80066c8:	ee10 3a10 	vmov	r3, s0
 80066cc:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 80066d0:	da21      	bge.n	8006716 <rintf+0x66>
 80066d2:	f3c2 0316 	ubfx	r3, r2, #0, #23
 80066d6:	425b      	negs	r3, r3
 80066d8:	4921      	ldr	r1, [pc, #132]	; (8006760 <rintf+0xb0>)
 80066da:	0a5b      	lsrs	r3, r3, #9
 80066dc:	0d12      	lsrs	r2, r2, #20
 80066de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e2:	0512      	lsls	r2, r2, #20
 80066e4:	4313      	orrs	r3, r2
 80066e6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	edd1 6a00 	vldr	s13, [r1]
 80066f2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80066f6:	ed8d 7a01 	vstr	s14, [sp, #4]
 80066fa:	eddd 7a01 	vldr	s15, [sp, #4]
 80066fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006702:	ee17 3a90 	vmov	r3, s15
 8006706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800670a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800670e:	ee00 3a10 	vmov	s0, r3
 8006712:	b002      	add	sp, #8
 8006714:	bd10      	pop	{r4, pc}
 8006716:	4a13      	ldr	r2, [pc, #76]	; (8006764 <rintf+0xb4>)
 8006718:	410a      	asrs	r2, r1
 800671a:	4213      	tst	r3, r2
 800671c:	d0f9      	beq.n	8006712 <rintf+0x62>
 800671e:	0854      	lsrs	r4, r2, #1
 8006720:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8006724:	d006      	beq.n	8006734 <rintf+0x84>
 8006726:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800672a:	ea23 0304 	bic.w	r3, r3, r4
 800672e:	fa42 f101 	asr.w	r1, r2, r1
 8006732:	430b      	orrs	r3, r1
 8006734:	4a0a      	ldr	r2, [pc, #40]	; (8006760 <rintf+0xb0>)
 8006736:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800673a:	ed90 7a00 	vldr	s14, [r0]
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006746:	edcd 7a01 	vstr	s15, [sp, #4]
 800674a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800674e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006752:	e7de      	b.n	8006712 <rintf+0x62>
 8006754:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006758:	d3db      	bcc.n	8006712 <rintf+0x62>
 800675a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800675e:	e7d8      	b.n	8006712 <rintf+0x62>
 8006760:	08006944 	.word	0x08006944
 8006764:	007fffff 	.word	0x007fffff

08006768 <scalbnf>:
 8006768:	ee10 3a10 	vmov	r3, s0
 800676c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006770:	d025      	beq.n	80067be <scalbnf+0x56>
 8006772:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006776:	d302      	bcc.n	800677e <scalbnf+0x16>
 8006778:	ee30 0a00 	vadd.f32	s0, s0, s0
 800677c:	4770      	bx	lr
 800677e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006782:	d122      	bne.n	80067ca <scalbnf+0x62>
 8006784:	4b2a      	ldr	r3, [pc, #168]	; (8006830 <scalbnf+0xc8>)
 8006786:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006834 <scalbnf+0xcc>
 800678a:	4298      	cmp	r0, r3
 800678c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006790:	db16      	blt.n	80067c0 <scalbnf+0x58>
 8006792:	ee10 3a10 	vmov	r3, s0
 8006796:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800679a:	3a19      	subs	r2, #25
 800679c:	4402      	add	r2, r0
 800679e:	2afe      	cmp	r2, #254	; 0xfe
 80067a0:	dd15      	ble.n	80067ce <scalbnf+0x66>
 80067a2:	ee10 3a10 	vmov	r3, s0
 80067a6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8006838 <scalbnf+0xd0>
 80067aa:	eddf 6a24 	vldr	s13, [pc, #144]	; 800683c <scalbnf+0xd4>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	eeb0 7a67 	vmov.f32	s14, s15
 80067b4:	bfb8      	it	lt
 80067b6:	eef0 7a66 	vmovlt.f32	s15, s13
 80067ba:	ee27 0a27 	vmul.f32	s0, s14, s15
 80067be:	4770      	bx	lr
 80067c0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006840 <scalbnf+0xd8>
 80067c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80067c8:	4770      	bx	lr
 80067ca:	0dd2      	lsrs	r2, r2, #23
 80067cc:	e7e6      	b.n	800679c <scalbnf+0x34>
 80067ce:	2a00      	cmp	r2, #0
 80067d0:	dd06      	ble.n	80067e0 <scalbnf+0x78>
 80067d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80067d6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80067da:	ee00 3a10 	vmov	s0, r3
 80067de:	4770      	bx	lr
 80067e0:	f112 0f16 	cmn.w	r2, #22
 80067e4:	da1a      	bge.n	800681c <scalbnf+0xb4>
 80067e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80067ea:	4298      	cmp	r0, r3
 80067ec:	ee10 3a10 	vmov	r3, s0
 80067f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067f4:	dd0a      	ble.n	800680c <scalbnf+0xa4>
 80067f6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8006838 <scalbnf+0xd0>
 80067fa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800683c <scalbnf+0xd4>
 80067fe:	eef0 7a40 	vmov.f32	s15, s0
 8006802:	2b00      	cmp	r3, #0
 8006804:	bf18      	it	ne
 8006806:	eeb0 0a47 	vmovne.f32	s0, s14
 800680a:	e7db      	b.n	80067c4 <scalbnf+0x5c>
 800680c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8006840 <scalbnf+0xd8>
 8006810:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006844 <scalbnf+0xdc>
 8006814:	eef0 7a40 	vmov.f32	s15, s0
 8006818:	2b00      	cmp	r3, #0
 800681a:	e7f3      	b.n	8006804 <scalbnf+0x9c>
 800681c:	3219      	adds	r2, #25
 800681e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006822:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006826:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006848 <scalbnf+0xe0>
 800682a:	ee07 3a10 	vmov	s14, r3
 800682e:	e7c4      	b.n	80067ba <scalbnf+0x52>
 8006830:	ffff3cb0 	.word	0xffff3cb0
 8006834:	4c000000 	.word	0x4c000000
 8006838:	7149f2ca 	.word	0x7149f2ca
 800683c:	f149f2ca 	.word	0xf149f2ca
 8006840:	0da24260 	.word	0x0da24260
 8006844:	8da24260 	.word	0x8da24260
 8006848:	33000000 	.word	0x33000000

0800684c <_init>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	bf00      	nop
 8006850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006852:	bc08      	pop	{r3}
 8006854:	469e      	mov	lr, r3
 8006856:	4770      	bx	lr

08006858 <_fini>:
 8006858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685a:	bf00      	nop
 800685c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800685e:	bc08      	pop	{r3}
 8006860:	469e      	mov	lr, r3
 8006862:	4770      	bx	lr
