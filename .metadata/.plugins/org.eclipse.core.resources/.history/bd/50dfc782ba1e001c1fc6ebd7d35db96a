/*
 * main.c
 *
 *  Created on: Sep 25, 2021
 *      Author: vish
 */

#include <stm32f4xx.h>
#include <stdint.h>

//RCC->AHB1ENR bits
#define GPIOAEN			(1<<0)		//GPIOAEN: IO port A clock enable
#define GPIOEEN			(1<<4)		//GPIOEEN: IO port E clock enable
/*
 * PA5 = SPI1_sck
 * PA7 = SPI1_MOSI
 * PA6 = SPI1_MISO
 * PE3 =
 */
//GPIOx->MODER
#define PA5_MOD			(2<<10)		//set PA5 for alternate function
#define PA8_MOD			(2<<12)		//set PA6 for alternate function
#define PA7_MOD			(2<<14)		//set PA7 for alternate function
#define PA5_MOD			(2<<6)		//set PE3 for alternate function


//RCC->APB2ENR bits
#define SPI1EN 			(1<<12)		//SPI1LPEN: SPI1 clock enable during Sleep mode

//SPI1->CR1 bits
#define SPI1_CPHA		(1<<0)		// CPHA: Clock phase
#define SPI1_CPOL		(1<<1)		// CPOL: Clock polarity
#define	SPI1_MSTR		(1<<2)		// MSTR: Master selection
#define SPI1_BAUD		(3<<3) 		// BR[2:0]: Baud rate control (bits 5:3)
#define SPI1_LSBFIRST	(1<<7)		// LSBFIRST: Frame format
#define SPI1_SSI		(1<<8)		// SSI: Internal slave select	  //replace NSS pin to select slave
#define SPI1_SSM		(1<<9)		// SSM: Software slave management //because NSS pin is not-connected
#define SPI1_RXONLY		(1<<10)		// RXONLY: Receive only
#define SPI1_DFF		(1<<11)		// DFF: Data frame format

//SPI1->SR bits
#define SPI1_RXNE		(1<<0)		// RXNE: Receive buffer not empty
#define SPI1_TXE		(1<<1)		// TXE: Transmit buffer empty
#define SPI1_BSY		(1<<7)		// BSY: Busy flag

/************** SPI_config STEPS TO FOLLOW *****************
1. Enable SPI clock
2. Configure the Control Register 1
3. Configure the CR2
************************************************/
void SPI_config (void)
{
	RCC->APB2ENR |= SPI1EN; //enable SPI1 clock

	SPI1->CR1 |= SPI1_CPOL; // cpol = 1, idle_clock is high

	SPI1->CR1 |= SPI1_CPHA;	/* cpha = 1, sample data at second edge
							 * (rising edge because cpol=1)
							 */

	SPI1->CR1 |= SPI1_MSTR; // Master Mode

	SPI1->CR1 |= SPI1_BAUD; // BR[2:0] = 011; SSM=1, SSI=1 ->software slave management

	SPI1->CR1 &= ~SPI1_LSBFIRST; // LSBFIRST = 0, set for MSB first

	SPI1->CR1 |= SPI1_SSI | SPI1_SSM;

	SPI1->CR1 &= ~SPI1_DFF;  // DFF=0, 8 bit data

	SPI1->CR2 = 0;
}

/************** SPI_transmit STEPS TO FOLLOW *****************
1. Wait for the TXE bit to set in the Status Register
2. Write the data to the Data Register
3. After the data has been transmitted, wait for the BSY bit to reset in Status Register
4. Clear the Overrun flag by reading DR and SR
************************************************/
void SPI_transmit (uint8_t *data, int size)
{
	for(uint16_t i=0; i<size; i++)
	{
		while(!((SPI1->SR) & SPI1_TXE)); //wait for TXE bit to set		 	 	 	 	 	 	 	 	 */

		SPI1->DR = data[i]; // load the data into the data
	}

	while(!((SPI1->SR) & SPI1_TXE)); // wait for TXE bit to set (until buffer empty)

	while (((SPI1->SR) & SPI1_BSY)); // wait for BSY bit to Reset (until SPI not busy)

	//clear the overrun flag by reading DR and SR
	uint16_t temp = SPI1->DR;
	temp = SPI1->SR;
}

/************** SPI1_receive STEPS TO FOLLOW *****************
	1. Wait for the BSY bit to reset in Status Register
	2. Send some Dummy data before reading the DATA
	3. Wait for the RXNE bit to Set in the status Register
	4. Read data from Data Register
	************************************************/

void SPI1_receive (uint8_t *data, int size)
{
	for(i=size; i>0; i--)
	{
		while (((SPI1->SR) & SPI1_BSY)); // wait for BSY bit to Reset (until SPI not busy)

		SPI1->DR = 0; //send dummy data

		while (!((SPI1->SR)& SPI1_RXNE));	// Wait for RXNE to set

		*data++ = (SPI1->DR);
		size--;
	}
}

void GPIO_config (void)
{
	RCC->AHB1ENR |= GPIOAEN | GPIOEEN; //enable GPIO port A & port E

	GPIOA->MODER |=

}






