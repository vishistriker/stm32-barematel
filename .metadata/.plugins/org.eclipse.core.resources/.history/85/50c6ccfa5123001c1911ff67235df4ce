/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "stm32f407xx.h"

void GPIO_Config (void)
{
	/*************>>>>>>> STEPS FOLLOWED <<<<<<<<************

	1. Enable GPIO Clock
	2. Set the required Pin in the INPUT Mode
	3. Configure the PULL UP/ PULL DOWN According to your requirement

	********************************************************/

	RCC->AHB1ENR |= (1<<0);  // Enable GPIOA clock
	RCC->AHB1ENR |= (1<<4);	 // Enable GPIOE clock

	GPIOA->MODER &= ~(3<<2);  // Bits (3:2) = 0:0  --> PA1 in Input Mode
	GPIOE->MODER &= ~(3<<0);  // Bits (1:0) = 0:0  --> PE0 in Input Mode

	GPIOA->PUPDR |=  (1<<3);  // Bits (3:2) = 1:0  --> PA1 is in Pull Down mode
	GPIOE->PUPDR |=  (1<<1);  // Bits (1:0) = 1:0  --> PE0 is in Pull Down mode

}

void Interrupt_Config (void)
{
	/*************>>>>>>> STEPS FOLLOWED <<<<<<<<************

	1. Enable the SYSCNFG bit in RCC register
	2. Configure the EXTI configuration Regiter in the SYSCNFG
	3. Enable the EXTI using Interrupt Mask Register (IMR)
	4. Configure the Rising Edge / Falling Edge Trigger
	5. Set the Interrupt Priority
	6. Enable the interrupt

	********************************************************/

	RCC->APB2ENR |= (1<<14);//Enable SYSCNFG

	SYSCFG->EXTICR[0] &= ~(0xf<<4); // Bits[7:6:5:4] = (0:0:0:0)  -> configure EXTI1 line for PA1
	SYSCFG->EXTICR[0] |= (0x4<<0);	// Bits[3:2:1:0] = (0:0:0:0)  -> configure EXTI0 line for PE0

	EXTI->IMR |= (1<<1);  // Bit[1] = 1  --> Disable the Mask on EXTI 1
	EXTI->IMR |= (1<<0);  // Bit[0] = 1  --> Disable the Mask on EXTI 0

	EXTI->RTSR &= ~(1<<1);  // Disable Rising Edge Trigger for PA1
	EXTI->RTSR &= ~(1<<0);  // Disable Rising Edge Trigger for PE0

	EXTI->FTSR |= (1<<1);  // Enable Falling Edge Trigger for PA1
	EXTI->FTSR |= (1<<0);  // Enable Falling Edge Trigger for PE0

	NVIC_SetPriority (EXTI1_IRQn, 0); // Set Priority for PA1
	NVIC_SetPriority (EXTI0_IRQn, 0); // Set Priority for PE0


	NVIC_EnableIRQ (EXTI1_IRQn);  // Enable Interrupt for PA1
	NVIC_EnableIRQ (EXTI0_IRQn);  // Enable Interrupt for PE0

}

void EXTI1_IRQHandler(void)
{
	if (EXTI->PR & (1<<1))    // If the PA1 triggered the interrupt
	{
		printf("interrupt for PA1\n");
		EXTI->PR |= (1<<1);  // Clear the interrupt flag by writing a 1
	}
}

void EXTI0_IRQHandler(void)
{
	if (EXTI->PR & (1<<0))    // If the PA1 triggered the interrupt
	{
		printf("interrupt for PE0\n");
		EXTI->PR |= (1<<0);  // Clear the interrupt flag by writing a 1
	}
}

int main(void)
{
	GPIO_Config();
	Interrupt_Config();

    /* Loop forever */
	for(;;);
}
