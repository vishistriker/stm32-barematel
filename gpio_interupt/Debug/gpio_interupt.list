
gpio_interupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000db0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08000f58  08000f58  00010f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fd0  08000fd0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000fd0  08000fd0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fd0  08000fd0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fd0  08000fd0  00010fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fd4  08000fd4  00010fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000038  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002d19  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006f3  00000000  00000000  00022da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  000234a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000108  00000000  00000000  000235e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d42  00000000  00000000  000236e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000145a  00000000  00000000  0003d42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d9ca  00000000  00000000  0003e884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000cc24e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000aa4  00000000  00000000  000cc2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000f40 	.word	0x08000f40

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	08000f40 	.word	0x08000f40

080001e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db0b      	blt.n	8000212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	f003 021f 	and.w	r2, r3, #31
 8000200:	4906      	ldr	r1, [pc, #24]	; (800021c <__NVIC_EnableIRQ+0x34>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	095b      	lsrs	r3, r3, #5
 8000208:	2001      	movs	r0, #1
 800020a:	fa00 f202 	lsl.w	r2, r0, r2
 800020e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <GPIO_Config>:
#include <stdint.h>
#include <stdio.h>
#include "stm32f407xx.h"

void GPIO_Config (void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	2. Set the required Pin in the INPUT Mode
	3. Configure the PULL UP/ PULL DOWN According to your requirement

	********************************************************/

	RCC->AHB1ENR |= (1<<0);  // Enable GPIOA clock
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <GPIO_Config+0x54>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027c:	4a12      	ldr	r2, [pc, #72]	; (80002c8 <GPIO_Config+0x54>)
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<4);	 // Enable GPIOE clock
 8000284:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <GPIO_Config+0x54>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <GPIO_Config+0x54>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &= ~(3<<2);  // Bits (3:2) = 0:0  --> PA1 in Input Mode
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <GPIO_Config+0x58>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <GPIO_Config+0x58>)
 8000296:	f023 030c 	bic.w	r3, r3, #12
 800029a:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(3<<0);  // Bits (1:0) = 0:0  --> PE0 in Input Mode
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <GPIO_Config+0x5c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <GPIO_Config+0x5c>)
 80002a2:	f023 0303 	bic.w	r3, r3, #3
 80002a6:	6013      	str	r3, [r2, #0]

	GPIOA->PUPDR |=  (1<<3);  // Bits (3:2) = 1:0  --> PA1 is in Pull Down mode
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <GPIO_Config+0x58>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	4a07      	ldr	r2, [pc, #28]	; (80002cc <GPIO_Config+0x58>)
 80002ae:	f043 0308 	orr.w	r3, r3, #8
 80002b2:	60d3      	str	r3, [r2, #12]
	GPIOE->PUPDR |=  (1<<1);  // Bits (1:0) = 1:0  --> PE0 is in Pull Down mode
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <GPIO_Config+0x5c>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <GPIO_Config+0x5c>)
 80002ba:	f043 0302 	orr.w	r3, r3, #2
 80002be:	60d3      	str	r3, [r2, #12]

}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020000 	.word	0x40020000
 80002d0:	40021000 	.word	0x40021000

080002d4 <Interrupt_Config>:

void Interrupt_Config (void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	5. Set the Interrupt Priority
	6. Enable the interrupt

	********************************************************/

	RCC->APB2ENR |= (1<<14);//Enable SYSCNFG
 80002d8:	4b13      	ldr	r3, [pc, #76]	; (8000328 <Interrupt_Config+0x54>)
 80002da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002dc:	4a12      	ldr	r2, [pc, #72]	; (8000328 <Interrupt_Config+0x54>)
 80002de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002e2:	6453      	str	r3, [r2, #68]	; 0x44

	//SYSCFG->EXTICR[0] &= ~(0xf<<4); // Bits[7:6:5:4] = (0:0:0:0)  -> configure EXTI1 line for PA1
	SYSCFG->EXTICR[0] |= (0x4<<0);	// Bits[3:2:1:0] = (0:0:0:0)  -> configure EXTI0 line for PE0
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <Interrupt_Config+0x58>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	4a10      	ldr	r2, [pc, #64]	; (800032c <Interrupt_Config+0x58>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6093      	str	r3, [r2, #8]

	//EXTI->IMR |= (1<<1);  // Bit[1] = 1  --> Disable the Mask on EXTI 1
	EXTI->IMR |= (1<<0);  // Bit[0] = 1  --> Disable the Mask on EXTI 0
 80002f0:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <Interrupt_Config+0x5c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <Interrupt_Config+0x5c>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6013      	str	r3, [r2, #0]

	//EXTI->RTSR &= ~(1<<1);  // Disable Rising Edge Trigger for PA1
	EXTI->RTSR &= ~(1<<0);  // Disable Rising Edge Trigger for PE0
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <Interrupt_Config+0x5c>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <Interrupt_Config+0x5c>)
 8000302:	f023 0301 	bic.w	r3, r3, #1
 8000306:	6093      	str	r3, [r2, #8]

	//EXTI->FTSR |= (1<<1);  // Enable Falling Edge Trigger for PA1
	EXTI->FTSR |= (1<<0);  // Enable Falling Edge Trigger for PE0
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <Interrupt_Config+0x5c>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	4a08      	ldr	r2, [pc, #32]	; (8000330 <Interrupt_Config+0x5c>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	60d3      	str	r3, [r2, #12]

	//NVIC_SetPriority (EXTI1_IRQn, 0); // Set Priority for PA1
	NVIC_SetPriority (EXTI0_IRQn, 0); // Set Priority for PE0
 8000314:	2100      	movs	r1, #0
 8000316:	2006      	movs	r0, #6
 8000318:	f7ff ff82 	bl	8000220 <__NVIC_SetPriority>


	//NVIC_EnableIRQ (EXTI1_IRQn);  // Enable Interrupt for PA1
	NVIC_EnableIRQ (EXTI0_IRQn);  // Enable Interrupt for PE0
 800031c:	2006      	movs	r0, #6
 800031e:	f7ff ff63 	bl	80001e8 <__NVIC_EnableIRQ>

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40023800 	.word	0x40023800
 800032c:	40013800 	.word	0x40013800
 8000330:	40013c00 	.word	0x40013c00

08000334 <EXTI0_IRQHandler>:
		EXTI->PR |= (1<<1);  // Clear the interrupt flag by writing a 1
	}
}
*/
void EXTI0_IRQHandler(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1<<0))    // If the PA1 triggered the interrupt
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <EXTI0_IRQHandler+0x28>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	2b00      	cmp	r3, #0
 8000342:	d008      	beq.n	8000356 <EXTI0_IRQHandler+0x22>
	{
		printf("interrupt for PE0\n");
 8000344:	4806      	ldr	r0, [pc, #24]	; (8000360 <EXTI0_IRQHandler+0x2c>)
 8000346:	f000 f9a5 	bl	8000694 <puts>
		EXTI->PR |= (1<<0);  // Clear the interrupt flag by writing a 1
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <EXTI0_IRQHandler+0x28>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a03      	ldr	r2, [pc, #12]	; (800035c <EXTI0_IRQHandler+0x28>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6153      	str	r3, [r2, #20]
	}
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40013c00 	.word	0x40013c00
 8000360:	08000f58 	.word	0x08000f58

08000364 <main>:

int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	GPIO_Config();
 8000368:	f7ff ff84 	bl	8000274 <GPIO_Config>
	Interrupt_Config();
 800036c:	f7ff ffb2 	bl	80002d4 <Interrupt_Config>

    /* Loop forever */
	for(;;);
 8000370:	e7fe      	b.n	8000370 <main+0xc>
	...

08000374 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <ITM_SendChar+0x44>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <ITM_SendChar+0x44>)
 8000384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000388:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <ITM_SendChar+0x48>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <ITM_SendChar+0x48>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000396:	bf00      	nop
 8000398:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f8      	beq.n	8000398 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80003a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	6013      	str	r3, [r2, #0]
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	e000edfc 	.word	0xe000edfc
 80003bc:	e0000e00 	.word	0xe0000e00

080003c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	e00a      	b.n	80003e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003d2:	f3af 8000 	nop.w
 80003d6:	4601      	mov	r1, r0
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	1c5a      	adds	r2, r3, #1
 80003dc:	60ba      	str	r2, [r7, #8]
 80003de:	b2ca      	uxtb	r2, r1
 80003e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	3301      	adds	r3, #1
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	697a      	ldr	r2, [r7, #20]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	dbf0      	blt.n	80003d2 <_read+0x12>
	}

return len;
 80003f0:	687b      	ldr	r3, [r7, #4]
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3718      	adds	r7, #24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b086      	sub	sp, #24
 80003fe:	af00      	add	r7, sp, #0
 8000400:	60f8      	str	r0, [r7, #12]
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]
 800040a:	e009      	b.n	8000420 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	1c5a      	adds	r2, r3, #1
 8000410:	60ba      	str	r2, [r7, #8]
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ffad 	bl	8000374 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	3301      	adds	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	697a      	ldr	r2, [r7, #20]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	429a      	cmp	r2, r3
 8000426:	dbf1      	blt.n	800040c <_write+0x12>
	}
	return len;
 8000428:	687b      	ldr	r3, [r7, #4]
}
 800042a:	4618      	mov	r0, r3
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <_close>:

int _close(int file)
{
 8000432:	b480      	push	{r7}
 8000434:	b083      	sub	sp, #12
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
	return -1;
 800043a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800043e:	4618      	mov	r0, r3
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr

08000448 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000458:	605a      	str	r2, [r3, #4]
	return 0;
 800045a:	2300      	movs	r3, #0
}
 800045c:	4618      	mov	r0, r3
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr

08000466 <_isatty>:

int _isatty(int file)
{
 8000466:	b480      	push	{r7}
 8000468:	b083      	sub	sp, #12
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
	return 1;
 800046e:	2301      	movs	r3, #1
}
 8000470:	4618      	mov	r0, r3
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr

0800047a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800047a:	b480      	push	{r7}
 800047c:	b085      	sub	sp, #20
 800047e:	af00      	add	r7, sp, #0
 8000480:	60f8      	str	r0, [r7, #12]
 8000482:	60b9      	str	r1, [r7, #8]
 8000484:	607a      	str	r2, [r7, #4]
	return 0;
 8000486:	2300      	movs	r3, #0
}
 8000488:	4618      	mov	r0, r3
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
	...

08000494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800049c:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <_sbrk+0x5c>)
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <_sbrk+0x60>)
 80004a0:	1ad3      	subs	r3, r2, r3
 80004a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004a8:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <_sbrk+0x64>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d102      	bne.n	80004b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <_sbrk+0x64>)
 80004b2:	4a12      	ldr	r2, [pc, #72]	; (80004fc <_sbrk+0x68>)
 80004b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004b6:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <_sbrk+0x64>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	693a      	ldr	r2, [r7, #16]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d207      	bcs.n	80004d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c4:	f000 f846 	bl	8000554 <__errno>
 80004c8:	4603      	mov	r3, r0
 80004ca:	220c      	movs	r2, #12
 80004cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004d2:	e009      	b.n	80004e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <_sbrk+0x64>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <_sbrk+0x64>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <_sbrk+0x64>)
 80004e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3718      	adds	r7, #24
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20020000 	.word	0x20020000
 80004f4:	00000400 	.word	0x00000400
 80004f8:	20000080 	.word	0x20000080
 80004fc:	200000a0 	.word	0x200000a0

08000500 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000502:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000504:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <LoopForever+0x6>)
  ldr r1, =_edata
 800050a:	490d      	ldr	r1, [pc, #52]	; (8000540 <LoopForever+0xa>)
  ldr r2, =_sidata
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <LoopForever+0xe>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000510:	e002      	b.n	8000518 <LoopCopyDataInit>

08000512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000516:	3304      	adds	r3, #4

08000518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800051c:	d3f9      	bcc.n	8000512 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000520:	4c0a      	ldr	r4, [pc, #40]	; (800054c <LoopForever+0x16>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000524:	e001      	b.n	800052a <LoopFillZerobss>

08000526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000528:	3204      	adds	r2, #4

0800052a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800052c:	d3fb      	bcc.n	8000526 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800052e:	f000 f817 	bl	8000560 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000532:	f7ff ff17 	bl	8000364 <main>

08000536 <LoopForever>:

LoopForever:
    b LoopForever
 8000536:	e7fe      	b.n	8000536 <LoopForever>
  ldr   r0, =_estack
 8000538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800053c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000540:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000544:	08000fd8 	.word	0x08000fd8
  ldr r2, =_sbss
 8000548:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800054c:	2000009c 	.word	0x2000009c

08000550 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000550:	e7fe      	b.n	8000550 <ADC_IRQHandler>
	...

08000554 <__errno>:
 8000554:	4b01      	ldr	r3, [pc, #4]	; (800055c <__errno+0x8>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000000 	.word	0x20000000

08000560 <__libc_init_array>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	4d0d      	ldr	r5, [pc, #52]	; (8000598 <__libc_init_array+0x38>)
 8000564:	4c0d      	ldr	r4, [pc, #52]	; (800059c <__libc_init_array+0x3c>)
 8000566:	1b64      	subs	r4, r4, r5
 8000568:	10a4      	asrs	r4, r4, #2
 800056a:	2600      	movs	r6, #0
 800056c:	42a6      	cmp	r6, r4
 800056e:	d109      	bne.n	8000584 <__libc_init_array+0x24>
 8000570:	4d0b      	ldr	r5, [pc, #44]	; (80005a0 <__libc_init_array+0x40>)
 8000572:	4c0c      	ldr	r4, [pc, #48]	; (80005a4 <__libc_init_array+0x44>)
 8000574:	f000 fce4 	bl	8000f40 <_init>
 8000578:	1b64      	subs	r4, r4, r5
 800057a:	10a4      	asrs	r4, r4, #2
 800057c:	2600      	movs	r6, #0
 800057e:	42a6      	cmp	r6, r4
 8000580:	d105      	bne.n	800058e <__libc_init_array+0x2e>
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f855 3b04 	ldr.w	r3, [r5], #4
 8000588:	4798      	blx	r3
 800058a:	3601      	adds	r6, #1
 800058c:	e7ee      	b.n	800056c <__libc_init_array+0xc>
 800058e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000592:	4798      	blx	r3
 8000594:	3601      	adds	r6, #1
 8000596:	e7f2      	b.n	800057e <__libc_init_array+0x1e>
 8000598:	08000fd0 	.word	0x08000fd0
 800059c:	08000fd0 	.word	0x08000fd0
 80005a0:	08000fd0 	.word	0x08000fd0
 80005a4:	08000fd4 	.word	0x08000fd4

080005a8 <memset>:
 80005a8:	4402      	add	r2, r0
 80005aa:	4603      	mov	r3, r0
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d100      	bne.n	80005b2 <memset+0xa>
 80005b0:	4770      	bx	lr
 80005b2:	f803 1b01 	strb.w	r1, [r3], #1
 80005b6:	e7f9      	b.n	80005ac <memset+0x4>

080005b8 <_puts_r>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	460e      	mov	r6, r1
 80005bc:	4605      	mov	r5, r0
 80005be:	b118      	cbz	r0, 80005c8 <_puts_r+0x10>
 80005c0:	6983      	ldr	r3, [r0, #24]
 80005c2:	b90b      	cbnz	r3, 80005c8 <_puts_r+0x10>
 80005c4:	f000 fa48 	bl	8000a58 <__sinit>
 80005c8:	69ab      	ldr	r3, [r5, #24]
 80005ca:	68ac      	ldr	r4, [r5, #8]
 80005cc:	b913      	cbnz	r3, 80005d4 <_puts_r+0x1c>
 80005ce:	4628      	mov	r0, r5
 80005d0:	f000 fa42 	bl	8000a58 <__sinit>
 80005d4:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <_puts_r+0xd0>)
 80005d6:	429c      	cmp	r4, r3
 80005d8:	d120      	bne.n	800061c <_puts_r+0x64>
 80005da:	686c      	ldr	r4, [r5, #4]
 80005dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005de:	07db      	lsls	r3, r3, #31
 80005e0:	d405      	bmi.n	80005ee <_puts_r+0x36>
 80005e2:	89a3      	ldrh	r3, [r4, #12]
 80005e4:	0598      	lsls	r0, r3, #22
 80005e6:	d402      	bmi.n	80005ee <_puts_r+0x36>
 80005e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005ea:	f000 fad3 	bl	8000b94 <__retarget_lock_acquire_recursive>
 80005ee:	89a3      	ldrh	r3, [r4, #12]
 80005f0:	0719      	lsls	r1, r3, #28
 80005f2:	d51d      	bpl.n	8000630 <_puts_r+0x78>
 80005f4:	6923      	ldr	r3, [r4, #16]
 80005f6:	b1db      	cbz	r3, 8000630 <_puts_r+0x78>
 80005f8:	3e01      	subs	r6, #1
 80005fa:	68a3      	ldr	r3, [r4, #8]
 80005fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000600:	3b01      	subs	r3, #1
 8000602:	60a3      	str	r3, [r4, #8]
 8000604:	bb39      	cbnz	r1, 8000656 <_puts_r+0x9e>
 8000606:	2b00      	cmp	r3, #0
 8000608:	da38      	bge.n	800067c <_puts_r+0xc4>
 800060a:	4622      	mov	r2, r4
 800060c:	210a      	movs	r1, #10
 800060e:	4628      	mov	r0, r5
 8000610:	f000 f848 	bl	80006a4 <__swbuf_r>
 8000614:	3001      	adds	r0, #1
 8000616:	d011      	beq.n	800063c <_puts_r+0x84>
 8000618:	250a      	movs	r5, #10
 800061a:	e011      	b.n	8000640 <_puts_r+0x88>
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <_puts_r+0xd4>)
 800061e:	429c      	cmp	r4, r3
 8000620:	d101      	bne.n	8000626 <_puts_r+0x6e>
 8000622:	68ac      	ldr	r4, [r5, #8]
 8000624:	e7da      	b.n	80005dc <_puts_r+0x24>
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <_puts_r+0xd8>)
 8000628:	429c      	cmp	r4, r3
 800062a:	bf08      	it	eq
 800062c:	68ec      	ldreq	r4, [r5, #12]
 800062e:	e7d5      	b.n	80005dc <_puts_r+0x24>
 8000630:	4621      	mov	r1, r4
 8000632:	4628      	mov	r0, r5
 8000634:	f000 f888 	bl	8000748 <__swsetup_r>
 8000638:	2800      	cmp	r0, #0
 800063a:	d0dd      	beq.n	80005f8 <_puts_r+0x40>
 800063c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000642:	07da      	lsls	r2, r3, #31
 8000644:	d405      	bmi.n	8000652 <_puts_r+0x9a>
 8000646:	89a3      	ldrh	r3, [r4, #12]
 8000648:	059b      	lsls	r3, r3, #22
 800064a:	d402      	bmi.n	8000652 <_puts_r+0x9a>
 800064c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800064e:	f000 faa2 	bl	8000b96 <__retarget_lock_release_recursive>
 8000652:	4628      	mov	r0, r5
 8000654:	bd70      	pop	{r4, r5, r6, pc}
 8000656:	2b00      	cmp	r3, #0
 8000658:	da04      	bge.n	8000664 <_puts_r+0xac>
 800065a:	69a2      	ldr	r2, [r4, #24]
 800065c:	429a      	cmp	r2, r3
 800065e:	dc06      	bgt.n	800066e <_puts_r+0xb6>
 8000660:	290a      	cmp	r1, #10
 8000662:	d004      	beq.n	800066e <_puts_r+0xb6>
 8000664:	6823      	ldr	r3, [r4, #0]
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	6022      	str	r2, [r4, #0]
 800066a:	7019      	strb	r1, [r3, #0]
 800066c:	e7c5      	b.n	80005fa <_puts_r+0x42>
 800066e:	4622      	mov	r2, r4
 8000670:	4628      	mov	r0, r5
 8000672:	f000 f817 	bl	80006a4 <__swbuf_r>
 8000676:	3001      	adds	r0, #1
 8000678:	d1bf      	bne.n	80005fa <_puts_r+0x42>
 800067a:	e7df      	b.n	800063c <_puts_r+0x84>
 800067c:	6823      	ldr	r3, [r4, #0]
 800067e:	250a      	movs	r5, #10
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	6022      	str	r2, [r4, #0]
 8000684:	701d      	strb	r5, [r3, #0]
 8000686:	e7db      	b.n	8000640 <_puts_r+0x88>
 8000688:	08000f90 	.word	0x08000f90
 800068c:	08000fb0 	.word	0x08000fb0
 8000690:	08000f70 	.word	0x08000f70

08000694 <puts>:
 8000694:	4b02      	ldr	r3, [pc, #8]	; (80006a0 <puts+0xc>)
 8000696:	4601      	mov	r1, r0
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	f7ff bf8d 	b.w	80005b8 <_puts_r>
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000

080006a4 <__swbuf_r>:
 80006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a6:	460e      	mov	r6, r1
 80006a8:	4614      	mov	r4, r2
 80006aa:	4605      	mov	r5, r0
 80006ac:	b118      	cbz	r0, 80006b6 <__swbuf_r+0x12>
 80006ae:	6983      	ldr	r3, [r0, #24]
 80006b0:	b90b      	cbnz	r3, 80006b6 <__swbuf_r+0x12>
 80006b2:	f000 f9d1 	bl	8000a58 <__sinit>
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <__swbuf_r+0x98>)
 80006b8:	429c      	cmp	r4, r3
 80006ba:	d12b      	bne.n	8000714 <__swbuf_r+0x70>
 80006bc:	686c      	ldr	r4, [r5, #4]
 80006be:	69a3      	ldr	r3, [r4, #24]
 80006c0:	60a3      	str	r3, [r4, #8]
 80006c2:	89a3      	ldrh	r3, [r4, #12]
 80006c4:	071a      	lsls	r2, r3, #28
 80006c6:	d52f      	bpl.n	8000728 <__swbuf_r+0x84>
 80006c8:	6923      	ldr	r3, [r4, #16]
 80006ca:	b36b      	cbz	r3, 8000728 <__swbuf_r+0x84>
 80006cc:	6923      	ldr	r3, [r4, #16]
 80006ce:	6820      	ldr	r0, [r4, #0]
 80006d0:	1ac0      	subs	r0, r0, r3
 80006d2:	6963      	ldr	r3, [r4, #20]
 80006d4:	b2f6      	uxtb	r6, r6
 80006d6:	4283      	cmp	r3, r0
 80006d8:	4637      	mov	r7, r6
 80006da:	dc04      	bgt.n	80006e6 <__swbuf_r+0x42>
 80006dc:	4621      	mov	r1, r4
 80006de:	4628      	mov	r0, r5
 80006e0:	f000 f926 	bl	8000930 <_fflush_r>
 80006e4:	bb30      	cbnz	r0, 8000734 <__swbuf_r+0x90>
 80006e6:	68a3      	ldr	r3, [r4, #8]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	60a3      	str	r3, [r4, #8]
 80006ec:	6823      	ldr	r3, [r4, #0]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	6022      	str	r2, [r4, #0]
 80006f2:	701e      	strb	r6, [r3, #0]
 80006f4:	6963      	ldr	r3, [r4, #20]
 80006f6:	3001      	adds	r0, #1
 80006f8:	4283      	cmp	r3, r0
 80006fa:	d004      	beq.n	8000706 <__swbuf_r+0x62>
 80006fc:	89a3      	ldrh	r3, [r4, #12]
 80006fe:	07db      	lsls	r3, r3, #31
 8000700:	d506      	bpl.n	8000710 <__swbuf_r+0x6c>
 8000702:	2e0a      	cmp	r6, #10
 8000704:	d104      	bne.n	8000710 <__swbuf_r+0x6c>
 8000706:	4621      	mov	r1, r4
 8000708:	4628      	mov	r0, r5
 800070a:	f000 f911 	bl	8000930 <_fflush_r>
 800070e:	b988      	cbnz	r0, 8000734 <__swbuf_r+0x90>
 8000710:	4638      	mov	r0, r7
 8000712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <__swbuf_r+0x9c>)
 8000716:	429c      	cmp	r4, r3
 8000718:	d101      	bne.n	800071e <__swbuf_r+0x7a>
 800071a:	68ac      	ldr	r4, [r5, #8]
 800071c:	e7cf      	b.n	80006be <__swbuf_r+0x1a>
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <__swbuf_r+0xa0>)
 8000720:	429c      	cmp	r4, r3
 8000722:	bf08      	it	eq
 8000724:	68ec      	ldreq	r4, [r5, #12]
 8000726:	e7ca      	b.n	80006be <__swbuf_r+0x1a>
 8000728:	4621      	mov	r1, r4
 800072a:	4628      	mov	r0, r5
 800072c:	f000 f80c 	bl	8000748 <__swsetup_r>
 8000730:	2800      	cmp	r0, #0
 8000732:	d0cb      	beq.n	80006cc <__swbuf_r+0x28>
 8000734:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000738:	e7ea      	b.n	8000710 <__swbuf_r+0x6c>
 800073a:	bf00      	nop
 800073c:	08000f90 	.word	0x08000f90
 8000740:	08000fb0 	.word	0x08000fb0
 8000744:	08000f70 	.word	0x08000f70

08000748 <__swsetup_r>:
 8000748:	4b32      	ldr	r3, [pc, #200]	; (8000814 <__swsetup_r+0xcc>)
 800074a:	b570      	push	{r4, r5, r6, lr}
 800074c:	681d      	ldr	r5, [r3, #0]
 800074e:	4606      	mov	r6, r0
 8000750:	460c      	mov	r4, r1
 8000752:	b125      	cbz	r5, 800075e <__swsetup_r+0x16>
 8000754:	69ab      	ldr	r3, [r5, #24]
 8000756:	b913      	cbnz	r3, 800075e <__swsetup_r+0x16>
 8000758:	4628      	mov	r0, r5
 800075a:	f000 f97d 	bl	8000a58 <__sinit>
 800075e:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <__swsetup_r+0xd0>)
 8000760:	429c      	cmp	r4, r3
 8000762:	d10f      	bne.n	8000784 <__swsetup_r+0x3c>
 8000764:	686c      	ldr	r4, [r5, #4]
 8000766:	89a3      	ldrh	r3, [r4, #12]
 8000768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800076c:	0719      	lsls	r1, r3, #28
 800076e:	d42c      	bmi.n	80007ca <__swsetup_r+0x82>
 8000770:	06dd      	lsls	r5, r3, #27
 8000772:	d411      	bmi.n	8000798 <__swsetup_r+0x50>
 8000774:	2309      	movs	r3, #9
 8000776:	6033      	str	r3, [r6, #0]
 8000778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800077c:	81a3      	strh	r3, [r4, #12]
 800077e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000782:	e03e      	b.n	8000802 <__swsetup_r+0xba>
 8000784:	4b25      	ldr	r3, [pc, #148]	; (800081c <__swsetup_r+0xd4>)
 8000786:	429c      	cmp	r4, r3
 8000788:	d101      	bne.n	800078e <__swsetup_r+0x46>
 800078a:	68ac      	ldr	r4, [r5, #8]
 800078c:	e7eb      	b.n	8000766 <__swsetup_r+0x1e>
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <__swsetup_r+0xd8>)
 8000790:	429c      	cmp	r4, r3
 8000792:	bf08      	it	eq
 8000794:	68ec      	ldreq	r4, [r5, #12]
 8000796:	e7e6      	b.n	8000766 <__swsetup_r+0x1e>
 8000798:	0758      	lsls	r0, r3, #29
 800079a:	d512      	bpl.n	80007c2 <__swsetup_r+0x7a>
 800079c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800079e:	b141      	cbz	r1, 80007b2 <__swsetup_r+0x6a>
 80007a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80007a4:	4299      	cmp	r1, r3
 80007a6:	d002      	beq.n	80007ae <__swsetup_r+0x66>
 80007a8:	4630      	mov	r0, r6
 80007aa:	f000 fa59 	bl	8000c60 <_free_r>
 80007ae:	2300      	movs	r3, #0
 80007b0:	6363      	str	r3, [r4, #52]	; 0x34
 80007b2:	89a3      	ldrh	r3, [r4, #12]
 80007b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80007b8:	81a3      	strh	r3, [r4, #12]
 80007ba:	2300      	movs	r3, #0
 80007bc:	6063      	str	r3, [r4, #4]
 80007be:	6923      	ldr	r3, [r4, #16]
 80007c0:	6023      	str	r3, [r4, #0]
 80007c2:	89a3      	ldrh	r3, [r4, #12]
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	81a3      	strh	r3, [r4, #12]
 80007ca:	6923      	ldr	r3, [r4, #16]
 80007cc:	b94b      	cbnz	r3, 80007e2 <__swsetup_r+0x9a>
 80007ce:	89a3      	ldrh	r3, [r4, #12]
 80007d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80007d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007d8:	d003      	beq.n	80007e2 <__swsetup_r+0x9a>
 80007da:	4621      	mov	r1, r4
 80007dc:	4630      	mov	r0, r6
 80007de:	f000 f9ff 	bl	8000be0 <__smakebuf_r>
 80007e2:	89a0      	ldrh	r0, [r4, #12]
 80007e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80007e8:	f010 0301 	ands.w	r3, r0, #1
 80007ec:	d00a      	beq.n	8000804 <__swsetup_r+0xbc>
 80007ee:	2300      	movs	r3, #0
 80007f0:	60a3      	str	r3, [r4, #8]
 80007f2:	6963      	ldr	r3, [r4, #20]
 80007f4:	425b      	negs	r3, r3
 80007f6:	61a3      	str	r3, [r4, #24]
 80007f8:	6923      	ldr	r3, [r4, #16]
 80007fa:	b943      	cbnz	r3, 800080e <__swsetup_r+0xc6>
 80007fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000800:	d1ba      	bne.n	8000778 <__swsetup_r+0x30>
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	0781      	lsls	r1, r0, #30
 8000806:	bf58      	it	pl
 8000808:	6963      	ldrpl	r3, [r4, #20]
 800080a:	60a3      	str	r3, [r4, #8]
 800080c:	e7f4      	b.n	80007f8 <__swsetup_r+0xb0>
 800080e:	2000      	movs	r0, #0
 8000810:	e7f7      	b.n	8000802 <__swsetup_r+0xba>
 8000812:	bf00      	nop
 8000814:	20000000 	.word	0x20000000
 8000818:	08000f90 	.word	0x08000f90
 800081c:	08000fb0 	.word	0x08000fb0
 8000820:	08000f70 	.word	0x08000f70

08000824 <__sflush_r>:
 8000824:	898a      	ldrh	r2, [r1, #12]
 8000826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800082a:	4605      	mov	r5, r0
 800082c:	0710      	lsls	r0, r2, #28
 800082e:	460c      	mov	r4, r1
 8000830:	d458      	bmi.n	80008e4 <__sflush_r+0xc0>
 8000832:	684b      	ldr	r3, [r1, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	dc05      	bgt.n	8000844 <__sflush_r+0x20>
 8000838:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800083a:	2b00      	cmp	r3, #0
 800083c:	dc02      	bgt.n	8000844 <__sflush_r+0x20>
 800083e:	2000      	movs	r0, #0
 8000840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000846:	2e00      	cmp	r6, #0
 8000848:	d0f9      	beq.n	800083e <__sflush_r+0x1a>
 800084a:	2300      	movs	r3, #0
 800084c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000850:	682f      	ldr	r7, [r5, #0]
 8000852:	602b      	str	r3, [r5, #0]
 8000854:	d032      	beq.n	80008bc <__sflush_r+0x98>
 8000856:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000858:	89a3      	ldrh	r3, [r4, #12]
 800085a:	075a      	lsls	r2, r3, #29
 800085c:	d505      	bpl.n	800086a <__sflush_r+0x46>
 800085e:	6863      	ldr	r3, [r4, #4]
 8000860:	1ac0      	subs	r0, r0, r3
 8000862:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000864:	b10b      	cbz	r3, 800086a <__sflush_r+0x46>
 8000866:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000868:	1ac0      	subs	r0, r0, r3
 800086a:	2300      	movs	r3, #0
 800086c:	4602      	mov	r2, r0
 800086e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000870:	6a21      	ldr	r1, [r4, #32]
 8000872:	4628      	mov	r0, r5
 8000874:	47b0      	blx	r6
 8000876:	1c43      	adds	r3, r0, #1
 8000878:	89a3      	ldrh	r3, [r4, #12]
 800087a:	d106      	bne.n	800088a <__sflush_r+0x66>
 800087c:	6829      	ldr	r1, [r5, #0]
 800087e:	291d      	cmp	r1, #29
 8000880:	d82c      	bhi.n	80008dc <__sflush_r+0xb8>
 8000882:	4a2a      	ldr	r2, [pc, #168]	; (800092c <__sflush_r+0x108>)
 8000884:	40ca      	lsrs	r2, r1
 8000886:	07d6      	lsls	r6, r2, #31
 8000888:	d528      	bpl.n	80008dc <__sflush_r+0xb8>
 800088a:	2200      	movs	r2, #0
 800088c:	6062      	str	r2, [r4, #4]
 800088e:	04d9      	lsls	r1, r3, #19
 8000890:	6922      	ldr	r2, [r4, #16]
 8000892:	6022      	str	r2, [r4, #0]
 8000894:	d504      	bpl.n	80008a0 <__sflush_r+0x7c>
 8000896:	1c42      	adds	r2, r0, #1
 8000898:	d101      	bne.n	800089e <__sflush_r+0x7a>
 800089a:	682b      	ldr	r3, [r5, #0]
 800089c:	b903      	cbnz	r3, 80008a0 <__sflush_r+0x7c>
 800089e:	6560      	str	r0, [r4, #84]	; 0x54
 80008a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008a2:	602f      	str	r7, [r5, #0]
 80008a4:	2900      	cmp	r1, #0
 80008a6:	d0ca      	beq.n	800083e <__sflush_r+0x1a>
 80008a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d002      	beq.n	80008b6 <__sflush_r+0x92>
 80008b0:	4628      	mov	r0, r5
 80008b2:	f000 f9d5 	bl	8000c60 <_free_r>
 80008b6:	2000      	movs	r0, #0
 80008b8:	6360      	str	r0, [r4, #52]	; 0x34
 80008ba:	e7c1      	b.n	8000840 <__sflush_r+0x1c>
 80008bc:	6a21      	ldr	r1, [r4, #32]
 80008be:	2301      	movs	r3, #1
 80008c0:	4628      	mov	r0, r5
 80008c2:	47b0      	blx	r6
 80008c4:	1c41      	adds	r1, r0, #1
 80008c6:	d1c7      	bne.n	8000858 <__sflush_r+0x34>
 80008c8:	682b      	ldr	r3, [r5, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0c4      	beq.n	8000858 <__sflush_r+0x34>
 80008ce:	2b1d      	cmp	r3, #29
 80008d0:	d001      	beq.n	80008d6 <__sflush_r+0xb2>
 80008d2:	2b16      	cmp	r3, #22
 80008d4:	d101      	bne.n	80008da <__sflush_r+0xb6>
 80008d6:	602f      	str	r7, [r5, #0]
 80008d8:	e7b1      	b.n	800083e <__sflush_r+0x1a>
 80008da:	89a3      	ldrh	r3, [r4, #12]
 80008dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e0:	81a3      	strh	r3, [r4, #12]
 80008e2:	e7ad      	b.n	8000840 <__sflush_r+0x1c>
 80008e4:	690f      	ldr	r7, [r1, #16]
 80008e6:	2f00      	cmp	r7, #0
 80008e8:	d0a9      	beq.n	800083e <__sflush_r+0x1a>
 80008ea:	0793      	lsls	r3, r2, #30
 80008ec:	680e      	ldr	r6, [r1, #0]
 80008ee:	bf08      	it	eq
 80008f0:	694b      	ldreq	r3, [r1, #20]
 80008f2:	600f      	str	r7, [r1, #0]
 80008f4:	bf18      	it	ne
 80008f6:	2300      	movne	r3, #0
 80008f8:	eba6 0807 	sub.w	r8, r6, r7
 80008fc:	608b      	str	r3, [r1, #8]
 80008fe:	f1b8 0f00 	cmp.w	r8, #0
 8000902:	dd9c      	ble.n	800083e <__sflush_r+0x1a>
 8000904:	6a21      	ldr	r1, [r4, #32]
 8000906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000908:	4643      	mov	r3, r8
 800090a:	463a      	mov	r2, r7
 800090c:	4628      	mov	r0, r5
 800090e:	47b0      	blx	r6
 8000910:	2800      	cmp	r0, #0
 8000912:	dc06      	bgt.n	8000922 <__sflush_r+0xfe>
 8000914:	89a3      	ldrh	r3, [r4, #12]
 8000916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091a:	81a3      	strh	r3, [r4, #12]
 800091c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000920:	e78e      	b.n	8000840 <__sflush_r+0x1c>
 8000922:	4407      	add	r7, r0
 8000924:	eba8 0800 	sub.w	r8, r8, r0
 8000928:	e7e9      	b.n	80008fe <__sflush_r+0xda>
 800092a:	bf00      	nop
 800092c:	20400001 	.word	0x20400001

08000930 <_fflush_r>:
 8000930:	b538      	push	{r3, r4, r5, lr}
 8000932:	690b      	ldr	r3, [r1, #16]
 8000934:	4605      	mov	r5, r0
 8000936:	460c      	mov	r4, r1
 8000938:	b913      	cbnz	r3, 8000940 <_fflush_r+0x10>
 800093a:	2500      	movs	r5, #0
 800093c:	4628      	mov	r0, r5
 800093e:	bd38      	pop	{r3, r4, r5, pc}
 8000940:	b118      	cbz	r0, 800094a <_fflush_r+0x1a>
 8000942:	6983      	ldr	r3, [r0, #24]
 8000944:	b90b      	cbnz	r3, 800094a <_fflush_r+0x1a>
 8000946:	f000 f887 	bl	8000a58 <__sinit>
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <_fflush_r+0x6c>)
 800094c:	429c      	cmp	r4, r3
 800094e:	d11b      	bne.n	8000988 <_fflush_r+0x58>
 8000950:	686c      	ldr	r4, [r5, #4]
 8000952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0ef      	beq.n	800093a <_fflush_r+0xa>
 800095a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800095c:	07d0      	lsls	r0, r2, #31
 800095e:	d404      	bmi.n	800096a <_fflush_r+0x3a>
 8000960:	0599      	lsls	r1, r3, #22
 8000962:	d402      	bmi.n	800096a <_fflush_r+0x3a>
 8000964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000966:	f000 f915 	bl	8000b94 <__retarget_lock_acquire_recursive>
 800096a:	4628      	mov	r0, r5
 800096c:	4621      	mov	r1, r4
 800096e:	f7ff ff59 	bl	8000824 <__sflush_r>
 8000972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000974:	07da      	lsls	r2, r3, #31
 8000976:	4605      	mov	r5, r0
 8000978:	d4e0      	bmi.n	800093c <_fflush_r+0xc>
 800097a:	89a3      	ldrh	r3, [r4, #12]
 800097c:	059b      	lsls	r3, r3, #22
 800097e:	d4dd      	bmi.n	800093c <_fflush_r+0xc>
 8000980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000982:	f000 f908 	bl	8000b96 <__retarget_lock_release_recursive>
 8000986:	e7d9      	b.n	800093c <_fflush_r+0xc>
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <_fflush_r+0x70>)
 800098a:	429c      	cmp	r4, r3
 800098c:	d101      	bne.n	8000992 <_fflush_r+0x62>
 800098e:	68ac      	ldr	r4, [r5, #8]
 8000990:	e7df      	b.n	8000952 <_fflush_r+0x22>
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <_fflush_r+0x74>)
 8000994:	429c      	cmp	r4, r3
 8000996:	bf08      	it	eq
 8000998:	68ec      	ldreq	r4, [r5, #12]
 800099a:	e7da      	b.n	8000952 <_fflush_r+0x22>
 800099c:	08000f90 	.word	0x08000f90
 80009a0:	08000fb0 	.word	0x08000fb0
 80009a4:	08000f70 	.word	0x08000f70

080009a8 <std>:
 80009a8:	2300      	movs	r3, #0
 80009aa:	b510      	push	{r4, lr}
 80009ac:	4604      	mov	r4, r0
 80009ae:	e9c0 3300 	strd	r3, r3, [r0]
 80009b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009b6:	6083      	str	r3, [r0, #8]
 80009b8:	8181      	strh	r1, [r0, #12]
 80009ba:	6643      	str	r3, [r0, #100]	; 0x64
 80009bc:	81c2      	strh	r2, [r0, #14]
 80009be:	6183      	str	r3, [r0, #24]
 80009c0:	4619      	mov	r1, r3
 80009c2:	2208      	movs	r2, #8
 80009c4:	305c      	adds	r0, #92	; 0x5c
 80009c6:	f7ff fdef 	bl	80005a8 <memset>
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <std+0x38>)
 80009cc:	6263      	str	r3, [r4, #36]	; 0x24
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <std+0x3c>)
 80009d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <std+0x40>)
 80009d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <std+0x44>)
 80009d8:	6224      	str	r4, [r4, #32]
 80009da:	6323      	str	r3, [r4, #48]	; 0x30
 80009dc:	bd10      	pop	{r4, pc}
 80009de:	bf00      	nop
 80009e0:	08000dd1 	.word	0x08000dd1
 80009e4:	08000df3 	.word	0x08000df3
 80009e8:	08000e2b 	.word	0x08000e2b
 80009ec:	08000e4f 	.word	0x08000e4f

080009f0 <_cleanup_r>:
 80009f0:	4901      	ldr	r1, [pc, #4]	; (80009f8 <_cleanup_r+0x8>)
 80009f2:	f000 b8af 	b.w	8000b54 <_fwalk_reent>
 80009f6:	bf00      	nop
 80009f8:	08000931 	.word	0x08000931

080009fc <__sfmoreglue>:
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	1e4a      	subs	r2, r1, #1
 8000a00:	2568      	movs	r5, #104	; 0x68
 8000a02:	4355      	muls	r5, r2
 8000a04:	460e      	mov	r6, r1
 8000a06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000a0a:	f000 f977 	bl	8000cfc <_malloc_r>
 8000a0e:	4604      	mov	r4, r0
 8000a10:	b140      	cbz	r0, 8000a24 <__sfmoreglue+0x28>
 8000a12:	2100      	movs	r1, #0
 8000a14:	e9c0 1600 	strd	r1, r6, [r0]
 8000a18:	300c      	adds	r0, #12
 8000a1a:	60a0      	str	r0, [r4, #8]
 8000a1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000a20:	f7ff fdc2 	bl	80005a8 <memset>
 8000a24:	4620      	mov	r0, r4
 8000a26:	bd70      	pop	{r4, r5, r6, pc}

08000a28 <__sfp_lock_acquire>:
 8000a28:	4801      	ldr	r0, [pc, #4]	; (8000a30 <__sfp_lock_acquire+0x8>)
 8000a2a:	f000 b8b3 	b.w	8000b94 <__retarget_lock_acquire_recursive>
 8000a2e:	bf00      	nop
 8000a30:	20000094 	.word	0x20000094

08000a34 <__sfp_lock_release>:
 8000a34:	4801      	ldr	r0, [pc, #4]	; (8000a3c <__sfp_lock_release+0x8>)
 8000a36:	f000 b8ae 	b.w	8000b96 <__retarget_lock_release_recursive>
 8000a3a:	bf00      	nop
 8000a3c:	20000094 	.word	0x20000094

08000a40 <__sinit_lock_acquire>:
 8000a40:	4801      	ldr	r0, [pc, #4]	; (8000a48 <__sinit_lock_acquire+0x8>)
 8000a42:	f000 b8a7 	b.w	8000b94 <__retarget_lock_acquire_recursive>
 8000a46:	bf00      	nop
 8000a48:	2000008f 	.word	0x2000008f

08000a4c <__sinit_lock_release>:
 8000a4c:	4801      	ldr	r0, [pc, #4]	; (8000a54 <__sinit_lock_release+0x8>)
 8000a4e:	f000 b8a2 	b.w	8000b96 <__retarget_lock_release_recursive>
 8000a52:	bf00      	nop
 8000a54:	2000008f 	.word	0x2000008f

08000a58 <__sinit>:
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	f7ff fff0 	bl	8000a40 <__sinit_lock_acquire>
 8000a60:	69a3      	ldr	r3, [r4, #24]
 8000a62:	b11b      	cbz	r3, 8000a6c <__sinit+0x14>
 8000a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a68:	f7ff bff0 	b.w	8000a4c <__sinit_lock_release>
 8000a6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000a70:	6523      	str	r3, [r4, #80]	; 0x50
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <__sinit+0x68>)
 8000a74:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <__sinit+0x6c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	62a2      	str	r2, [r4, #40]	; 0x28
 8000a7a:	42a3      	cmp	r3, r4
 8000a7c:	bf04      	itt	eq
 8000a7e:	2301      	moveq	r3, #1
 8000a80:	61a3      	streq	r3, [r4, #24]
 8000a82:	4620      	mov	r0, r4
 8000a84:	f000 f820 	bl	8000ac8 <__sfp>
 8000a88:	6060      	str	r0, [r4, #4]
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f000 f81c 	bl	8000ac8 <__sfp>
 8000a90:	60a0      	str	r0, [r4, #8]
 8000a92:	4620      	mov	r0, r4
 8000a94:	f000 f818 	bl	8000ac8 <__sfp>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60e0      	str	r0, [r4, #12]
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	6860      	ldr	r0, [r4, #4]
 8000aa0:	f7ff ff82 	bl	80009a8 <std>
 8000aa4:	68a0      	ldr	r0, [r4, #8]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2109      	movs	r1, #9
 8000aaa:	f7ff ff7d 	bl	80009a8 <std>
 8000aae:	68e0      	ldr	r0, [r4, #12]
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	2112      	movs	r1, #18
 8000ab4:	f7ff ff78 	bl	80009a8 <std>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61a3      	str	r3, [r4, #24]
 8000abc:	e7d2      	b.n	8000a64 <__sinit+0xc>
 8000abe:	bf00      	nop
 8000ac0:	08000f6c 	.word	0x08000f6c
 8000ac4:	080009f1 	.word	0x080009f1

08000ac8 <__sfp>:
 8000ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aca:	4607      	mov	r7, r0
 8000acc:	f7ff ffac 	bl	8000a28 <__sfp_lock_acquire>
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <__sfp+0x84>)
 8000ad2:	681e      	ldr	r6, [r3, #0]
 8000ad4:	69b3      	ldr	r3, [r6, #24]
 8000ad6:	b913      	cbnz	r3, 8000ade <__sfp+0x16>
 8000ad8:	4630      	mov	r0, r6
 8000ada:	f7ff ffbd 	bl	8000a58 <__sinit>
 8000ade:	3648      	adds	r6, #72	; 0x48
 8000ae0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	d503      	bpl.n	8000af0 <__sfp+0x28>
 8000ae8:	6833      	ldr	r3, [r6, #0]
 8000aea:	b30b      	cbz	r3, 8000b30 <__sfp+0x68>
 8000aec:	6836      	ldr	r6, [r6, #0]
 8000aee:	e7f7      	b.n	8000ae0 <__sfp+0x18>
 8000af0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000af4:	b9d5      	cbnz	r5, 8000b2c <__sfp+0x64>
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <__sfp+0x88>)
 8000af8:	60e3      	str	r3, [r4, #12]
 8000afa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000afe:	6665      	str	r5, [r4, #100]	; 0x64
 8000b00:	f000 f847 	bl	8000b92 <__retarget_lock_init_recursive>
 8000b04:	f7ff ff96 	bl	8000a34 <__sfp_lock_release>
 8000b08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000b0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000b10:	6025      	str	r5, [r4, #0]
 8000b12:	61a5      	str	r5, [r4, #24]
 8000b14:	2208      	movs	r2, #8
 8000b16:	4629      	mov	r1, r5
 8000b18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000b1c:	f7ff fd44 	bl	80005a8 <memset>
 8000b20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b28:	4620      	mov	r0, r4
 8000b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b2c:	3468      	adds	r4, #104	; 0x68
 8000b2e:	e7d9      	b.n	8000ae4 <__sfp+0x1c>
 8000b30:	2104      	movs	r1, #4
 8000b32:	4638      	mov	r0, r7
 8000b34:	f7ff ff62 	bl	80009fc <__sfmoreglue>
 8000b38:	4604      	mov	r4, r0
 8000b3a:	6030      	str	r0, [r6, #0]
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d1d5      	bne.n	8000aec <__sfp+0x24>
 8000b40:	f7ff ff78 	bl	8000a34 <__sfp_lock_release>
 8000b44:	230c      	movs	r3, #12
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	e7ee      	b.n	8000b28 <__sfp+0x60>
 8000b4a:	bf00      	nop
 8000b4c:	08000f6c 	.word	0x08000f6c
 8000b50:	ffff0001 	.word	0xffff0001

08000b54 <_fwalk_reent>:
 8000b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b58:	4606      	mov	r6, r0
 8000b5a:	4688      	mov	r8, r1
 8000b5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b60:	2700      	movs	r7, #0
 8000b62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b66:	f1b9 0901 	subs.w	r9, r9, #1
 8000b6a:	d505      	bpl.n	8000b78 <_fwalk_reent+0x24>
 8000b6c:	6824      	ldr	r4, [r4, #0]
 8000b6e:	2c00      	cmp	r4, #0
 8000b70:	d1f7      	bne.n	8000b62 <_fwalk_reent+0xe>
 8000b72:	4638      	mov	r0, r7
 8000b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b78:	89ab      	ldrh	r3, [r5, #12]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d907      	bls.n	8000b8e <_fwalk_reent+0x3a>
 8000b7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b82:	3301      	adds	r3, #1
 8000b84:	d003      	beq.n	8000b8e <_fwalk_reent+0x3a>
 8000b86:	4629      	mov	r1, r5
 8000b88:	4630      	mov	r0, r6
 8000b8a:	47c0      	blx	r8
 8000b8c:	4307      	orrs	r7, r0
 8000b8e:	3568      	adds	r5, #104	; 0x68
 8000b90:	e7e9      	b.n	8000b66 <_fwalk_reent+0x12>

08000b92 <__retarget_lock_init_recursive>:
 8000b92:	4770      	bx	lr

08000b94 <__retarget_lock_acquire_recursive>:
 8000b94:	4770      	bx	lr

08000b96 <__retarget_lock_release_recursive>:
 8000b96:	4770      	bx	lr

08000b98 <__swhatbuf_r>:
 8000b98:	b570      	push	{r4, r5, r6, lr}
 8000b9a:	460e      	mov	r6, r1
 8000b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	b096      	sub	sp, #88	; 0x58
 8000ba4:	4614      	mov	r4, r2
 8000ba6:	461d      	mov	r5, r3
 8000ba8:	da07      	bge.n	8000bba <__swhatbuf_r+0x22>
 8000baa:	2300      	movs	r3, #0
 8000bac:	602b      	str	r3, [r5, #0]
 8000bae:	89b3      	ldrh	r3, [r6, #12]
 8000bb0:	061a      	lsls	r2, r3, #24
 8000bb2:	d410      	bmi.n	8000bd6 <__swhatbuf_r+0x3e>
 8000bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb8:	e00e      	b.n	8000bd8 <__swhatbuf_r+0x40>
 8000bba:	466a      	mov	r2, sp
 8000bbc:	f000 f96e 	bl	8000e9c <_fstat_r>
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	dbf2      	blt.n	8000baa <__swhatbuf_r+0x12>
 8000bc4:	9a01      	ldr	r2, [sp, #4]
 8000bc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000bca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000bce:	425a      	negs	r2, r3
 8000bd0:	415a      	adcs	r2, r3
 8000bd2:	602a      	str	r2, [r5, #0]
 8000bd4:	e7ee      	b.n	8000bb4 <__swhatbuf_r+0x1c>
 8000bd6:	2340      	movs	r3, #64	; 0x40
 8000bd8:	2000      	movs	r0, #0
 8000bda:	6023      	str	r3, [r4, #0]
 8000bdc:	b016      	add	sp, #88	; 0x58
 8000bde:	bd70      	pop	{r4, r5, r6, pc}

08000be0 <__smakebuf_r>:
 8000be0:	898b      	ldrh	r3, [r1, #12]
 8000be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000be4:	079d      	lsls	r5, r3, #30
 8000be6:	4606      	mov	r6, r0
 8000be8:	460c      	mov	r4, r1
 8000bea:	d507      	bpl.n	8000bfc <__smakebuf_r+0x1c>
 8000bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000bf0:	6023      	str	r3, [r4, #0]
 8000bf2:	6123      	str	r3, [r4, #16]
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	6163      	str	r3, [r4, #20]
 8000bf8:	b002      	add	sp, #8
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
 8000bfc:	ab01      	add	r3, sp, #4
 8000bfe:	466a      	mov	r2, sp
 8000c00:	f7ff ffca 	bl	8000b98 <__swhatbuf_r>
 8000c04:	9900      	ldr	r1, [sp, #0]
 8000c06:	4605      	mov	r5, r0
 8000c08:	4630      	mov	r0, r6
 8000c0a:	f000 f877 	bl	8000cfc <_malloc_r>
 8000c0e:	b948      	cbnz	r0, 8000c24 <__smakebuf_r+0x44>
 8000c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c14:	059a      	lsls	r2, r3, #22
 8000c16:	d4ef      	bmi.n	8000bf8 <__smakebuf_r+0x18>
 8000c18:	f023 0303 	bic.w	r3, r3, #3
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	81a3      	strh	r3, [r4, #12]
 8000c22:	e7e3      	b.n	8000bec <__smakebuf_r+0xc>
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <__smakebuf_r+0x7c>)
 8000c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8000c28:	89a3      	ldrh	r3, [r4, #12]
 8000c2a:	6020      	str	r0, [r4, #0]
 8000c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c30:	81a3      	strh	r3, [r4, #12]
 8000c32:	9b00      	ldr	r3, [sp, #0]
 8000c34:	6163      	str	r3, [r4, #20]
 8000c36:	9b01      	ldr	r3, [sp, #4]
 8000c38:	6120      	str	r0, [r4, #16]
 8000c3a:	b15b      	cbz	r3, 8000c54 <__smakebuf_r+0x74>
 8000c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c40:	4630      	mov	r0, r6
 8000c42:	f000 f93d 	bl	8000ec0 <_isatty_r>
 8000c46:	b128      	cbz	r0, 8000c54 <__smakebuf_r+0x74>
 8000c48:	89a3      	ldrh	r3, [r4, #12]
 8000c4a:	f023 0303 	bic.w	r3, r3, #3
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	81a3      	strh	r3, [r4, #12]
 8000c54:	89a0      	ldrh	r0, [r4, #12]
 8000c56:	4305      	orrs	r5, r0
 8000c58:	81a5      	strh	r5, [r4, #12]
 8000c5a:	e7cd      	b.n	8000bf8 <__smakebuf_r+0x18>
 8000c5c:	080009f1 	.word	0x080009f1

08000c60 <_free_r>:
 8000c60:	b538      	push	{r3, r4, r5, lr}
 8000c62:	4605      	mov	r5, r0
 8000c64:	2900      	cmp	r1, #0
 8000c66:	d045      	beq.n	8000cf4 <_free_r+0x94>
 8000c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c6c:	1f0c      	subs	r4, r1, #4
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	bfb8      	it	lt
 8000c72:	18e4      	addlt	r4, r4, r3
 8000c74:	f000 f946 	bl	8000f04 <__malloc_lock>
 8000c78:	4a1f      	ldr	r2, [pc, #124]	; (8000cf8 <_free_r+0x98>)
 8000c7a:	6813      	ldr	r3, [r2, #0]
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	b933      	cbnz	r3, 8000c8e <_free_r+0x2e>
 8000c80:	6063      	str	r3, [r4, #4]
 8000c82:	6014      	str	r4, [r2, #0]
 8000c84:	4628      	mov	r0, r5
 8000c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c8a:	f000 b941 	b.w	8000f10 <__malloc_unlock>
 8000c8e:	42a3      	cmp	r3, r4
 8000c90:	d90b      	bls.n	8000caa <_free_r+0x4a>
 8000c92:	6821      	ldr	r1, [r4, #0]
 8000c94:	1862      	adds	r2, r4, r1
 8000c96:	4293      	cmp	r3, r2
 8000c98:	bf04      	itt	eq
 8000c9a:	681a      	ldreq	r2, [r3, #0]
 8000c9c:	685b      	ldreq	r3, [r3, #4]
 8000c9e:	6063      	str	r3, [r4, #4]
 8000ca0:	bf04      	itt	eq
 8000ca2:	1852      	addeq	r2, r2, r1
 8000ca4:	6022      	streq	r2, [r4, #0]
 8000ca6:	6004      	str	r4, [r0, #0]
 8000ca8:	e7ec      	b.n	8000c84 <_free_r+0x24>
 8000caa:	461a      	mov	r2, r3
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	b10b      	cbz	r3, 8000cb4 <_free_r+0x54>
 8000cb0:	42a3      	cmp	r3, r4
 8000cb2:	d9fa      	bls.n	8000caa <_free_r+0x4a>
 8000cb4:	6811      	ldr	r1, [r2, #0]
 8000cb6:	1850      	adds	r0, r2, r1
 8000cb8:	42a0      	cmp	r0, r4
 8000cba:	d10b      	bne.n	8000cd4 <_free_r+0x74>
 8000cbc:	6820      	ldr	r0, [r4, #0]
 8000cbe:	4401      	add	r1, r0
 8000cc0:	1850      	adds	r0, r2, r1
 8000cc2:	4283      	cmp	r3, r0
 8000cc4:	6011      	str	r1, [r2, #0]
 8000cc6:	d1dd      	bne.n	8000c84 <_free_r+0x24>
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	6053      	str	r3, [r2, #4]
 8000cce:	4401      	add	r1, r0
 8000cd0:	6011      	str	r1, [r2, #0]
 8000cd2:	e7d7      	b.n	8000c84 <_free_r+0x24>
 8000cd4:	d902      	bls.n	8000cdc <_free_r+0x7c>
 8000cd6:	230c      	movs	r3, #12
 8000cd8:	602b      	str	r3, [r5, #0]
 8000cda:	e7d3      	b.n	8000c84 <_free_r+0x24>
 8000cdc:	6820      	ldr	r0, [r4, #0]
 8000cde:	1821      	adds	r1, r4, r0
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	bf04      	itt	eq
 8000ce4:	6819      	ldreq	r1, [r3, #0]
 8000ce6:	685b      	ldreq	r3, [r3, #4]
 8000ce8:	6063      	str	r3, [r4, #4]
 8000cea:	bf04      	itt	eq
 8000cec:	1809      	addeq	r1, r1, r0
 8000cee:	6021      	streq	r1, [r4, #0]
 8000cf0:	6054      	str	r4, [r2, #4]
 8000cf2:	e7c7      	b.n	8000c84 <_free_r+0x24>
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000084 	.word	0x20000084

08000cfc <_malloc_r>:
 8000cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfe:	1ccd      	adds	r5, r1, #3
 8000d00:	f025 0503 	bic.w	r5, r5, #3
 8000d04:	3508      	adds	r5, #8
 8000d06:	2d0c      	cmp	r5, #12
 8000d08:	bf38      	it	cc
 8000d0a:	250c      	movcc	r5, #12
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	db01      	blt.n	8000d16 <_malloc_r+0x1a>
 8000d12:	42a9      	cmp	r1, r5
 8000d14:	d903      	bls.n	8000d1e <_malloc_r+0x22>
 8000d16:	230c      	movs	r3, #12
 8000d18:	6033      	str	r3, [r6, #0]
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d1e:	f000 f8f1 	bl	8000f04 <__malloc_lock>
 8000d22:	4921      	ldr	r1, [pc, #132]	; (8000da8 <_malloc_r+0xac>)
 8000d24:	680a      	ldr	r2, [r1, #0]
 8000d26:	4614      	mov	r4, r2
 8000d28:	b99c      	cbnz	r4, 8000d52 <_malloc_r+0x56>
 8000d2a:	4f20      	ldr	r7, [pc, #128]	; (8000dac <_malloc_r+0xb0>)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b923      	cbnz	r3, 8000d3a <_malloc_r+0x3e>
 8000d30:	4621      	mov	r1, r4
 8000d32:	4630      	mov	r0, r6
 8000d34:	f000 f83c 	bl	8000db0 <_sbrk_r>
 8000d38:	6038      	str	r0, [r7, #0]
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	f000 f837 	bl	8000db0 <_sbrk_r>
 8000d42:	1c43      	adds	r3, r0, #1
 8000d44:	d123      	bne.n	8000d8e <_malloc_r+0x92>
 8000d46:	230c      	movs	r3, #12
 8000d48:	6033      	str	r3, [r6, #0]
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	f000 f8e0 	bl	8000f10 <__malloc_unlock>
 8000d50:	e7e3      	b.n	8000d1a <_malloc_r+0x1e>
 8000d52:	6823      	ldr	r3, [r4, #0]
 8000d54:	1b5b      	subs	r3, r3, r5
 8000d56:	d417      	bmi.n	8000d88 <_malloc_r+0x8c>
 8000d58:	2b0b      	cmp	r3, #11
 8000d5a:	d903      	bls.n	8000d64 <_malloc_r+0x68>
 8000d5c:	6023      	str	r3, [r4, #0]
 8000d5e:	441c      	add	r4, r3
 8000d60:	6025      	str	r5, [r4, #0]
 8000d62:	e004      	b.n	8000d6e <_malloc_r+0x72>
 8000d64:	6863      	ldr	r3, [r4, #4]
 8000d66:	42a2      	cmp	r2, r4
 8000d68:	bf0c      	ite	eq
 8000d6a:	600b      	streq	r3, [r1, #0]
 8000d6c:	6053      	strne	r3, [r2, #4]
 8000d6e:	4630      	mov	r0, r6
 8000d70:	f000 f8ce 	bl	8000f10 <__malloc_unlock>
 8000d74:	f104 000b 	add.w	r0, r4, #11
 8000d78:	1d23      	adds	r3, r4, #4
 8000d7a:	f020 0007 	bic.w	r0, r0, #7
 8000d7e:	1ac2      	subs	r2, r0, r3
 8000d80:	d0cc      	beq.n	8000d1c <_malloc_r+0x20>
 8000d82:	1a1b      	subs	r3, r3, r0
 8000d84:	50a3      	str	r3, [r4, r2]
 8000d86:	e7c9      	b.n	8000d1c <_malloc_r+0x20>
 8000d88:	4622      	mov	r2, r4
 8000d8a:	6864      	ldr	r4, [r4, #4]
 8000d8c:	e7cc      	b.n	8000d28 <_malloc_r+0x2c>
 8000d8e:	1cc4      	adds	r4, r0, #3
 8000d90:	f024 0403 	bic.w	r4, r4, #3
 8000d94:	42a0      	cmp	r0, r4
 8000d96:	d0e3      	beq.n	8000d60 <_malloc_r+0x64>
 8000d98:	1a21      	subs	r1, r4, r0
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	f000 f808 	bl	8000db0 <_sbrk_r>
 8000da0:	3001      	adds	r0, #1
 8000da2:	d1dd      	bne.n	8000d60 <_malloc_r+0x64>
 8000da4:	e7cf      	b.n	8000d46 <_malloc_r+0x4a>
 8000da6:	bf00      	nop
 8000da8:	20000084 	.word	0x20000084
 8000dac:	20000088 	.word	0x20000088

08000db0 <_sbrk_r>:
 8000db0:	b538      	push	{r3, r4, r5, lr}
 8000db2:	4d06      	ldr	r5, [pc, #24]	; (8000dcc <_sbrk_r+0x1c>)
 8000db4:	2300      	movs	r3, #0
 8000db6:	4604      	mov	r4, r0
 8000db8:	4608      	mov	r0, r1
 8000dba:	602b      	str	r3, [r5, #0]
 8000dbc:	f7ff fb6a 	bl	8000494 <_sbrk>
 8000dc0:	1c43      	adds	r3, r0, #1
 8000dc2:	d102      	bne.n	8000dca <_sbrk_r+0x1a>
 8000dc4:	682b      	ldr	r3, [r5, #0]
 8000dc6:	b103      	cbz	r3, 8000dca <_sbrk_r+0x1a>
 8000dc8:	6023      	str	r3, [r4, #0]
 8000dca:	bd38      	pop	{r3, r4, r5, pc}
 8000dcc:	20000098 	.word	0x20000098

08000dd0 <__sread>:
 8000dd0:	b510      	push	{r4, lr}
 8000dd2:	460c      	mov	r4, r1
 8000dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dd8:	f000 f8a0 	bl	8000f1c <_read_r>
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	bfab      	itete	ge
 8000de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000de2:	89a3      	ldrhlt	r3, [r4, #12]
 8000de4:	181b      	addge	r3, r3, r0
 8000de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000dea:	bfac      	ite	ge
 8000dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8000dee:	81a3      	strhlt	r3, [r4, #12]
 8000df0:	bd10      	pop	{r4, pc}

08000df2 <__swrite>:
 8000df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000df6:	461f      	mov	r7, r3
 8000df8:	898b      	ldrh	r3, [r1, #12]
 8000dfa:	05db      	lsls	r3, r3, #23
 8000dfc:	4605      	mov	r5, r0
 8000dfe:	460c      	mov	r4, r1
 8000e00:	4616      	mov	r6, r2
 8000e02:	d505      	bpl.n	8000e10 <__swrite+0x1e>
 8000e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e08:	2302      	movs	r3, #2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f000 f868 	bl	8000ee0 <_lseek_r>
 8000e10:	89a3      	ldrh	r3, [r4, #12]
 8000e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e1a:	81a3      	strh	r3, [r4, #12]
 8000e1c:	4632      	mov	r2, r6
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4628      	mov	r0, r5
 8000e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e26:	f000 b817 	b.w	8000e58 <_write_r>

08000e2a <__sseek>:
 8000e2a:	b510      	push	{r4, lr}
 8000e2c:	460c      	mov	r4, r1
 8000e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e32:	f000 f855 	bl	8000ee0 <_lseek_r>
 8000e36:	1c43      	adds	r3, r0, #1
 8000e38:	89a3      	ldrh	r3, [r4, #12]
 8000e3a:	bf15      	itete	ne
 8000e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e46:	81a3      	strheq	r3, [r4, #12]
 8000e48:	bf18      	it	ne
 8000e4a:	81a3      	strhne	r3, [r4, #12]
 8000e4c:	bd10      	pop	{r4, pc}

08000e4e <__sclose>:
 8000e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e52:	f000 b813 	b.w	8000e7c <_close_r>
	...

08000e58 <_write_r>:
 8000e58:	b538      	push	{r3, r4, r5, lr}
 8000e5a:	4d07      	ldr	r5, [pc, #28]	; (8000e78 <_write_r+0x20>)
 8000e5c:	4604      	mov	r4, r0
 8000e5e:	4608      	mov	r0, r1
 8000e60:	4611      	mov	r1, r2
 8000e62:	2200      	movs	r2, #0
 8000e64:	602a      	str	r2, [r5, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	f7ff fac7 	bl	80003fa <_write>
 8000e6c:	1c43      	adds	r3, r0, #1
 8000e6e:	d102      	bne.n	8000e76 <_write_r+0x1e>
 8000e70:	682b      	ldr	r3, [r5, #0]
 8000e72:	b103      	cbz	r3, 8000e76 <_write_r+0x1e>
 8000e74:	6023      	str	r3, [r4, #0]
 8000e76:	bd38      	pop	{r3, r4, r5, pc}
 8000e78:	20000098 	.word	0x20000098

08000e7c <_close_r>:
 8000e7c:	b538      	push	{r3, r4, r5, lr}
 8000e7e:	4d06      	ldr	r5, [pc, #24]	; (8000e98 <_close_r+0x1c>)
 8000e80:	2300      	movs	r3, #0
 8000e82:	4604      	mov	r4, r0
 8000e84:	4608      	mov	r0, r1
 8000e86:	602b      	str	r3, [r5, #0]
 8000e88:	f7ff fad3 	bl	8000432 <_close>
 8000e8c:	1c43      	adds	r3, r0, #1
 8000e8e:	d102      	bne.n	8000e96 <_close_r+0x1a>
 8000e90:	682b      	ldr	r3, [r5, #0]
 8000e92:	b103      	cbz	r3, 8000e96 <_close_r+0x1a>
 8000e94:	6023      	str	r3, [r4, #0]
 8000e96:	bd38      	pop	{r3, r4, r5, pc}
 8000e98:	20000098 	.word	0x20000098

08000e9c <_fstat_r>:
 8000e9c:	b538      	push	{r3, r4, r5, lr}
 8000e9e:	4d07      	ldr	r5, [pc, #28]	; (8000ebc <_fstat_r+0x20>)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	602b      	str	r3, [r5, #0]
 8000eaa:	f7ff facd 	bl	8000448 <_fstat>
 8000eae:	1c43      	adds	r3, r0, #1
 8000eb0:	d102      	bne.n	8000eb8 <_fstat_r+0x1c>
 8000eb2:	682b      	ldr	r3, [r5, #0]
 8000eb4:	b103      	cbz	r3, 8000eb8 <_fstat_r+0x1c>
 8000eb6:	6023      	str	r3, [r4, #0]
 8000eb8:	bd38      	pop	{r3, r4, r5, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000098 	.word	0x20000098

08000ec0 <_isatty_r>:
 8000ec0:	b538      	push	{r3, r4, r5, lr}
 8000ec2:	4d06      	ldr	r5, [pc, #24]	; (8000edc <_isatty_r+0x1c>)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	4608      	mov	r0, r1
 8000eca:	602b      	str	r3, [r5, #0]
 8000ecc:	f7ff facb 	bl	8000466 <_isatty>
 8000ed0:	1c43      	adds	r3, r0, #1
 8000ed2:	d102      	bne.n	8000eda <_isatty_r+0x1a>
 8000ed4:	682b      	ldr	r3, [r5, #0]
 8000ed6:	b103      	cbz	r3, 8000eda <_isatty_r+0x1a>
 8000ed8:	6023      	str	r3, [r4, #0]
 8000eda:	bd38      	pop	{r3, r4, r5, pc}
 8000edc:	20000098 	.word	0x20000098

08000ee0 <_lseek_r>:
 8000ee0:	b538      	push	{r3, r4, r5, lr}
 8000ee2:	4d07      	ldr	r5, [pc, #28]	; (8000f00 <_lseek_r+0x20>)
 8000ee4:	4604      	mov	r4, r0
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	4611      	mov	r1, r2
 8000eea:	2200      	movs	r2, #0
 8000eec:	602a      	str	r2, [r5, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	f7ff fac3 	bl	800047a <_lseek>
 8000ef4:	1c43      	adds	r3, r0, #1
 8000ef6:	d102      	bne.n	8000efe <_lseek_r+0x1e>
 8000ef8:	682b      	ldr	r3, [r5, #0]
 8000efa:	b103      	cbz	r3, 8000efe <_lseek_r+0x1e>
 8000efc:	6023      	str	r3, [r4, #0]
 8000efe:	bd38      	pop	{r3, r4, r5, pc}
 8000f00:	20000098 	.word	0x20000098

08000f04 <__malloc_lock>:
 8000f04:	4801      	ldr	r0, [pc, #4]	; (8000f0c <__malloc_lock+0x8>)
 8000f06:	f7ff be45 	b.w	8000b94 <__retarget_lock_acquire_recursive>
 8000f0a:	bf00      	nop
 8000f0c:	20000090 	.word	0x20000090

08000f10 <__malloc_unlock>:
 8000f10:	4801      	ldr	r0, [pc, #4]	; (8000f18 <__malloc_unlock+0x8>)
 8000f12:	f7ff be40 	b.w	8000b96 <__retarget_lock_release_recursive>
 8000f16:	bf00      	nop
 8000f18:	20000090 	.word	0x20000090

08000f1c <_read_r>:
 8000f1c:	b538      	push	{r3, r4, r5, lr}
 8000f1e:	4d07      	ldr	r5, [pc, #28]	; (8000f3c <_read_r+0x20>)
 8000f20:	4604      	mov	r4, r0
 8000f22:	4608      	mov	r0, r1
 8000f24:	4611      	mov	r1, r2
 8000f26:	2200      	movs	r2, #0
 8000f28:	602a      	str	r2, [r5, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	f7ff fa48 	bl	80003c0 <_read>
 8000f30:	1c43      	adds	r3, r0, #1
 8000f32:	d102      	bne.n	8000f3a <_read_r+0x1e>
 8000f34:	682b      	ldr	r3, [r5, #0]
 8000f36:	b103      	cbz	r3, 8000f3a <_read_r+0x1e>
 8000f38:	6023      	str	r3, [r4, #0]
 8000f3a:	bd38      	pop	{r3, r4, r5, pc}
 8000f3c:	20000098 	.word	0x20000098

08000f40 <_init>:
 8000f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f42:	bf00      	nop
 8000f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f46:	bc08      	pop	{r3}
 8000f48:	469e      	mov	lr, r3
 8000f4a:	4770      	bx	lr

08000f4c <_fini>:
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	bf00      	nop
 8000f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f52:	bc08      	pop	{r3}
 8000f54:	469e      	mov	lr, r3
 8000f56:	4770      	bx	lr
