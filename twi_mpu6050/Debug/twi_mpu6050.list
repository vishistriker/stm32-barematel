
twi_mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f28  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010d0  080010d8  000110d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080010d0  080010d0  000110d8  2**0
                  CONTENTS
  4 .ARM          00000000  080010d0  080010d0  000110d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010d0  080010d8  000110d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010d0  080010d0  000110d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010d4  080010d4  000110d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000110d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000110d8  2**0
                  CONTENTS
 10 .bss          00000040  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000040  20000040  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000110d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000134d  00000000  00000000  00011102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000562  00000000  00000000  0001244f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  000129b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000d0  00000000  00000000  00012ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184c3  00000000  00000000  00012bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a87  00000000  00000000  0002b073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000882dc  00000000  00000000  0002cafa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b4dd6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003f8  00000000  00000000  000b4e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080010b8 	.word	0x080010b8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080010b8 	.word	0x080010b8

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <TIM6Config>:

#include "Delay.h"
#include "RccConfig.h"

void TIM6Config (void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
	2. Set the prescalar and the ARR
	3. Enable the Timer, and wait for the update Flag to set
	************************************************/

// 1. Enable Timer clock
	RCC->APB1ENR |= (1<<4);  // Enable the timer6 clock
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <TIM6Config+0x44>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <TIM6Config+0x44>)
 8000a2e:	f043 0310 	orr.w	r3, r3, #16
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
	
// 2. Set the prescalar and the ARR
	TIM6->PSC = 90-1;  // 90MHz/90 = 1 MHz ~~ 1 uS delay
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <TIM6Config+0x48>)
 8000a36:	2259      	movs	r2, #89	; 0x59
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = 0xffff;  // MAX ARR value
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <TIM6Config+0x48>)
 8000a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
	
// 3. Enable the Timer, and wait for the update Flag to set
	TIM6->CR1 |= (1<<0); // Enable the Counter
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <TIM6Config+0x48>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <TIM6Config+0x48>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6013      	str	r3, [r2, #0]
	while (!(TIM6->SR & (1<<0)));  // UIF: Update interrupt flag..  This bit is set by hardware when the registers are updated
 8000a4e:	bf00      	nop
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <TIM6Config+0x48>)
 8000a52:	691b      	ldr	r3, [r3, #16]
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0f9      	beq.n	8000a50 <TIM6Config+0x2c>
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40001000 	.word	0x40001000

08000a70 <Delay_us>:

void Delay_us (uint16_t us)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	80fb      	strh	r3, [r7, #6]
	/************** STEPS TO FOLLOW *****************
	1. RESET the Counter
	2. Wait for the Counter to reach the entered value. As each count will take 1 us, 
		 the total waiting time will be the required us delay
	************************************************/
	TIM6->CNT = 0;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <Delay_us+0x28>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM6->CNT < us);
 8000a80:	bf00      	nop
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <Delay_us+0x28>)
 8000a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d3fa      	bcc.n	8000a82 <Delay_us+0x12>
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	40001000 	.word	0x40001000

08000a9c <Delay_ms>:

void Delay_ms (uint16_t ms)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i=0; i<ms; i++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	81fb      	strh	r3, [r7, #14]
 8000aaa:	e006      	b.n	8000aba <Delay_ms+0x1e>
	{
		Delay_us (1000); // delay of 1 ms
 8000aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab0:	f7ff ffde 	bl	8000a70 <Delay_us>
	for (uint16_t i=0; i<ms; i++)
 8000ab4:	89fb      	ldrh	r3, [r7, #14]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	81fb      	strh	r3, [r7, #14]
 8000aba:	89fa      	ldrh	r2, [r7, #14]
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d3f4      	bcc.n	8000aac <Delay_ms+0x10>
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <SysClockConfig>:
  */

#include "RccConfig.h"

void SysClockConfig (void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
	#define PLL_M 	4
	#define PLL_N 	180
	#define PLL_P 	0  // PLLP = 2

	// 1. ENABLE HSE and wait for the HSE to become Ready
	RCC->CR |= RCC_CR_HSEON;
 8000ad0:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <SysClockConfig+0xa4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a26      	ldr	r2, [pc, #152]	; (8000b70 <SysClockConfig+0xa4>)
 8000ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ada:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 8000adc:	bf00      	nop
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <SysClockConfig+0xa4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d0f9      	beq.n	8000ade <SysClockConfig+0x12>

	// 2. Set the POWER ENABLE CLOCK and VOLTAGE REGULATOR
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000aea:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <SysClockConfig+0xa4>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a20      	ldr	r2, [pc, #128]	; (8000b70 <SysClockConfig+0xa4>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_VOS;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <SysClockConfig+0xa8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a1e      	ldr	r2, [pc, #120]	; (8000b74 <SysClockConfig+0xa8>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6013      	str	r3, [r2, #0]


	// 3. Configure the FLASH PREFETCH and the LATENCY Related Settings
	FLASH->ACR = FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <SysClockConfig+0xac>)
 8000b04:	f240 7205 	movw	r2, #1797	; 0x705
 8000b08:	601a      	str	r2, [r3, #0]

	// 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
	// AHB PR
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <SysClockConfig+0xa4>)
 8000b0c:	4a18      	ldr	r2, [pc, #96]	; (8000b70 <SysClockConfig+0xa4>)
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	6093      	str	r3, [r2, #8]

	// APB1 PR
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <SysClockConfig+0xa4>)
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <SysClockConfig+0xa4>)
 8000b18:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000b1c:	6093      	str	r3, [r2, #8]

	// APB2 PR
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <SysClockConfig+0xa4>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <SysClockConfig+0xa4>)
 8000b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b28:	6093      	str	r3, [r2, #8]


	// 5. Configure the MAIN PLL
	RCC->PLLCFGR = (PLL_M <<0) | (PLL_N << 6) | (PLL_P <<16) | (RCC_PLLCFGR_PLLSRC_HSE);
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <SysClockConfig+0xa4>)
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <SysClockConfig+0xb0>)
 8000b2e:	605a      	str	r2, [r3, #4]

	// 6. Enable the PLL and wait for it to become ready
	RCC->CR |= RCC_CR_PLLON;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <SysClockConfig+0xa4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <SysClockConfig+0xa4>)
 8000b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b3a:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 8000b3c:	bf00      	nop
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <SysClockConfig+0xa4>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0f9      	beq.n	8000b3e <SysClockConfig+0x72>

	// 7. Select the Clock Source and wait for it to be set
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <SysClockConfig+0xa4>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <SysClockConfig+0xa4>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000b56:	bf00      	nop
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <SysClockConfig+0xa4>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	f003 030c 	and.w	r3, r3, #12
 8000b60:	2b08      	cmp	r3, #8
 8000b62:	d1f9      	bne.n	8000b58 <SysClockConfig+0x8c>
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40007000 	.word	0x40007000
 8000b78:	40023c00 	.word	0x40023c00
 8000b7c:	00402d04 	.word	0x00402d04

08000b80 <MPU_Write>:

#include <stdint.h>
#include "mpu6050.h"

void MPU_Write (uint8_t Address, uint8_t Reg, uint8_t Data)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	71bb      	strb	r3, [r7, #6]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	717b      	strb	r3, [r7, #5]
	I2C_Start ();
 8000b92:	f000 f923 	bl	8000ddc <I2C_Start>
	I2C_Address (Address);
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f959 	bl	8000e50 <I2C_Address>
	I2C_Write (Reg);
 8000b9e:	79bb      	ldrb	r3, [r7, #6]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f937 	bl	8000e14 <I2C_Write>
	I2C_Write (Data);
 8000ba6:	797b      	ldrb	r3, [r7, #5]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 f933 	bl	8000e14 <I2C_Write>
	I2C_Stop ();
 8000bae:	f000 f96d 	bl	8000e8c <I2C_Stop>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <MPU_Read>:

void MPU_Read (uint8_t Address, uint8_t Reg, uint8_t *buffer, uint8_t size)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	603a      	str	r2, [r7, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	71fb      	strb	r3, [r7, #7]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	71bb      	strb	r3, [r7, #6]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	717b      	strb	r3, [r7, #5]
	I2C_Start ();
 8000bd0:	f000 f904 	bl	8000ddc <I2C_Start>
	I2C_Address (Address);
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f93a 	bl	8000e50 <I2C_Address>
	I2C_Write (Reg);
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f918 	bl	8000e14 <I2C_Write>
	I2C_Start ();  // repeated start
 8000be4:	f000 f8fa 	bl	8000ddc <I2C_Start>
	I2C_Read (Address+0x01, buffer, size);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	3301      	adds	r3, #1
 8000bec:	797a      	ldrb	r2, [r7, #5]
 8000bee:	6839      	ldr	r1, [r7, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 f959 	bl	8000ea8 <I2C_Read>
	I2C_Stop ();
 8000bf6:	f000 f949 	bl	8000e8c <I2C_Stop>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <MPU6050_Init>:


void MPU6050_Init (void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	MPU_Read (MPU6050_ADDR,WHO_AM_I_REG, &check, 1);
 8000c08:	1dba      	adds	r2, r7, #6
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	2175      	movs	r1, #117	; 0x75
 8000c0e:	20d0      	movs	r0, #208	; 0xd0
 8000c10:	f7ff ffd3 	bl	8000bba <MPU_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000c14:	79bb      	ldrb	r3, [r7, #6]
 8000c16:	2b68      	cmp	r3, #104	; 0x68
 8000c18:	d11f      	bne.n	8000c5a <MPU6050_Init+0x58>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71fb      	strb	r3, [r7, #7]
		MPU_Write (MPU6050_ADDR, PWR_MGMT_1_REG, Data);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	461a      	mov	r2, r3
 8000c22:	216b      	movs	r1, #107	; 0x6b
 8000c24:	20d0      	movs	r0, #208	; 0xd0
 8000c26:	f7ff ffab 	bl	8000b80 <MPU_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	71fb      	strb	r3, [r7, #7]
		MPU_Write(MPU6050_ADDR, SMPLRT_DIV_REG, Data);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	461a      	mov	r2, r3
 8000c32:	2119      	movs	r1, #25
 8000c34:	20d0      	movs	r0, #208	; 0xd0
 8000c36:	f7ff ffa3 	bl	8000b80 <MPU_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ? 2g
		Data = 0x00;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	71fb      	strb	r3, [r7, #7]
		MPU_Write(MPU6050_ADDR, ACCEL_CONFIG_REG, Data);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	461a      	mov	r2, r3
 8000c42:	211c      	movs	r1, #28
 8000c44:	20d0      	movs	r0, #208	; 0xd0
 8000c46:	f7ff ff9b 	bl	8000b80 <MPU_Write>

		// Set Gyroscope configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ? 250 ?/s
		Data = 0x00;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	71fb      	strb	r3, [r7, #7]
		MPU_Write(MPU6050_ADDR, GYRO_CONFIG_REG, Data);
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	461a      	mov	r2, r3
 8000c52:	211b      	movs	r1, #27
 8000c54:	20d0      	movs	r0, #208	; 0xd0
 8000c56:	f7ff ff93 	bl	8000b80 <MPU_Write>
	}

}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <MPU6050_Read_Accel>:
	MPU6050->Gy = MPU6050->Gyro_Y_RAW /16384.0;
	MPU6050->Gz = MPU6050->Gyro_Z_RAW /16384.0;
}

void MPU6050_Read_Accel (sensor_values * MPU6050)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

	uint8_t Rx_data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	MPU_Read (MPU6050_ADDR, ACCEL_XOUT_H_REG, Rx_data, 6);
 8000c6c:	f107 0208 	add.w	r2, r7, #8
 8000c70:	2306      	movs	r3, #6
 8000c72:	213b      	movs	r1, #59	; 0x3b
 8000c74:	20d0      	movs	r0, #208	; 0xd0
 8000c76:	f7ff ffa0 	bl	8000bba <MPU_Read>

	MPU6050->Accel_X_RAW = (int16_t)(Rx_data[0] << 8 | Rx_data [1]);
 8000c7a:	7a3b      	ldrb	r3, [r7, #8]
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	b21a      	sxth	r2, r3
 8000c80:	7a7b      	ldrb	r3, [r7, #9]
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	4313      	orrs	r3, r2
 8000c86:	b21a      	sxth	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	801a      	strh	r2, [r3, #0]
	MPU6050->Accel_Y_RAW = (int16_t)(Rx_data[2] << 8 | Rx_data [3]);
 8000c8c:	7abb      	ldrb	r3, [r7, #10]
 8000c8e:	021b      	lsls	r3, r3, #8
 8000c90:	b21a      	sxth	r2, r3
 8000c92:	7afb      	ldrb	r3, [r7, #11]
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	805a      	strh	r2, [r3, #2]
	MPU6050->Accel_Z_RAW = (int16_t)(Rx_data[4] << 8 | Rx_data [5]);
 8000c9e:	7b3b      	ldrb	r3, [r7, #12]
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	7b7b      	ldrb	r3, [r7, #13]
 8000ca6:	b21b      	sxth	r3, r3
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	809a      	strh	r2, [r3, #4]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	MPU6050->Ax = MPU6050->Accel_X_RAW/16384.0;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fbe8 	bl	800048c <__aeabi_i2d>
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <MPU6050_Read_Accel+0xcc>)
 8000cc2:	f7ff fd77 	bl	80007b4 <__aeabi_ddiv>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	460b      	mov	r3, r1
 8000cca:	4610      	mov	r0, r2
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f7ff fe59 	bl	8000984 <__aeabi_d2f>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	60da      	str	r2, [r3, #12]
	MPU6050->Ay = MPU6050->Accel_Y_RAW/16384.0;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fbd4 	bl	800048c <__aeabi_i2d>
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MPU6050_Read_Accel+0xcc>)
 8000cea:	f7ff fd63 	bl	80007b4 <__aeabi_ddiv>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	4610      	mov	r0, r2
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f7ff fe45 	bl	8000984 <__aeabi_d2f>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	611a      	str	r2, [r3, #16]
	MPU6050->Az = MPU6050->Accel_Z_RAW/16384.0;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fbc0 	bl	800048c <__aeabi_i2d>
 8000d0c:	f04f 0200 	mov.w	r2, #0
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <MPU6050_Read_Accel+0xcc>)
 8000d12:	f7ff fd4f 	bl	80007b4 <__aeabi_ddiv>
 8000d16:	4602      	mov	r2, r0
 8000d18:	460b      	mov	r3, r1
 8000d1a:	4610      	mov	r0, r2
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f7ff fe31 	bl	8000984 <__aeabi_d2f>
 8000d22:	4602      	mov	r2, r0
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	615a      	str	r2, [r3, #20]
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40d00000 	.word	0x40d00000

08000d34 <I2C_Config>:

#include "twi.h"
#include "RccConfig.h"

void I2C_Config (void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0


	// Enable the I2C CLOCK and GPIO CLOCK
	RCC->APB1ENR |= (1<<21);  // enable I2C CLOCK
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <I2C_Config+0x9c>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	4a24      	ldr	r2, [pc, #144]	; (8000dd0 <I2C_Config+0x9c>)
 8000d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d42:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= (1<<1);  // Enable GPIOB CLOCK
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <I2C_Config+0x9c>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <I2C_Config+0x9c>)
 8000d4a:	f043 0302 	orr.w	r3, r3, #2
 8000d4e:	6313      	str	r3, [r2, #48]	; 0x30


	// Configure the I2C PINs for ALternate Functions
	GPIOB->MODER |= (2<<16) | (2<<18);  // Bits (17:16)= 1:0 --> Alternate Function for Pin PB8; Bits (19:18)= 1:0 --> Alternate Function for Pin PB9
 8000d50:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <I2C_Config+0xa0>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a1f      	ldr	r2, [pc, #124]	; (8000dd4 <I2C_Config+0xa0>)
 8000d56:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000d5a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= (1<<8) | (1<<9);  //  Bit8=1, Bit9=1  output open drain
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <I2C_Config+0xa0>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <I2C_Config+0xa0>)
 8000d62:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d66:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (3<<16) | (3<<18);  // Bits (17:16)= 1:1 --> High Speed for PIN PB8; Bits (19:18)= 1:1 --> High Speed for PIN PB9
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <I2C_Config+0xa0>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	4a19      	ldr	r2, [pc, #100]	; (8000dd4 <I2C_Config+0xa0>)
 8000d6e:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000d72:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR |= (1<<16) | (1<<18);  // Bits (17:16)= 0:1 --> Pull up for PIN PB8; Bits (19:18)= 0:1 --> pull up for PIN PB9
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <I2C_Config+0xa0>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <I2C_Config+0xa0>)
 8000d7a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000d7e:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[1] |= (4<<0) | (4<<4);  // Bits (3:2:1:0) = 0:1:0:0 --> AF4 for pin PB8;  Bits (7:6:5:4) = 0:1:0:0 --> AF4 for pin PB9
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <I2C_Config+0xa0>)
 8000d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d84:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <I2C_Config+0xa0>)
 8000d86:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000d8a:	6253      	str	r3, [r2, #36]	; 0x24


	// Reset the I2C
	I2C1->CR1 |= (1<<15);
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <I2C_Config+0xa4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <I2C_Config+0xa4>)
 8000d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d96:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1<<15);
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <I2C_Config+0xa4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <I2C_Config+0xa4>)
 8000d9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000da2:	6013      	str	r3, [r2, #0]

	// Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
	I2C1->CR2 |= (45<<0);  // PCLK1 FREQUENCY in MHz
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <I2C_Config+0xa4>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <I2C_Config+0xa4>)
 8000daa:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8000dae:	6053      	str	r3, [r2, #4]

	// Configure the clock control registers
	I2C1->CCR = 225<<0;  // check Thigh = CCR * Tpclk1 => CCR = (Thigh / Tpclk1) = ((Tw + Tr) / Tpclk1) = (1000ns + 4000ns)/ 22.22ns = 225
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <I2C_Config+0xa4>)
 8000db2:	22e1      	movs	r2, #225	; 0xe1
 8000db4:	61da      	str	r2, [r3, #28]

	// Configure the rise time register
	I2C1->TRISE = 46;  // check Trise = (Tscl / Tpclk1)+1 = (1000ns / 22.22ns) + 1 = (45 + 1) = 46
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <I2C_Config+0xa4>)
 8000db8:	222e      	movs	r2, #46	; 0x2e
 8000dba:	621a      	str	r2, [r3, #32]

	// Program the I2C_CR1 register to enable the peripheral
	I2C1->CR1 |= (1<<0);  // Enable I2C
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <I2C_Config+0xa4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <I2C_Config+0xa4>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	40005400 	.word	0x40005400

08000ddc <I2C_Start>:

void I2C_Start (void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

	I2C1->CR1 |= (1<<10);  // Enable the ACK
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <I2C_Start+0x34>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <I2C_Start+0x34>)
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dea:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= (1<<8);  // Generate START
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <I2C_Start+0x34>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <I2C_Start+0x34>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df6:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & (1<<0)));  // Wait fror SB bit to set
 8000df8:	bf00      	nop
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <I2C_Start+0x34>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0f9      	beq.n	8000dfa <I2C_Start+0x1e>
}
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	40005400 	.word	0x40005400

08000e14 <I2C_Write>:

void I2C_Write (uint8_t data)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
	while (!(I2C1->SR1 & (1<<7)));  // wait for TXE bit to set
 8000e1e:	bf00      	nop
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <I2C_Write+0x38>)
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0f9      	beq.n	8000e20 <I2C_Write+0xc>
	I2C1->DR = data;
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <I2C_Write+0x38>)
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & (1<<2)));  // wait for BTF bit to set
 8000e32:	bf00      	nop
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <I2C_Write+0x38>)
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f9      	beq.n	8000e34 <I2C_Write+0x20>
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	40005400 	.word	0x40005400

08000e50 <I2C_Address>:

void I2C_Address (uint8_t Address)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	I2C1->DR = Address;  //  send the address
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <I2C_Address+0x38>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & (1<<1)));  // wait for ADDR bit to set
 8000e60:	bf00      	nop
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <I2C_Address+0x38>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f9      	beq.n	8000e62 <I2C_Address+0x12>
	uint8_t temp = I2C1->SR1 | I2C1->SR2;  // read SR1 and SR2 to clear the ADDR bit
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <I2C_Address+0x38>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <I2C_Address+0x38>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	73fb      	strb	r3, [r7, #15]
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40005400 	.word	0x40005400

08000e8c <I2C_Stop>:

void I2C_Stop (void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1<<9);  // Stop I2C
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <I2C_Stop+0x18>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <I2C_Stop+0x18>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	40005400 	.word	0x40005400

08000ea8 <I2C_Read>:

	while (!(I2C1->SR1 & (1<<2)));  // wait for BTF to set
}

void I2C_Read (uint8_t Address, uint8_t *buffer, uint8_t size)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]

	int remaining = size;
 8000eb8:	79bb      	ldrb	r3, [r7, #6]
 8000eba:	60fb      	str	r3, [r7, #12]

/**** STEP 1 ****/
	if (size == 1)
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d12f      	bne.n	8000f22 <I2C_Read+0x7a>
	{
		/**** STEP 1-a ****/
		I2C1->DR = Address;  //  send the address
 8000ec2:	4a4b      	ldr	r2, [pc, #300]	; (8000ff0 <I2C_Read+0x148>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 & (1<<1)));  // wait for ADDR bit to set
 8000ec8:	bf00      	nop
 8000eca:	4b49      	ldr	r3, [pc, #292]	; (8000ff0 <I2C_Read+0x148>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f9      	beq.n	8000eca <I2C_Read+0x22>

		/**** STEP 1-b ****/
		I2C1->CR1 &= ~(1<<10);  // clear the ACK bit
 8000ed6:	4b46      	ldr	r3, [pc, #280]	; (8000ff0 <I2C_Read+0x148>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a45      	ldr	r2, [pc, #276]	; (8000ff0 <I2C_Read+0x148>)
 8000edc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ee0:	6013      	str	r3, [r2, #0]
		uint8_t temp = I2C1->SR1 | I2C1->SR2;  // read SR1 and SR2 to clear the ADDR bit.... EV6 condition
 8000ee2:	4b43      	ldr	r3, [pc, #268]	; (8000ff0 <I2C_Read+0x148>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b41      	ldr	r3, [pc, #260]	; (8000ff0 <I2C_Read+0x148>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	72bb      	strb	r3, [r7, #10]
		I2C1->CR1 |= (1<<9);  // Stop I2C
 8000ef2:	4b3f      	ldr	r3, [pc, #252]	; (8000ff0 <I2C_Read+0x148>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a3e      	ldr	r2, [pc, #248]	; (8000ff0 <I2C_Read+0x148>)
 8000ef8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efc:	6013      	str	r3, [r2, #0]

		/**** STEP 1-c ****/
		while (!(I2C1->SR1 & (1<<6)));  // wait for RxNE to set
 8000efe:	bf00      	nop
 8000f00:	4b3b      	ldr	r3, [pc, #236]	; (8000ff0 <I2C_Read+0x148>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0f9      	beq.n	8000f00 <I2C_Read+0x58>

		/**** STEP 1-d ****/
		buffer[size-remaining] = I2C1->DR;  // Read the data from the DATA REGISTER
 8000f0c:	4b38      	ldr	r3, [pc, #224]	; (8000ff0 <I2C_Read+0x148>)
 8000f0e:	6919      	ldr	r1, [r3, #16]
 8000f10:	79ba      	ldrb	r2, [r7, #6]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b2ca      	uxtb	r2, r1
 8000f1e:	701a      	strb	r2, [r3, #0]
		// Read the Last BYTE
		while (!(I2C1->SR1 & (1<<6)));  // wait for RxNE to set
		buffer[size-remaining] = I2C1->DR;  // copy the data into the buffer
	}

}
 8000f20:	e060      	b.n	8000fe4 <I2C_Read+0x13c>
		I2C1->DR = Address;  //  send the address
 8000f22:	4a33      	ldr	r2, [pc, #204]	; (8000ff0 <I2C_Read+0x148>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	6113      	str	r3, [r2, #16]
		while (!(I2C1->SR1 & (1<<1)));  // wait for ADDR bit to set
 8000f28:	bf00      	nop
 8000f2a:	4b31      	ldr	r3, [pc, #196]	; (8000ff0 <I2C_Read+0x148>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f9      	beq.n	8000f2a <I2C_Read+0x82>
		uint8_t temp = I2C1->SR1 | I2C1->SR2;  // read SR1 and SR2 to clear the ADDR bit
 8000f36:	4b2e      	ldr	r3, [pc, #184]	; (8000ff0 <I2C_Read+0x148>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <I2C_Read+0x148>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	72fb      	strb	r3, [r7, #11]
		while (remaining>2)
 8000f46:	e019      	b.n	8000f7c <I2C_Read+0xd4>
			while (!(I2C1->SR1 & (1<<6)));  // wait for RxNE to set
 8000f48:	bf00      	nop
 8000f4a:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <I2C_Read+0x148>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f9      	beq.n	8000f4a <I2C_Read+0xa2>
			buffer[size-remaining] = I2C1->DR;  // copy the data into the buffer
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <I2C_Read+0x148>)
 8000f58:	6919      	ldr	r1, [r3, #16]
 8000f5a:	79ba      	ldrb	r2, [r7, #6]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	4413      	add	r3, r2
 8000f66:	b2ca      	uxtb	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]
			I2C1->CR1 |= 1<<10;  // Set the ACK bit to Acknowledge the data received
 8000f6a:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <I2C_Read+0x148>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a20      	ldr	r2, [pc, #128]	; (8000ff0 <I2C_Read+0x148>)
 8000f70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f74:	6013      	str	r3, [r2, #0]
			remaining--;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
		while (remaining>2)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	dce2      	bgt.n	8000f48 <I2C_Read+0xa0>
		while (!(I2C1->SR1 & (1<<6)));  // wait for RxNE to set
 8000f82:	bf00      	nop
 8000f84:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <I2C_Read+0x148>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0f9      	beq.n	8000f84 <I2C_Read+0xdc>
		buffer[size-remaining] = I2C1->DR;
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <I2C_Read+0x148>)
 8000f92:	6919      	ldr	r1, [r3, #16]
 8000f94:	79ba      	ldrb	r2, [r7, #6]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b2ca      	uxtb	r2, r1
 8000fa2:	701a      	strb	r2, [r3, #0]
		I2C1->CR1 &= ~(1<<10);  // clear the ACK bit
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <I2C_Read+0x148>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <I2C_Read+0x148>)
 8000faa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fae:	6013      	str	r3, [r2, #0]
		I2C1->CR1 |= (1<<9);  // Stop I2C
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <I2C_Read+0x148>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <I2C_Read+0x148>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]
		remaining--;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
		while (!(I2C1->SR1 & (1<<6)));  // wait for RxNE to set
 8000fc2:	bf00      	nop
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <I2C_Read+0x148>)
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f9      	beq.n	8000fc4 <I2C_Read+0x11c>
		buffer[size-remaining] = I2C1->DR;  // copy the data into the buffer
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <I2C_Read+0x148>)
 8000fd2:	6919      	ldr	r1, [r3, #16]
 8000fd4:	79ba      	ldrb	r2, [r7, #6]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b2ca      	uxtb	r2, r1
 8000fe2:	701a      	strb	r2, [r3, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40005400 	.word	0x40005400

08000ff4 <main>:
#include "mpu6050.h"

sensor_values MPU6050;

int main ()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

	//sensor_values MPU6050;

	SysClockConfig ();
 8000ff8:	f7ff fd68 	bl	8000acc <SysClockConfig>
	TIM6Config ();
 8000ffc:	f7ff fd12 	bl	8000a24 <TIM6Config>
	I2C_Config ();
 8001000:	f7ff fe98 	bl	8000d34 <I2C_Config>

	MPU6050_Init ();
 8001004:	f7ff fdfd 	bl	8000c02 <MPU6050_Init>

	for(;;)
	{
		MPU6050_Read_Accel (&MPU6050);
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <main+0x24>)
 800100a:	f7ff fe2b 	bl	8000c64 <MPU6050_Read_Accel>
		//MPU6050_Read_Gyro (&MPU6050);
		Delay_ms (1000);
 800100e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001012:	f7ff fd43 	bl	8000a9c <Delay_ms>
		MPU6050_Read_Accel (&MPU6050);
 8001016:	e7f7      	b.n	8001008 <main+0x14>
 8001018:	2000001c 	.word	0x2000001c

0800101c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800101e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001020:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <LoopForever+0x6>)
  ldr r1, =_edata
 8001026:	490d      	ldr	r1, [pc, #52]	; (800105c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <LoopForever+0xe>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800102c:	e002      	b.n	8001034 <LoopCopyDataInit>

0800102e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001032:	3304      	adds	r3, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001038:	d3f9      	bcc.n	800102e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <LoopForever+0x12>)
  ldr r4, =_ebss
 800103c:	4c0a      	ldr	r4, [pc, #40]	; (8001068 <LoopForever+0x16>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001040:	e001      	b.n	8001046 <LoopFillZerobss>

08001042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001044:	3204      	adds	r2, #4

08001046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001048:	d3fb      	bcc.n	8001042 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800104a:	f000 f811 	bl	8001070 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800104e:	f7ff ffd1 	bl	8000ff4 <main>

08001052 <LoopForever>:

LoopForever:
    b LoopForever
 8001052:	e7fe      	b.n	8001052 <LoopForever>
  ldr   r0, =_estack
 8001054:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001060:	080010d8 	.word	0x080010d8
  ldr r2, =_sbss
 8001064:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001068:	20000040 	.word	0x20000040

0800106c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>
	...

08001070 <__libc_init_array>:
 8001070:	b570      	push	{r4, r5, r6, lr}
 8001072:	4d0d      	ldr	r5, [pc, #52]	; (80010a8 <__libc_init_array+0x38>)
 8001074:	4c0d      	ldr	r4, [pc, #52]	; (80010ac <__libc_init_array+0x3c>)
 8001076:	1b64      	subs	r4, r4, r5
 8001078:	10a4      	asrs	r4, r4, #2
 800107a:	2600      	movs	r6, #0
 800107c:	42a6      	cmp	r6, r4
 800107e:	d109      	bne.n	8001094 <__libc_init_array+0x24>
 8001080:	4d0b      	ldr	r5, [pc, #44]	; (80010b0 <__libc_init_array+0x40>)
 8001082:	4c0c      	ldr	r4, [pc, #48]	; (80010b4 <__libc_init_array+0x44>)
 8001084:	f000 f818 	bl	80010b8 <_init>
 8001088:	1b64      	subs	r4, r4, r5
 800108a:	10a4      	asrs	r4, r4, #2
 800108c:	2600      	movs	r6, #0
 800108e:	42a6      	cmp	r6, r4
 8001090:	d105      	bne.n	800109e <__libc_init_array+0x2e>
 8001092:	bd70      	pop	{r4, r5, r6, pc}
 8001094:	f855 3b04 	ldr.w	r3, [r5], #4
 8001098:	4798      	blx	r3
 800109a:	3601      	adds	r6, #1
 800109c:	e7ee      	b.n	800107c <__libc_init_array+0xc>
 800109e:	f855 3b04 	ldr.w	r3, [r5], #4
 80010a2:	4798      	blx	r3
 80010a4:	3601      	adds	r6, #1
 80010a6:	e7f2      	b.n	800108e <__libc_init_array+0x1e>
 80010a8:	080010d0 	.word	0x080010d0
 80010ac:	080010d0 	.word	0x080010d0
 80010b0:	080010d0 	.word	0x080010d0
 80010b4:	080010d4 	.word	0x080010d4

080010b8 <_init>:
 80010b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ba:	bf00      	nop
 80010bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010be:	bc08      	pop	{r3}
 80010c0:	469e      	mov	lr, r3
 80010c2:	4770      	bx	lr

080010c4 <_fini>:
 80010c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c6:	bf00      	nop
 80010c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ca:	bc08      	pop	{r3}
 80010cc:	469e      	mov	lr, r3
 80010ce:	4770      	bx	lr
